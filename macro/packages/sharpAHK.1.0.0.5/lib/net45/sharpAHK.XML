<?xml version="1.0"?>
<doc>
    <assembly>
        <name>sharpAHK</name>
    </assembly>
    <members>
        <member name="M:AutoHotkey.Interop.AhkEscape.Quote(System.String)">
            <summary>
            Checks to see if C# string already has quotes, adjust for escape characters
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:AutoHotkey.Interop.AhkEscape.Escape(System.String)">
            <summary>
            Convert C# Escape Characters into AutoHotkey Escapes 
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:AutoHotkey.Interop.AutoHotkeyDll">
            <summary>
            These functions serve as a flat wrapper for AutoHotkey.dll.
            They assume AutoHotkey.dll is in the same directory as your
            executable.
            </summary>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkdll(System.String,System.String,System.String)">
            <summary>
            Start new thread from ahk file.
            </summary>
            <param name="Path">This parameter must be a path to existing ahk file.</param>
            <param name="Options">Additional parameter passed to AutoHotkey.dll (not available in Version 2 alpha).</param>
            <param name="Parameters">Parameters passed to dll.</param>
            <returns>	ahkdll returns a thread handle.</returns>
            <remarks>ahktextdll is available in AutoHotkey[Mini].dll only, not in AutoHotkey.exe.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahktextdll(System.String,System.String,System.String)">
            <summary>
            ahktextdll is used to launch a script in a separate thread from text/variable.
            </summary>
            <param name="Code">This parameter must be a string with ahk script.</param>
            <param name="Options">Additional parameter passed to AutoHotkey.dll (not available in Version 2 alpha).</param>
            <param name="Parameters">Parameters passed to dll.</param>
            <returns>ahkdll returns a thread handle.</returns>
            <remarks>ahktextdll is available in AutoHotkey[Mini].dll only, not in AutoHotkey.exe.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkReady">
            <summary>
            ahkReady is used to check if a dll script is running or not.
            </summary>
            <returns>1 if a thread is running or 0 otherwise.</returns>
            <remarks>Available in AutoHotkey[Mini].dll only, not in AutoHotkey.exe.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkTerminate(System.UInt32)">
            <summary>
            ahkTerminate is used to stop and exit a running script.
            </summary>
            <param name="timeout">Time in milliseconds to wait until thread exits.</param>
            <returns>Returns always 0.</returns>
            <remarks>Available in AutoHotkey[Mini].dll only, not in AutoHotkey.exe.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkReload">
            <summary>
            ahkReload is used to terminate and start a running script again.
            </summary>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkPause(System.String)">
            <summary>
            ahkPause will pause/un-pause a thread and run traditional AutoHotkey Sleep internally.
            </summary>
            <param name="strState">Should be "On" or "Off" as a string</param>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.addFile(System.String,System.Byte,System.Byte)">
            <summary>
            addFile includes additional script from a file to the running script.
            </summary>
            <param name="FilePath">Path to a file that will be added to a running script.</param>
            <param name="AllowDuplicateInclude">Allow duplicate includes.</param>
            <param name="IgnoreLoadFailure">Ignore if loading a file failed.</param>
            <returns>addFile returns a pointer to the first line of new created code.</returns>
            <remarks>pointerLine can be used in ahkExecuteLine to execute one line only or until a return is encountered.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.addScript(System.String,System.Byte)">
            <summary>
            addScript includes additional script from a string to the running script.
            </summary>
            <param name="code">cript that will be added to a running script.</param>
            <param name="execute">Determines whether the added script should be executed.</param>
            <returns>addScript returns a pointer to the first line of new created code.</returns>
            <remarks>pointerLine can be used in ahkExecuteLine to execute one line only or until a return is encountered.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkExec(System.String)">
            <summary>
            Execute a script from a string that contains ahk script.
            </summary>
            <param name="code">Script as string/text or variable containing script that will be executed.</param>
            <returns>Returns true if script was executed and false if there was an error.</returns>
            <remarks>ahkExec will execute the code and delete it before it returns.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkLabel(System.String,System.Boolean)">
            <summary>
            ahkLabel is used to launch a Goto/GoSub routine in script.
            </summary>
            <param name="labelName">Name of label to execute.</param>
            <param name="noWait">Do not to wait until execution finished. </param>
            <returns>	1 if label exists 0 otherwise.</returns>
            <remarks>Default is 0 = wait for code to finish execution.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkFunction(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ahkFunction is used to launch a function in script.
            </summary>
            <param name="functionName">Name of function to call.</param>
            <param name="parameter1">The 1st parameter, or null</param>
            <param name="parameter2">The 2nd parameter, or null</param>
            <param name="parameter3">The 3rd parameter, or null</param>
            <param name="parameter4">The 4th parameter, or null</param>
            <param name="parameter5">The 5th parameter, or null</param>
            <param name="parameter6">The 6th parameter, or null</param>
            <param name="parameter7">The 7th parameter, or null</param>
            <param name="parameter8">The 8th parameter, or null</param>
            <param name="parameter9">The 9th parameter, or null</param>
            <param name="parameter10">The 10th parameter, or null</param>
            <returns>	Return value is always a string/text, add 0 to make sure it resolves to digit if necessary.</returns>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkPostFunction(System.String,System.String)">
            <summary>
            ahkFunction is used to launch a function in script.
            </summary>
            <param name="functionName">Name of function to call.</param>
            <param name="Parameters">Parameters to pass to function.</param>
            <returns>0 if function exists else -1.</returns>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkassign(System.String,System.String)">
            <summary>
            ahkassign is used to assign a string to a variable in script.
            </summary>
            <param name="VariableName">Name of a variable.</param>
            <param name="NewValue">Value to assign to variable.</param>
            <returns>Returns value is 0 on success and -1 on failure.</returns>
            <remarks>ahkassign will create the variable if it does not exist.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkgetvar(System.String,System.Int32)">
            <summary>
            ahkgetvar is used to get a value from a variable in script. 
            </summary>
            <param name="VariableName">Name of variable to get value from.</param>
            <param name="GetPointer">Get value or pointer.</param>
            <returns>Returned value is always a string, add 0 to convert to integer if necessary, especially when using getPointer.</returns>
            <remarks>ahkgetvar returns empty string if variable does not exist or is empty.</remarks>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkFindFunc(System.String)">
            <summary>
            ahkFundFunc is used to get function its pointer
            </summary>
            <param name="FuncName">Name of function to call.</param>
            <returns>Function pointer.</returns>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.ahkFindLabel(System.String)">
            <summary>
            ahkFindLabel is used to get a pointer to the label.
            </summary>
            <param name="LabelName">Name of label.</param>
            <returns>ahkFindLabel returns a pointer to a line where label points to.</returns>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyDll.GetVar(System.String)">
            <summary>
            Build in function to get a pointer to the structure of a user-defined variable. 
            </summary>
            <param name="Variable">the name of the variable</param>
            <returns>The pointer to the variable.</returns>
        </member>
        <member name="T:AutoHotkey.Interop.AutoHotkeyEngine">
            <summary>
            This class expects an AutoHotkey.dll to be available on the machine. (UNICODE) version.
            </summary>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.GetVar(System.String)">
            <summary>
            Gets the value for a varible or an empty string if the variable does not exist.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns>Returns the value of the variable, or an empty string if the variable does not exist.</returns>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.SetVar(System.String,System.String)">
            <summary>
            Sets the value of a variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.Eval(System.String)">
            <summary>
            Evaulates an expression or function and returns the results
            </summary>
            <param name="code">The code to execute</param>
            <returns>Returns the result of an expression</returns>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.LoadFile(System.String,System.Boolean)">
            <summary>
            Loads a file into the running script
            </summary>
            <param name="filePath">The filepath of the script</param>
            <param name="AddReturn">Option to add return in front of code added to keep from executing on startup</param>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.ExecRaw(System.String)">
            <summary>
            Executes raw ahk code.
            </summary>
            <param name="code">The code to execute</param>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.Terminate">
            <summary>
            Terminates running scripts
            </summary>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.Suspend">
            <summary>
            Suspends AHK Scripts
            </summary>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.UnSuspend">
            <summary>
            Unsuspends AHK Scripts
            </summary>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.ExecFunction(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Executes an already defined function.
            </summary>
            <param name="functionName">The name of the function to execute.</param>
            <param name="param1">The 1st parameter</param>
            <param name="param2">The 2nd parameter</param>
            <param name="param3">The 3rd parameter</param>
            <param name="param4">The 4th parameter</param>
            <param name="param5">The 5th parameter</param>
            <param name="param6">The 6th parameter</param>
            <param name="param7">The 7th parameter</param>
            <param name="param8">The 8th parameter</param>
            <param name="param9">The 9th parameter</param>
            <param name="param10">The 10 parameter</param>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.FunctionExists(System.String)">
            <summary>
            Determines if the function exists.
            </summary>
            <param name="functionName">Name of the function.</param>
            <returns>Returns true if the function exists, otherwise false.</returns>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.ExecLabel(System.String)">
            <summary>
            Executes a label
            </summary>
            <param name="labelName">Name of the label.</param>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.LabelExists(System.String)">
            <summary>
            Determines if the label exists.
            </summary>
            <param name="labelName">Name of the label.</param>
            <returns>Returns true if the label exists, otherwise false</returns>
        </member>
        <member name="M:AutoHotkey.Interop.AutoHotkeyEngine.InitalizePipesModule(System.Func{System.String,System.String})">
            <summary>
            Enables communication between AutoHotkey code and the hosting enviorment.
            This module imports an AHK function named SendPipeMessage that you can use
            call the specified handler.
            </summary>
            <param name="sendPipeMessageHandler">The handler that will receive the SendPipesMessage from AHK.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.New_AHKSession(System.Boolean)">
            <summary>Resets Global AHK Session - Causes next AHK call to create a new AHK session. Resets all Hotkeys/Functions/Variables in Memory</summary>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Execute(System.String,System.String,System.Boolean)">
            <summary>Executes AHK Command, Returns Variable Value if ReturnVar is Populated</summary>
            <param name="ahkSTRING">AHK Line / Collection of AHK Commands</param>
            <param name="ReturnVar">Variable name to return value of from AHK Session after executing ahkSTRING</param>
            <param name="NewSession">Option To Initiate New AHK Instance - Resets Previously Used Variables and Loaded AHK</param>
            <returns>Returns String with Value of ReturnVar if Provided</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.GetVar(System.String)">
            <summary>Return the Contents of an AHK Variable Name</summary>
            <param name="VarName">Name of the Variable To Return from AHK</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.SetVar(System.String,System.String)">
            <summary>Programmatically set variable value in AHK Session</summary>
            <param name="VarName">Variable Name in AHK Session</param>
            <param name="VarValue">Value to Assign Variable Name</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Load_ahkFile(System.String,System.Boolean,System.Boolean)">
            <summary>Load AHK Script from a .AHK File Into Current or New AHK Session</summary>
            <param name="AHK_FilePath">AHK Code or FilePath as a String to Load in Current or New AHK Instance</param>
            <param name="NewAHKSession">Option to Reset AHK Instance, Clearing Previously Saved Hotkeys and Variable Values in Memory</param>
            <param name="AddReturn">Option to add Return in front of code added. Keeps from executing your script while loading.</param>
            <returns>False if File Not Found - True if File Found. (Does not indicate success in loading ahk functionality)</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Load_ahkString(System.String,System.Boolean,System.Boolean)">
            <summary>Load AHK Script from a String containing AHK Functions Into Current or New AHK Session</summary>
            <param name="functionsAHK">AHK Script String containing AHK Commands</param>
            <param name="NewAHKSession">option to restart AHK session, clearing previously saved hotkeys and variable values in memory</param>
            <param name="AddReturn">Option to add Return in front of code added. Keeps from executing your script while loading.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ahkSessionInfo(System.Boolean)">
            <summary>
            Displays/Returns String with Whether AHK Session Has Been Initiated + # of AHK Files Loaded into Memory + AHK FilePaths Loaded
            </summary>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Load_ahkDir(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Load All AHK Scripts in Directory Path into New or Current AHK Instance</summary>
            <param name="DirPath">Directory path of AHK files to load</param>
            <param name="Recurse">Option to search subdirectories underneath DirPath for AHK Files (default = false)</param>
            <param name="NewAHKSession">Option to Reset AHK Instance, Clearing Previously Saved Hotkeys and Variable Values in Memory</param>
            <param name="AddReturn">Option to add Return in front of code added. Keeps from executing your script while loading.</param>
            <returns>Returns list of .AHK file paths loaded into current AHK Session</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Function(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Execute AHK Function Previously Loaded in Current AHK Session</summary>
            <param name="FunctionName">Name of Function to Call</param>
            <param name="Param1">Parameter to pass into AHK function</param>
            <param name="Param2">Parameter to pass into AHK function</param>
            <param name="Param3">Parameter to pass into AHK function</param>
            <param name="Param4">Parameter to pass into AHK function</param>
            <param name="Param5">Parameter to pass into AHK function</param>
            <param name="Param6">Parameter to pass into AHK function</param>
            <param name="Param7">Parameter to pass into AHK function</param>
            <param name="Param8">Parameter to pass into AHK function</param>
            <param name="Param9">Parameter to pass into AHK function</param>
            <param name="Param10">Parameter to pass into AHK function</param>
            <returns>Returns value of function? Untested</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FunctionExists(System.String)">
            <summary>
            Checks to see if Function has been defined in AHK Session
            </summary>
            <param name="FunctionName">Name of Function To Check For</param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.GoSub(System.String,System.Boolean)">
            <summary>Execute Label/GoSub Command Loaded in Current AHK Session</summary>
            <param name="GoSubName">AHK Script Label to Execute</param>
            <param name="CheckIfExistsFirst">Option to Confirm Label Exists in Memory Before Attempting To Execute</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.LabelExists(System.String)">
            <summary>
            Checks to see if GoSub Label Exists in AHK Session
            </summary>
            <param name="GoSubLabel"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ErrorLog_Setup(System.Boolean,System.String)">
            <summary>Function Used to Flag Whether AHK Function Uses ErrorLog Value</summary>
            <param name="ErrorLogEnabled">Logs ErrorLevel Variables to Log if True, Otherwise Resets to Blank</param>
            <param name="ErrorLogText">ErrorMessage From Function To Log if Problem Detected</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ErrorLog(System.String,System.String)">
            <summary>Used by AHK Functions to Log Last Script Command/Line Executed and Sets ErrorLevel Value If Detected</summary>
            <param name="ScriptLine">AHK/C# Command with ErrorLevelMessage</param>
            <param name="ErrorLevelMsg"></param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToClipboard(System.String)">
            <summary>
            Write Text to Clipboard
            </summary>
            <param name="WriteText">Writes Text to Clipboard</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Draggable(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Enabling/disabling dragging for control
            Source: https://www.codeproject.com/Tips/178587/Draggable-WinForms-Controls
            </summary>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToBool(System.Object)">
            <summary>Converts String/Int To Bool Variable Type</summary>
            <param name="TrueFalseVar">String/Int to Convert</param>
            <returns>Returns BOOL Variable Type From Input String/Int</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToInt(System.Object)">
            <summary>Converts String/Bool To Int Variable Type</summary>
            <param name="Input">String/Bool/IntPtr to Convert</param>
            <returns>Returns INT Variable Type From Input String/Bool/IntPtr</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToIntPtr(System.Object)">
            <summary>convert string / int to IntPtr</summary>
            <param name="object InputInput"> </param>
            <returns>Returns IntPtr Variable Type From Input String/Int</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToDateTime(System.Object)">
            <summary>Converts String/Int To DateTime Format</summary>
            <param name="TimeString">FileSize on Bytes</param>
            <returns>Returns DateTime Variable Type From TimeString</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FormatBytes(System.Int64)">
            <summary>Returns a human-readable size discriptor for up 64-bit length fields (adds kb/mb/tb to return)</summary>
            <param name="bytes">FileSize on Bytes</param>
            <returns>Returns string with FileSize with Units (KB/MB/TB etc)</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Bytes_To_MB(System.Int64)">
            <summary>
            Convert Bytes to Megabytes
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.KB_To_MB(System.Int64)">
            <summary>
            Convert Kilobytes To Megabytes
            </summary>
            <param name="kilobytes"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.MB_To_GB(System.Double)">
            <summary>
            Convert Megabytes To Gigabytes
            </summary>
            <param name="megabytes"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.MB_To_TB(System.Double)">
            <summary>
            Convert Megabytes To Terabytes
            </summary>
            <param name="megabytes"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.GB_To_MB(System.Double)">
            <summary>
            Convert Gigabytes To Megabytes
            </summary>
            <param name="gigabytes"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.GB_To_TB(System.Double)">
            <summary>
            Convert Gigabytes To Terabytes
            </summary>
            <param name="gigabytes"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.TB_To_MB(System.Double)">
            <summary>
            Convert Terabytes To Megabytes
            </summary>
            <param name="terabytes"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.TB_To_GB(System.Double)">
            <summary>
            Convert Terabytes To Gigabytes
            </summary>
            <param name="terabytes"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.VarType(System.Object,System.Boolean)">
            <summary>
            Returns String With Variable Type Passed Into Object Parameter, Option to Display Type In MessageBox
            </summary>
            <param name="Object">Object To Check For Variable Type</param>
            <param name="DisplayVarType">Option to Display Results in MessageBox (Default = False)</param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.AddColumn(System.Windows.Forms.DataGridView,System.String,System.String)">
            <summary>
            Adds New Text Column To DataGridView (from any thread)
            </summary>
            <param name="dv">DataGridView to Add Column To</param>
            <param name="ColName">New Column Name</param>
            <param name="HeaderText">New Column Header Text</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.MixedColumnGrid(System.Windows.Forms.DataGridView,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add New Columns to DataGridView - Checkbox, ComboDDL, Textbox, Link, Image
            </summary>
            <param name="dv">DataGridView to Populate</param>
            <param name="cbColName">Checkbox Column Name</param>
            <param name="comboDDL">ComboDDL Column Name</param>
            <param name="textColumn">Text Column Name</param>
            <param name="linkColumn">Link Column Name</param>
            <param name="imageColumn">Image Column Name</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.HideColumn(System.Windows.Forms.DataGridView,System.Int32)">
            <summary>Hide (by Column Number) in DataGridView</summary>
            <param name="dv"> </param>
            <param name="ColNumber"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ShowColumn(System.Windows.Forms.DataGridView,System.Int32)">
            <summary>Show (by Column Number) in DataGridView</summary>
            <param name="dv"> </param>
            <param name="ColNumber"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ColCount(System.Windows.Forms.DataGridView)">
            <summary>Returns Column Count (visible and hidden cols)</summary>
            <param name="dv"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.MsgBox(System.String)">
            <summary>
            Behaves Same as MsgBox Command, Options are PreDefined Here for Faster Config
            </summary>
            <param name="Text">Text to Display in MessageBox</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.YesNoBox(System.String,System.String)">
            <summary>yes/no user prompt</summary>
            <param name="Question"> </param>
            <param name=" Title"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.YesNoCancelBox(System.String,System.String)">
            <summary>yes/no/cancel prompt for user input</summary>
            <param name="Question"> </param>
            <param name=" Title"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileAppend(System.String,System.String,System.Int32)">
            <summary>Writes text to the end of a file (first creating the file, if necessary).</summary>
            <param name="Text">The text to append to the file. This text may include linefeed characters (`n) to start new lines.</param>
            <param name="FileName">The name of the file to be appended, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Mode">Mode 0 = Default using AHK FileAppend command | Mode 1 = Using StreamWriter to write Text</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileCopy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Copies one or more files.</summary>
            <param name="SourcePattern">The name of a single file or folder, or a wildcard pattern such as C:\Temp\*.tmp. SourcePattern is assumed to be in WorkingDir if an absolute path isn't specified.</param>
            <param name="DestPattern">The name or pattern of the destination, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="OverWrite">Flag determines whether to overwrite files if they already exist. True = OverWrite Existing Files</param>
            <param name="ProgressDialog">Option to Display Windows FileCopy Dialog While File Transfers</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileCreateShortcut(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates a shortcut (.lnk) file.</summary>
            <param name="Target">Name of the file that the shortcut refers to, which should include an absolute path unless the file is integrated with the system (e.g. Notepad.exe).</param>
            <param name="LinkFile">Name of the shortcut file to be created, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. Be sure to include the .lnk extension. If the file already exists, it will be overwritten.</param>
            <param name="WorkingDir">Directory that will become Target's current working directory when the shortcut is launched. If blank or omitted, the shortcut will have a blank "Start in" field and the system will provide a default working directory when the shortcut is launched.</param>
            <param name="Args">Parameters that will be passed to Target when it is launched. Separate parameters with spaces. If a parameter contains spaces, enclose it in double quotes.</param>
            <param name="Description">Comments that describe the shortcut (used by the OS to display a tooltip, etc.)</param>
            <param name="IconFile">The full path and name of the icon to be displayed for LinkFile. It must either be an ico file or the very first icon of an EXE or DLL.</param>
            <param name="ShortcutKey">A single letter, number, or the name of a single key from the key list (mouse buttons and other non-standard keys might not be supported). Do not include modifier symbols. Currently, all shortcut keys are created as CTRL+ALT shortcuts. For example, if the letter B is specified for this parameter, the shortcut key will be CTRL-ALT-B.</param>
            <param name="IconNumber">To use an icon in IconFile other than the first, specify that number here (can be an expression). For example, 2 is the second icon.</param>
            <param name="RunState">To have Target launched minimized or maximized, specify one of the following digits: 1 - Normal (this is the default) | 3 - Maximized | 7 - Minimized</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.AppShortcutToStartup">
            <summary>
            Adds shortcut to application for current executable in user's startup directory  
            </summary>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.UrlShortcutToDesktop(System.String,System.String,System.String)">
            <summary>
            Creates URL shortcut on user's pc (default location = desktop)
            </summary>
            <param name="linkName">Name of URL ShortCut/Site</param>
            <param name="linkUrl">URL for new Link</param>
            <param name="SaveDir">Directory to save new link to</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileDelete(System.String,System.Boolean)">
            <summary>Deletes one or more files.</summary>
            <param name="FilePattern">The name of a single file or a wildcard pattern such as C:\Temp\*.tmp. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="PromptUser">Option to Prompt User with Yes/No PopUp Dialog Before Deleting (Default = False)</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileGetAttrib(System.String)">
            <summary>Reports whether a file or folder is read-only, hidden, etc.</summary>
            <param name="Filename">The name of the target file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>        
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileGetShortcut(System.String)">
            <summary>Retrieves information about a shortcut (.lnk) file, such as its target file.</summary>
            <param name="LinkFile"></param>        
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileBytes(System.String)">
            <summary>Read File, Return File Bytes</summary>
            <param name="filePath">Path to file to convert to bytes</param>    
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileGetSize(System.String,System.String)">
            <summary>Retrieves the size of a file.</summary>
            <param name="Filename">The name of the target file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Units">If present, this parameter causes the result to be returned in units other than bytes: K = kilobytes | M = megabytes</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileGetTime(System.String,System.String)">
            <summary>Retrieves the datetime stamp of a file or folder.</summary>
            <param name="Filename">The name of the target file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="WhichTime">Which timestamp to retrieve: M = Modification time (default if omitted) | C = Creation time | A = Last access time   </param>        
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileGetVersion(System.String)">
            <summary>Retrieves the version of a file.</summary>
            <param name="Filename">The name of the target file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileMove(System.String,System.String,System.Boolean)">
            <summary>Moves or renames one or more files.</summary>
            <param name="SourcePattern">The name of a single file or a wildcard pattern such as C:\Temp\*.tmp. SourcePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="DestPattern">The name or pattern of the destination, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. To perform a simple move -- retaining the existing file name(s) -- specify only the folder name as shown in these functionally identical examples: FileMove, C:\*.txt, C:\My Folder</param>
            <param name="OverWrite">Determines whether to overwrite files if they already exist</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileRename(System.String,System.String,System.Boolean)">
            <summary>Renames one or more files (same as FileMove)</summary>
            <param name="SourcePattern">The name of a single file or a wildcard pattern such as C:\Temp\*.tmp. SourcePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="DestPattern">The name or pattern of the destination, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. To perform a simple move -- retaining the existing file name(s) -- specify only the folder name as shown in these functionally identical examples: FileMove, C:\*.txt, C:\My Folder</param>
            <param name="OverWrite">Determines whether to overwrite files if they already exist</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileListLoop(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loop through file pattern, return matches as list of full file paths
            </summary>
            <param name="FilePattern"></param>
            <param name="IncludeFolders"></param>
            <param name="Recurse"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileCount(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Loop Through File Pattern/Folder, Return Number of Files Found
            </summary>
            <param name="Directory">Path to Folder to Search For FileCount</param>
            <param name="SearchPattern">File Pattern to Match For FileCount, Default = *.*</param>
            <param name="IncludeFolders">Add # of Directories Found to Total File Count</param>
            <param name="Recurse">Option to Include Files Found in Subdirectories. Default = true</param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.DirCount(System.String,System.String,System.Boolean)">
            <summary>
            Loop Through File Pattern/Folder, Return Number of Directories Found
            </summary>
            <param name="Directory">Path to Folder to Search For FileCount</param>
            <param name="SearchPattern">File Pattern to Match For FileCount, Default = *.*</param>
            <param name="Recurse">Option to Include Subdirectories. Default = true</param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileReadLine(System.String,System.String)">
            <summary>Reads the specified line from a file and stores the text in a variable.</summary>
            <param name="Filename">The name of the file to access, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="LineNum">Which line to read (1 is the first, 2 the second, and so on). This can be an expression.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileRead(System.String)">
            <summary>Reads a File's Contents into a Variable</summary>
            <param name="FilePath">Path to File to Read, Assumed to be in %A_WorkingDir% if Absolute Path isn't Specified</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileRecycle(System.String)">
            <summary>Sends a file or directory to the recycle bin, if possible.</summary>
            <param name="FilePattern">The name of a single file or a wildcard pattern such as C:\Temp\*.tmp. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified. To recycle an entire directory, provide its name without a trailing backslash.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileRecycleEmpty(System.String)">
            <summary>Empties the recycle bin.</summary>
            <param name="DriveLetter">If omitted, the recycle bin for all drives is emptied. Otherwise, specify a drive letter such as C:\</param>        
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileSelectFolder(System.String,System.String,System.String)">
            <summary>Displays a standard dialog that allows the user to select a folder.</summary>
            <param name="StartingFolder">If blank or omitted, the dialog's initial selection will be the user's My Documents folder (or possibly My Computer).</param>
            <param name="Options">0: The options are all disabled | 1 (default): A button is provided that allows the user to create new folders. | Add 2 to the above number to provide an edit field that allows the user to type the name of a folder. | Adding 4 ensures that FileSelectFolder will work properly even in a Preinstallation Environment like WinPE or BartPE</param>
            <param name="Prompt">Text displayed in the window to instruct the user what to do. If omitted or blank, it will default to "Select Folder - %A_SCRIPTNAME%" (i.e. the name of the current script).</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileSetAttrib(System.String,System.String,System.String,System.Boolean)">
            <summary>Changes the attributes of one or more files or folders. Wildcards are supported.</summary>
            <param name="Attributes">+ Turn on the attribute | - Turn off the attribute | ^ Toggle the attribute || R = READONLY | A = ARCHIVE | S = SYSTEM | H = HIDDEN | N = NORMAL | O = OFFLINE | T = TEMPORARY</param>
            <param name="FilePattern">The name of a single file or folder, or a wildcard pattern such as C:\Temp\*.tmp. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified. </param>
            <param name="OperateOnFolders">0 (default) Folders are not operated upon (only files). | 1 All files and folders that match the wildcard pattern are operated upon. | 2 Only folders are operated upon (no files)</param>
            <param name="Recurse">False (default) Subfolders are not recursed into. | True = Subfolders are recursed into so that files and folders contained therein are operated upon if they match FilePattern. </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileSetTime(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Changes the datetime stamp of one or more files or folders. Wildcards are supported.</summary>
            <param name="YYYYMMDDHH24MISS">If blank or omitted, it defaults to the current time. Otherwise, specify the time to use for the operation (see Remarks for the format). Years prior to 1601 are not supported.</param>
            <param name="FilePattern">The name of a single file or folder, or a wildcard pattern such as C:\Temp\*.tmp. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="WhichTime">M = Modification time (this is the default if the parameter is blank or omitted) | C = Creation time | A = Last access time</param>
            <param name="OperateOnFolders">0 (default) Folders are not operated upon (only files). | 1 All files and folders that match the wildcard pattern are operated upon. | 2 Only folders are operated upon (no files).</param>
            <param name="Recurse">False (default) Subfolders are not recursed into. | True = Subfolders are recursed into so that files and folders contained therein are operated upon if they match FilePattern.</param>        
        </member>
        <member name="M:AHKExpressions.AHKExpressions.IfExist(System.String)">
            <summary>Checks for the existence of a file or folder.</summary>
            <param name="FilePattern">The path, filename, or file pattern to check. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.IfNotExist(System.String)">
            <summary>Checks for the existence of a file or folder.</summary>
            <param name="FilePattern">The path, filename, or file pattern to check. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>        
        </member>
        <member name="M:AHKExpressions.AHKExpressions.SetWorkingDir(System.String)">
            <summary>Changes the script's current working directory.</summary>
            <param name="DirName">The name of the new working directory, which is assumed to be a subfolder of the current %A_WorkingDir% if an absolute path isn't specified.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileName(System.String,System.Boolean)">
            <summary>Separates a file path - returns file name (with extension)</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileName returns blank if file not found</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileName(System.IO.FileInfo)">
            <summary>Returns File Name (with Extension)</summary>
            <param name="file">File Object to Parse</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileNameNoExt(System.String,System.Boolean)">
            <summary>Separates a file path - returns file name (no extension)</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileNameNoExt returns blank if file not found</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileExt(System.String,System.Boolean,System.Boolean)">
            <summary>Separates a file path - returns file extension (includex '.' prefix)</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileExt returns blank if file not found</param>
            <param name="RemovePrefix">Option to remove leading . in front of File Extention Return</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileDir(System.String,System.Boolean)">
            <summary>Returns File's Parent Directory Path</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileDir returns blank if file not found</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.DirName(System.String,System.Boolean)">
            <summary>Returns File's Parent Directory Name from Full File Path</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileDir returns blank if file not found</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileSize(System.String,System.Boolean,System.Boolean)">
            <summary>Returns name of file size in bytes from file path</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileDir returns blank if file not found</param>
            <param name="ReturnBytes">Returns Bytes by Default, option to override and return bytes converted to KB/MB/TB</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.isCompressed(System.String)">
            <summary>checks whether a file is Compressed</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.isEncrypted(System.String)">
            <summary>checks whether a file is encrypted</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.isReadOnly(System.String)">
            <summary>checks whether a file is read only</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.isHidden(System.String)">
            <summary>checks whether a file is hidden</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.isArchive(System.String)">
            <summary>checks whether a file has archive attribute</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.isSystem(System.String)">
            <summary>checks whether a file is system file</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.isVideo(System.String)">
            <summary>
            Checks FilePath's Extension to see if it matches known video formats
            </summary>
            <param name="FilePath">File path to check</param>
            <returns>Returns True if File is Known Video Format</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.isText(System.String)">
            <summary>
            Checks FilePath's Extension to see if it matches known text file formats
            </summary>
            <param name="FilePath">File path to check</param>
            <returns>Returns True if File is Known Text File Format</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.isImage(System.String)">
            <summary>
            Checks FilePath's Extension to see if it matches known Image File Formats
            </summary>
            <param name="FilePath">File path to check</param>
            <returns>Returns True if File is Known Image File Format</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.CreationTime(System.String)">
            <summary>Returns the timestamp when the file was created</summary>
            <param name="FilePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.LastWriteTime(System.String)">
            <summary>Returns the timestamp when the file was written to</summary>
            <param name="FilePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.LastAccessTime(System.String)">
            <summary>Returns the timestamp when the file was last accessed</summary>
            <param name="FilePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileCopyDir(System.String,System.String,System.Boolean)">
            <summary>Copies a folder along with all its sub-folders and files (similar to xcopy).</summary>
            <param name="Source">Name of the source directory (with no trailing backslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Dest">Name of the destination directory (with no trailing baskslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="OverWrite">Flag determines whether to overwrite files if they already exist. True = OverWrite Existing Files</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.CopyDir(System.String,System.String,System.Boolean)">
            <summary>Copies a folder along with all its sub-folders and files (similar to xcopy) (Same as FileCopyDir)</summary>
            <param name="Source">Name of the source directory (with no trailing backslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Dest">Name of the destination directory (with no trailing baskslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="OverWrite">Flag determines whether to overwrite files if they already exist. True = OverWrite Existing Files</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileCreateDir(System.String)">
            <summary>Creates a directory/folder.</summary>
            <param name="DirName">Name of the directory to create, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.CreateDir(System.String)">
            <summary>Creates a directory/folder. (Same As FileCreateDir)</summary>
            <param name="DirName">Name of the directory to create, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileMoveDir(System.String,System.String,System.String)">
            <summary>Moves a folder along with all its sub-folders and files. It can also rename a folder.</summary>
            <param name="Source">Name of the source directory (with no trailing backslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Dest">The new path and name of the directory (with no trailing baskslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. For example: D:\My Folder. Note: Dest is the actual path and name that the directory will have after it is moved; it is not the directory into which Source is moved (except for the known limitation mentioned below).</param>
            <param name="Flag">0 (default): Do not overwrite existing files. | 1: Overwrite existing files. However, any files or subfolders inside Dest that do not have a counterpart in Source will not be deleted. | 2: The same as mode 1 above except that the limitation is absent. | R: Rename the directory rather than moving it. </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.MoveDir(System.String,System.String,System.String)">
            <summary>Moves a folder along with all its sub-folders and files. It can also rename a folder. (Same as FileMoveDir)</summary>
            <param name="Source">Name of the source directory (with no trailing backslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Dest">The new path and name of the directory (with no trailing baskslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. For example: D:\My Folder. Note: Dest is the actual path and name that the directory will have after it is moved; it is not the directory into which Source is moved (except for the known limitation mentioned below).</param>
            <param name="Flag">0 (default): Do not overwrite existing files. | 1: Overwrite existing files. However, any files or subfolders inside Dest that do not have a counterpart in Source will not be deleted. | 2: The same as mode 1 above except that the limitation is absent. | R: Rename the directory rather than moving it. </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileRemoveDir(System.String,System.Boolean)">
            <summary>Deletes a folder.</summary>
            <param name="DirName">Name of the directory to delete, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Recurse">Recurse = False - Do not remove files and sub-directories contained in DirName. In this case, if DirName is not empty, no action will be taken | True = Remove all files and subdirectories.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.OpenDir(System.String,System.Boolean)">
            <summary>Opens Directory in Windows Explorer Window (If Found), Returns False if there is an Error / Directory Not Found. If File Path Provided, Opens Dir Containing File</summary>
            <param name="DirPath">Path to directory to open in explorer</param>
            <param name="CreateIfMissing">Option to Create Missing Directory instead of Returning False, Opens New Dir After Creating</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileHash(System.String)">
            <summary>
            Returns Hash value for File
            </summary>
            <param name="FilePath"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileCompare(System.String,System.String,System.Boolean)">
            <summary>
            Compare 2 Files To See if they are the same (either compares Hash or Bytes)
            </summary>
            <param name="fileOne">First File To Compare</param>
            <param name="fileTwo">Second File to Compare</param>
            <param name="Hash">Option to Compare File Hashes (Default = True). If False, Compares by Bytes</param>
            <returns>Returns True if Files are the Same</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileCompare_Bytes(System.String,System.String)">
            <summary>
            Compare two files by bytes - returns true if match found 
            </summary>
            <param name="file1"></param>
            <param name="file2"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileCompare_Hash(System.String,System.String)">
            <summary>
            Compares two image paths using hash - returns true if match found
            </summary>
            <param name="file1"></param>
            <param name="file2"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.DirPrint(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Prints List of Files in Directory to String or New Text File
            </summary>
            <param name="SearchDir">Directory to Loop through for File Paths</param>
            <param name="OutFile">If path provided, writes contents of directory to this to new/existing text file</param> 
            <param name="Recurse">Option to Search Files in Subdirectories (aka Recurse) Default = True</param>
            <param name="SearchPattern">File pattern to search for</param>
            <param name="OverWritePrevious">Option to overwrite previous OutFile if it exists (Default = True)</param>
            <param name="OpenAfterWrite">If OutFile path provided, option to open new text file after writing (Default = True)</param>
            <returns>Returns string with list of file paths under SearchDir</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.GetDirectoryTable(System.String,System.Boolean,System.String)">
            <summary>Converts search directory contents to Datatable to display in DataGridView etc</summary>
            <param name="SearchDir"> </param>
            <param name="Recurse"> </param>
            <param name="SearchPattern"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.DirSize(System.String,System.Boolean)">
            <summary>Returns Directory size in Formatted Bytes FileSize Text</summary>
            <param name="DirPath">Path of Directory to Return Size</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.IsDir(System.String)">
            <summary>Returns true if path is a valid Directory Path</summary>
            <param name="FolderPath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.NextFileName(System.String,System.Int32)">
            <summary>Returns the next available file name in a folder, incrementing with "File (FileNumber).ext" Format</summary>
            <param name="FilePath">Original File Name</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.FileList(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:AHKExpressions.AHKExpressions.DirList(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns List of Folders in Directory Path
            </summary>
            <param name="DirPath"> </param>
            <param name="SearchPattern"> </param>
            <param name="Recurse"> </param>
            <param name="FullPathReturn">Option to return either the Full Directory Paths (true) or the Directory name list (false)</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.SafeSaveName(System.String,System.String)">
            <summary>
            Format String Removing Illegal Characters - Allowed to Save As File In Windows
            </summary>
            <param name="FileName"></param>
            <param name="ReplaceChar">Character to replace illegal characters with, Default = Space</param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FileKeywords(System.String)">
            <summary>
            Parse FileName, Reformatting Words to List Tag List
            </summary>
            <param name="FilePath">FilePath</param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Restore_Backup(System.String,System.Boolean,System.String)">
            <summary>Restores Last Backup File Copy in BackupDir to Original Location</summary>
            <param name="FilePath">Path of Original File Previously Backed Up</param>
            <param name="Prompt">Option to Prompt User Before Restoring Backup</param>
            <param name="BackupDir">Directory To Store Backup File. Default = AppDir\\Backup</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Backup_File(System.String,System.Boolean,System.String)">
            <summary>Backup File to Backup Dir with .# ext (also puts \Backup\OriginalName.ext as most recent file copy for opening)</summary>
            <param name="FilePath">Path of Original File To Backup</param>
            <param name="DeleteOriginal">Option to Delete Original File After Successful Backup</param>
            <param name="BackupDir">Directory To Store Backup File. Default = AppDir\\Backup</param>
            <returns>Returns True on Successful Backup</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Last_Backup_File(System.String,System.String,System.Boolean)">
            <summary>Returns Path of the Last Backup File Created for this File Name</summary>
            <param name="FilePath">Path of Original File To Backup</param>
            <param name="BackupDir">Directory To Store Backup File. Default = AppDir\\Backup</param>
            <param name="UseSameNameMostRecent">Overrides Using .# Backup Uses Most Recent Copy of File. Default = True</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Backup_File_Display(System.String,System.Windows.Forms.Control,System.Boolean)">
            <summary>Backup File + Display New Backup File Location on GUI</summary>
            <param name="FilePath">Path of Original File To Backup</param>
            <param name="DisplayControl">WinForm Control Name To Display Backup File Path Returned</param>
            <param name="UseSameNameMostRecent">Overrides Using .# Backup Uses Most Recent Copy of File. Default = True</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToImg(System.String)">
            <summary>Convert LocalFilePath with ImageLocation to Image</summary>
            <param name="FilePath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToIcon(System.String,System.Int32)">
            <summary>Convert Image Path To Icon</summary>
            <param name="ImagePath"> </param>
            <param name="ICOSize">Size of Icon to Create (default = 64) </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.SaveICO(System.Drawing.Icon,System.String)">
            <summary>
            Save Icon to File 
            </summary>
            <param name="IconToSave"></param>
            <param name="SavePath"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToImage(System.Object,System.Int32,System.Int32,System.String)">
            <summary>Convert Image Path (png, ico, exe) / Icon / ImageList (By Key) Item / or Returns Image if Provided</summary>
            <param name="Image"> </param>
            <param name="KeyName"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.From_ImageList(System.Windows.Forms.ImageList,System.String)">
            <summary>search imagelist for key (file name) - returns image</summary>
            <param name="ImageList ILIL"> </param>
            <param name="KeyName"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ImageList_FileNames(System.Windows.Forms.ImageList,System.Boolean,System.Boolean)">
            <summary>return list of key names (also the filename without ext) in ImageList</summary>
            <param name="ImageList ILIL"> </param>
            <param name="FileNameOnly"> </param>
            <param name="FileExt"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.GetCopyImage(System.String)">
            <summary>copy image before loading, frees file to delete</summary>
            <param name="path"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ResizeImage(System.String,System.Int32,System.Int32)">
            <summary>resize image (untested)</summary>
            <param name="newWidth"> </param>
            <param name=" newHeight"> </param>
            <param name=" stPhotoPath"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.IsImage(System.String)">
            <summary>Returns True if FilePath is PNG,GIF,ICO,JPG,JPEG</summary>
            <param name="FilePath">Path of File To Check if Image File</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ImageWidth(System.String)">
            <summary>
            Returns Image's Width
            </summary>
            <param name="FilePath">Path to Image</param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ImageHeight(System.String)">
            <summary>
            Returns Image's Height
            </summary>
            <param name="FilePath">Path to Image</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.InLIST(System.Collections.Generic.List{System.String},System.String,System.Boolean)" -->
        <member name="M:AHKExpressions.AHKExpressions.ListADD(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>Checks if AddItem already exists in LIST, adds to existing list if NOT in LIST</summary>
            <param name="LIST">List of strings to add new distinct item to</param>
            <param name="AddItem">Item to add to LIST if not already in LIST</param>
            <param name="CaseSensitive">Determines whether AddItem value must match LIST item's case exactly before excluding as existing item. False would add "haVe" and "HAVe" as different item values.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ListSEARCH(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>Returns List with items containing SearchText</summary>
            <param name="LIST">List of items to search for items containing SearchText</param>
            <param name="SearchText">Return list of items containg SearchText in list item</param>
            <param name="CaseSensitive">Determines list item must contain same case as SearchText before adding to return list</param>
            <returns>Returns original list minus excluded items list values</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ListREMOVE(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>Removes list of items passed in to remove from Original list - subtracting unwanted items</summary>
            <param name="OriginalList">List of items to search and remove items from</param>
            <param name="RemoveItems">List of items to remove from Original List</param>
            <param name="CaseSensitive">Determines whether RemoveItem must match item in Original list's case before excluding from return list</param>
            <returns>Returns original list minus excluded items list values</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ListREMOVE_Item(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>Removes list of exclude items from the original list - subtracting unwanted items</summary>
            <param name="OriginalList">List of items to search and remove items from</param>
            <param name="RemoveItem">List item to remove from existing list</param>
            <param name="CaseSensitive">Determines whether RemoveItem must match item in Original list's case before excluding from return list</param>
            <returns>Returns list with all items except RemoveItem</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ListREMOVE_Containing(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>Return list that does not contain any items with TextToExclude in itemstring</summary>
            <param name="OriginalList">List of items to search and remove items from</param>
            <param name="ExcludeText">Return list excluding items containing this text</param>
            <param name="CaseSensitive">Determines whether ExcludeText must be case sensitive match to OriginalList item before removing</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ListMERGE(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>Returns new list merging two lists together, with the option to exclude duplicate items</summary>
            <param name="MainList">Existing list to add to</param>
            <param name="AddList">List to add to MainList, returning combined list</param>
            <param name="ExcludeDuplicates">Option to not add items from AddList already found in MainList</param>
            <param name="CaseSensitive">When ExcludeDuplicates is True, determines whether AddList item must match MainList item's case before excluding from merged list</param>
            <returns>Returns new list merging two lists together, with the option to exclude duplicate items</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ListSORT(System.Collections.Generic.List{System.String})">
            <summary>Returns list sorted alphabetically</summary>
            <param name="list">List to sort alphabetically</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ListDIFF(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Compare two lists, return values found in List A NOT Found in List B</summary>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.reverse(System.Collections.Generic.List{System.String})">
            <summary>
            Returns the Same List in Reverse Order
            </summary>
            <param name="aList"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_ItemPosition(System.Collections.Generic.List{System.String},System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_Int_ItemPosition(System.Collections.Generic.List{System.Int32},System.Int32)" -->
        <member name="M:AHKExpressions.AHKExpressions.List_ItemValue(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>Return value of LIST item by Position # in List</summary>
            <param name="LIST">List to return item value from</param>
            <param name="ListPosition">Item # in LIST to Return Value From</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.Return_List_ValueInt(System.Collections.Generic.List{System.Int32},System.Int32)" -->
        <member name="M:AHKExpressions.AHKExpressions.List_FirstItem(System.Collections.Generic.List{System.String})">
            <summary>Returns First Item added to LIST</summary>
            <param name="LIST">List to return First Item Value From</param>
            <returns>Returns first item in LIST, Returns NULL if no items in LIST</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.Last_List_Item(System.Collections.Generic.List{System.String})" -->
        <member name="M:AHKExpressions.AHKExpressions.List_LastItem(System.Collections.Generic.List{System.String})">
            <summary>Returns Last Item added to LIST</summary>
            <param name="LIST">List to return Last Item Value From</param>
            <returns>Returns last item in LIST, Returns NULL if no items in LIST</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.List_ToString(System.Collections.Generic.List{System.String},System.String)">
            <summary>Return list split by SplitChar (ex: ",") as new string</summary>
            <param name="LIST">List to convert to string</param>
            <param name="SplitChar">Character to place between list items in string return</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_ToStringLines(System.Collections.Generic.List{System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.toList(System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.ToListInt(System.Int32,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.TextFile_ToList(System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.TextFile_ToListInt(System.String)" -->
        <member name="M:AHKExpressions.AHKExpressions.Array_ToList(System.String[])">
            <summary>Convert Array[] to List</summary>
            <param name="arr">Array to convert to List</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_ToArray(System.Collections.Generic.List{System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.Dict_KeyList(System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.Dict_KeyListInt(System.Collections.Generic.Dictionary{System.Int32,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.Dict_ValueList(System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.Dict_ValueListInt(System.Collections.Generic.Dictionary{System.String,System.Int32})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.DirList_Images(System.String,System.Boolean)" -->
        <member name="M:AHKExpressions.AHKExpressions.FileList_SortedAlpha_ByFileName(System.String,System.String,System.Boolean)">
            <summary>loop through multiple folders, return files meeting search criteria, sort files by FileName regardless of directory path, return sorted list of full file paths as list</summary>
            <param name="DirPath"> </param>
            <param name="ExtTypes"> </param>
            <param name="Recurse"> </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.FileList_Modified_Today(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.FileList_Modified_Since(System.String,System.DateTime,System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:AHKExpressions.AHKExpressions.List_Drives">
             Drives
            <summary>Returns list of drive letters (C:\ etc) visible on this pc</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_ToCSV(System.Collections.Generic.List{System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.CSV_ToList(System.String,System.String)" -->
        <member name="M:AHKExpressions.AHKExpressions.ControlList(System.Windows.Forms.Control)">
            <summary>Returns List of Controls on a Form as a Control List</summary>
            <param name="FormName">WinForm to return list of Controls From</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_To_Grid(System.Windows.Forms.DataGridView,System.Collections.Generic.List{System.String},System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_To_GridInt(System.Windows.Forms.DataGridView,System.Collections.Generic.List{System.Int32},System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_To_TreeView(System.Windows.Forms.TreeView,System.Collections.Generic.List{System.String},System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_To_TreeViewInt(System.Windows.Forms.TreeView,System.Collections.Generic.List{System.Int32},System.String,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_To_ComboBox(System.Windows.Forms.ComboBox,System.Collections.Generic.List{System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_To_ComboBoxInt(System.Windows.Forms.ComboBox,System.Collections.Generic.List{System.Int32})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_To_ListBox(System.Windows.Forms.ListBox,System.Collections.Generic.List{System.String},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.List_To_ListBoxInt(System.Windows.Forms.ListBox,System.Collections.Generic.List{System.Int32})" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.TreeViewList(System.Windows.Forms.TreeView,System.Collections.Generic.List{System.String},System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.TreeViewList_Int(System.Windows.Forms.TreeView,System.Collections.Generic.List{System.Int32},System.String)" -->
        <member name="M:AHKExpressions.AHKExpressions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle Contents of List 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.SortByValue(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>Sort Dictionary by Value</summary>
            <param name="dict">Dictionary to Sort</param>
            <param name="Reverse">Reverses the Alpha Sort from A-Z to Z-A</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.SortByKey(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>Sort Dictionary by Key</summary>
            <param name="dict">Dictionary to Sort</param>
            <param name="Reverse">Reverses the Alpha Sort from A-Z to Z-A</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToDataTable(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>Converts Dictionary to DataTable</summary>
            <param name="dictionary">Dictionary to Convert</param>
            <param name="KeyField">DataTable Column Header for Key Column</param>
            <param name="ValueField">DataTable Column Header for Value Column</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Value(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Returns Dictionary Value from Key
            </summary>
            <param name="Dict"></param>
            <param name="KeyName"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.KeyList(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)" -->
        <member name="M:AHKExpressions.AHKExpressions.ValueList(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>Returns List of Values from Dictionary </summary>
            <param name="dictionary"></param>
            <param name="SortAlpha">Option to Sort Return List Alphabetically</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Run(System.String,System.String,System.String)">
            <summary>Runs an external program.</summary>
            <param name="Target">A document, URL, executable file (.exe, .com, .bat, etc.), shortcut (.lnk), or system verb to launch (see remarks). If Target is a local file and no path was specified with it, A_WorkingDir will be searched first. If no matching file is found there, the system will search for and launch the file if it is integrated ("known"), e.g. by being contained in one of the PATH folders. To pass parameters, add them immediately after the program or document name. If a parameter contains spaces, it is safest to enclose it in double quotes (even though it may work without them in some cases).</param>
            <param name="WorkingDir">The working directory for the launched item. Do not enclose the name in double quotes even if it contains spaces. If omitted, the script's own working directory (A_WorkingDir) will be used. </param>
            <param name="MinMaxHideUseErrorLevel">Max: launch maximized | Min: launch minimized | Hide: launch hidden | UseErrorLevel: If the launch fails, this option skips the warning dialog, sets ErrorLevel to the word ERROR, and allows the current thread to continue. </param>
            <returns>Returns OutputVarPID as string</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.RunWait(System.String,System.String,System.String)">
            <summary>Runs an external program. RunWait will wait until the program finishes before continuing.</summary>
            <param name="Target">A document, URL, executable file (.exe, .com, .bat, etc.), shortcut (.lnk), or system verb to launch (see remarks). If Target is a local file and no path was specified with it, A_WorkingDir will be searched first. If no matching file is found there, the system will search for and launch the file if it is integrated ("known"), e.g. by being contained in one of the PATH folders. To pass parameters, add them immediately after the program or document name. If a parameter contains spaces, it is safest to enclose it in double quotes (even though it may work without them in some cases).</param>
            <param name="WorkingDir">The working directory for the launched item. Do not enclose the name in double quotes even if it contains spaces. If omitted, the script's own working directory (A_WorkingDir) will be used. </param>
            <param name="MinMaxHideUseErrorLevel">Max: launch maximized | Min: launch minimized | Hide: launch hidden | UseErrorLevel: If the launch fails, this option skips the warning dialog, sets ErrorLevel to the word ERROR, and allows the current thread to continue. </param>
            <returns>Returns OutputVarPID as string</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Sleep(System.Object)">
            <summary>Waits the specified amount of time before continuing.</summary>
            <param name="DelayInMilliseconds">The amount of time to pause (in milliseconds) between 0 and 2147483647 (24 days), which can be an expression.</param>        
        </member>
        <member name="M:AHKExpressions.AHKExpressions.WordCount(System.String)">
            <summary>
            Returns # of Words in String
            </summary>
            <param name="Text">String to check word count</param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.SQL(System.String)">
            <summary>
            Replaces Invalid SQL Characters in Insert/Update Statements
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FormatTime(System.String,System.String)">
            <summary>Transforms a YYYYMMDDHH24MISS timestamp into the specified date/time format.</summary>
            <param name="YYYYMMDDHH24MISS">Leave this parameter blank to use the current local date and time. Otherwise, specify all or the leading part of a timestamp in the YYYYMMDDHH24MISS format. If the date and/or time portion of the timestamp is invalid -- such as February 29th of a non-leap year -- the date and/or time will be omitted from OutputVar. Although only years between 1601 and 9999 are supported, a formatted time can still be produced for earlier years as long as the time portion is valid.</param>
            <param name="Format">If omitted, it defaults to the time followed by the long date, both of which will be formatted according to the current user's locale. For example: 4:55 PM Saturday, November 27, 2004 Otherwise, specify one or more of the date-time formats below, along with any literal spaces and punctuation in between (commas do not need to be escaped; they can be used normally). In the following example, note that M must be capitalized: M/d/yyyy h:mm tt</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringCaseSense(System.String)">
            <summary>Determines whether string comparisons are case sensitive (default is "not case sensitive").</summary>
            <param name="OnOffLocale">On: String comparisons are case sensitive. This setting also makes the expression equal sign operator (=) and the case-insensitive mode of InStr() use the locale method described below. Off (starting default): The letters A-Z are considered identical to their lowercase counterparts. This is the starting default for all scripts due to backward compatibility and performance (Locale is 1 to 8 times slower than Off depending on the nature of the strings being compared). Locale [v1.0.43.03+]: String comparisons are case insensitive according to the rules of the current user's locale. For example, most English and Western European locales treat not only the letters A-Z as identical to their lowercase counterparts, but also ANSI letters like Ä and Ü as identical to theirs. </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringGetPos(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the position of the specified substring within a string.</summary>
            <param name="InputVar">The name of the input variable, whose contents will be searched. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="SearchText">The string to search for. Matching is not case sensitive unless StringCaseSense has been turned on. </param>
            <param name="LR">This affects which occurrence will be found if SearchText occurs more than once within InputVar. If this parameter is omitted, InputVar will be searched starting from the left for the first match. If this parameter is 1 or the letter R, the search will start looking at the right side of InputVar and will continue leftward until the first match is found. To find a match other than the first, specify the letter L or R followed by the number of the occurrence. For example, to find the fourth occurrence from the right, specify r4. Note: If the number is less than or equal to zero, no match will be found.</param>
            <param name="Offset">The number of characters on the leftmost or rightmost side (depending on the parameter above) to skip over. If omitted, the default is 0. For example, the following would start searching at the tenth character from the left: StringGetPos, OutputVar, InputVar, abc, , 9. This parameter can be an expression.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringLeft(System.String,System.Object)">
            <summary>Retrieves a number of characters from the left-hand side of a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be extracted from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="Count">The number of characters to extract, which can be an expression. If Count is less than or equal to zero, OutputVar will be made empty (blank). If Count exceeds the length of InputVar, OutputVar will be set equal to the entirety of InputVar.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringRight(System.String,System.Object)">
            <summary>Retrieves a number of characters from the right-hand side of a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be extracted from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="Count">The number of characters to extract, which can be an expression. If Count is less than or equal to zero, OutputVar will be made empty (blank). If Count exceeds the length of InputVar, OutputVar will be set equal to the entirety of InputVar.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringLen(System.String)">
            <summary>Retrieves the count of how many characters are in a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be measured. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringLower(System.String,System.Boolean)">
            <summary>Converts a string to lowercase.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="ProperCase">If this parameter is True, the string will be converted to title case. For example, "GONE with the WIND" would become "Gone With The Wind". </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringUpper(System.String,System.Boolean)">
            <summary>Converts a string to uppercase.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="ProperCase">If this parameter is True, the string will be converted to title case. For example, "GONE with the WIND" would become "Gone With The Wind". </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringMid(System.String,System.String,System.String,System.String)">
            <summary>Retrieves one or more characters from the specified position in a string.</summary>
            <param name="InputVar">The name of the variable from whose contents the substring will be extracted. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="StartChar">The position of the first character to be extracted, which can be an expression. Unlike StringGetPos, 1 is the first character. If StartChar is less than 1, it will be assumed to be 1. If StartChar is beyond the end of the string, OutputVar is made empty (blank).</param>
            <param name="Count"> this parameter may be omitted or left blank, which is the same as specifying an integer large enough to retrieve all characters from the string. Otherwise, specify the number of characters to extract, which can be an expression. If Count is less than or equal to zero, OutputVar will be made empty (blank). If Count exceeds the length of InputVar measured from StartChar, OutputVar will be set equal to the entirety of InputVar starting at StartChar.</param>
            <param name="L">The letter L can be used to extract characters that lie to the left of StartChar rather than to the right. In the following example, OutputVar will be set to Red: InputVar = The Red Fox StringMid, OutputVar, InputVar, 7, 3, L If the L option is present and StartChar is less than 1, OutputVar will be made blank. If StartChar is beyond the length of InputVar, only those characters within reach of Count will be extracted. For example, the below will set OutputVar to Fox: InputVar = The Red Fox StringMid, OutputVar, InputVar, 14, 6, L</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringReplace(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Replaces the specified substring with a new string.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="SearchText">The string to search for. Matching is not case sensitive unless StringCaseSense has been turned on.</param>
            <param name="ReplaceText">SearchText will be replaced with this text. If omitted or blank, SearchText will be replaced with blank (empty). In other words, it will be omitted from OutputVar.</param>
            <param name="ReplaceAll">If omitted, only the first occurrence of SearchText will be replaced. But if this parameter is 1, A, or All, all occurrences will be replaced. Specify the word UseErrorLevel to store in ErrorLevel the number of occurrences replaced (0 if none). UseErrorLevel implies "All".</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringTrimLeft(System.String,System.String)">
            <summary>Removes a number of characters from the left-hand side of a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="Count">The number of characters to remove, which can be an expression. If Count is less than or equal to zero, OutputVar will be set equal to the entirety of InputVar. If Count exceeds the length of InputVar, OutputVar will be made empty (blank).</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringTrimRight(System.String,System.String)">
            <summary>Removes a number of characters from the right-hand side of a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="Count">The number of characters to remove, which can be an expression. If Count is less than or equal to zero, OutputVar will be set equal to the entirety of InputVar. If Count exceeds the length of InputVar, OutputVar will be made empty (blank).</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.IfInString(System.String,System.String)">
            <summary>Checks if a string contains the specified string.</summary>
            <param name="Text">Text to search for SearchString</param>
            <param name="SearchString">The string to search for. Matching is not case sensitive unless StringCaseSense has been turned on.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.IfNotInString(System.String,System.String)">
            <summary>Checks if a string contains the specified string.</summary>
            <param name="Text">Text to search for SearchString</param>
            <param name="SearchString">The string to search for. Matching is not case sensitive unless StringCaseSense has been turned on.</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Sort(System.String,System.String)">
            <summary>Arranges a variable's contents in alphabetical, numerical, or random order (optionally removing duplicates).</summary>
            <param name="Text">String whose contents will be sorted.</param>
            <param name="Options">C = Case Sensitive Sort | CL = Case Insensitive sort based on User's Locale | Dx = Specifies x as the delimiter character, which determins where each item in the Text begins and ends (default = newline) | F MyFunction = uses custom sorting according to the criteria in MyFunction | N = Numeric Sort | Pn = Sorts items based on character position n | R = Sorts in reverse order | Random = Sorts in random order | U = Removes Duplicates | Z = Last linefeed is considered to be part of the last item</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Remove_Numbers(System.String)">
            <summary>Removes Numbers from String</summary>
            <param name="InString"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Remove_Letters(System.String)">
            <summary>
            Remove Letters from String
            </summary>
            <param name="InString"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.UnHtml(System.String)">
            <summary>Remove HTML characters from string</summary>
            <param name="HTML">HTML to strip</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.CharCount(System.String,System.String)">
            <summary>Returns the number of times a character is found in a string</summary>
            <param name="Line"> </param>
            <param name=" Char"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.TrimFirst(System.String,System.Int32)">
            <summary>Remove X Characters from beginning of string</summary>
            <param name="str"> </param>
            <param name="RemoveCharacterCount"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.TrimLast(System.String,System.Int32)">
            <summary>Remove X Characters from end of string</summary>
            <param name="str"> </param>
            <param name="RemoveCharacterCount"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.TrimLeadingZeros(System.String)">
            <summary>
            Trims 0's from beginning of string 
            </summary>
            <param name="Text">String to trim leading zeros from</param>
            <returns>Returns string minus leading zeroes</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.TrimEndIf(System.String,System.String)">
            <summary>
            Trim ending characters from string if they exist, returns string without ending chars
            </summary>
            <param name="Text"></param>
            <param name="ToTrim"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.TrimLeadingChars(System.String,System.String)">
            <summary>
            Trims all of a specific leading character from the from beginning of string { UNTESTED }
            </summary>
            <param name="Text"></param>
            <param name="Char"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FirstCharacters(System.String,System.Int32)">
            <summary>Returns first X characters in string</summary>
            <param name="Text"> </param>
            <param name="NumberOfCharacters"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.LastCharacters(System.String,System.Int32)">
            <summary>Returns last X characters in string</summary>
            <param name="Text"> </param>
            <param name="NumberOfCharacters"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.FirstWord(System.String)">
            <summary>Returns First word in string</summary>
            <param name="InputString"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.LastWord(System.String)">
            <summary>Returns last word in string</summary>
            <param name="InputString"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.WordNum(System.String,System.Int32)">
            <summary>Return specific word # from string</summary>
            <param name="InputString"> </param>
            <param name="WordNumber"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.WordList(System.String)">
            <summary>Parse line by space, returns list of words</summary>
            <param name="InputString"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.LineList(System.String,System.Boolean,System.Boolean)">
            <summary>Parse line by new line, returns list of lines</summary>
            <param name="InputString"> </param>
            <param name="Trim"> </param>
            <param name="RemoveBlanks"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.RemoveComments(System.String,System.String)">
            <summary>Returns code line without comments</summary>
            <param name="line"> </param>
            <param name="CommentCharacters"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ReturnComments(System.String,System.String)">
            <summary>Returns comments on line after code</summary>
            <param name="line"> </param>
            <param name="CommentCharacters"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Extract_Between(System.String,System.String,System.String)">
            <summary>Extracts text between brackets</summary>
            <param name="Code"> </param>
            <param name="start"> </param>
            <param name="end"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.XML_TagText(System.String,System.String)">
            <summary>Extract text between <Tag> XML style tags </Tag></summary>
            <param name="XMLString">String to extract tag text from</param>
            <param name="Tag">Name of tag to return text between. Ex: <UserTag>About this Project</UserTag> returns "About this Project"</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Insert_Text(System.String,System.String,System.Int32)">
            <summary>Insert text into specific position in string</summary>
            <param name="InText"> </param>
            <param name="InsertText"> </param>
            <param name="Position"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringSplit(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>Split string by character (return pos starts at word 0, final option overrides position to return last item)</summary>
            <param name="InText">Text to split</param>
            <param name="SplitChar">Character(s) to split string by</param>
            <param name="ReturnPos">Position # of the word(s) to return. Ex: ReturnPos 0 returns the text before the SplitChar is found, 1 returns the text after the first splitchar and before the 2nd splitchar</param>
            <param name="ReturnLast">Override for ReturnPos value - will return last value in split string</param>
            <param name="NoBlanks">Option to return next available value if ReturnPos value is blank</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.StringSplit_List(System.String,System.String)">
            <summary>Split string by character, Returns List of values separated by the SplitChar</summary>
            <param name="InText">Text to split</param>
            <param name="SplitChar">Character(s) to split string by</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.AddLeadingZeros(System.Object,System.Int32)">
            <summary>Add leading zeros to an int/string, ex: InNumber 12 with TotalReturnLength 5 returns string "00012"</summary>
            <param name="InNumber">Original number (int or string) to add leading zeros to.</param>
            <param name="TotalReturnLength">Total # of desired digits, adding zeros in front of the InNumber to ensure return value is TotalReturnLength characters long.</param>
            <tested>True</tested>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.AddLeadingSpaces(System.String,System.Int32)">
            <summary>Add leading spaces before a string</summary>
            <param name="InText">Original string to add spaces</param>
            <param name="SpaceCount">Number of Spaces To Add to String</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.LeadingSpaceCount(System.String)">
            <summary>Returns number of leading spaces before text begins</summary>
            <param name="InText"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ToTitleCase(System.String)">
            <summary>convert string to Proper casing -- Output: This Is A String Test</summary>
            <param name="InText"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Closest_FileName(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>Search list for Contains match - otherwise take close word match</summary>
            <param name="SearchTerm"> </param>
            <param name="SearchList"> </param>
            <param name="Debug"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Closest_Word(System.String,System.Collections.Generic.List{System.String})">
            <summary>Find the closest match in a list to search word</summary>
            <param name="SearchWord"> </param>
            <param name="WordList"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Reverse(System.String)">
            <summary>Reverse Order of Characters in String</summary>
            <param name="StringToReverse">String to reverse</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Encode(System.String)">
            <summary>
            Encodes Title Text into Database Compatible Storage
            </summary>
            <param name="TitleText"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Decode(System.String)">
            <summary>
            Decodes Encoded Text into Display Text
            </summary>
            <param name="TitleText"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Encrypt(System.String,System.String)">
            <summary>Encrypt String Using passPhrase to Decrypt</summary>
            <param name="plainText">String to Encrypt</param>
            <param name="passPhrase">Password to Decrypt Later</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Decrypt(System.String,System.String)">
            <summary>Decrypts an Encrypted String using passphrase</summary>
            <param name="cipherText">Encryptd String to Decrypt</param>
            <param name="passPhrase">Password to Decrypt</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.IMDb_ID_FromURL(System.String)">
            <summary>
            Parses IMDb URL for IMDb Title ID
            </summary>
            <param name="URL">IMDb.com URL to Parse</param>
            <returns>Return IMDb ID</returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ReplaceInsensitive(System.String,System.String,System.String)">
            <summary>
            Replace Text in String (Not Case Sensitive)
            </summary>
            <param name="str"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AHKExpressions.AHKExpressions.ToList(System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:AHKExpressions.AHKExpressions.ObjStringFix(System.String)">
            <summary>
            Used for Object Strings Separated by '|' - this temporarily replaces with temp char to void parsing errors
            </summary>
            <param name="Text">Text Potentially Containing '|' to Replace</param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.ObjStringRestore(System.String)">
            <summary>
            Restores Object String Value, Adding back Replaced Temp Character
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Expand(System.Windows.Forms.TreeView)">
            <summary>Expand All Nodes in TreeView</summary>
            <param name="TV"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Expand_Level(System.Windows.Forms.TreeView,System.Int32)">
            <summary>
            Expand TreeNodes Below NodeLevel 
            </summary>
            <param name="TV">TreeView Control</param>
            <param name="NodeLevel">Level of Nodes to Expand</param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.NodeList(System.Windows.Forms.TreeView,System.Boolean,System.Int32)">
            <summary>Returns list of nodes in TreeView (Option to Return Checked Only) - option to return nodes on certain level</summary>
            <param name="TV"> </param>
            <param name="CheckedOnly"> </param>
            <param name="NodeLevel"> </param>
        </member>
        <member name="M:AHKExpressions.AHKExpressions.Nodes_Children(System.Windows.Forms.TreeView,System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>Recurse through treeview nodes, return list of child nodes</summary>
            <param name="TV"> </param>
            <param name="treeNode"> </param>
            <param name="CheckedOnly"> </param>
        </member>
        <member name="T:sharpAHK._AHK">
            <summary>
            sharpAHK : Library of AHK Driven/Inspired Methods
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.New_AHKSession(System.Boolean)">
            <summary>Resets Global AHK Session - Causes next AHK call to create a new AHK session. Resets all Hotkeys/Functions/Variables in Memory</summary>
        </member>
        <member name="M:sharpAHK._AHK.Execute(System.String,System.String,System.Boolean)">
            <summary>Executes AHK Command, Returns Variable Value if ReturnVar is Populated</summary>
            <param name="ahkSTRING">AHK Line / Collection of AHK Commands</param>
            <param name="ReturnVar">Variable name to return value of from AHK Session after executing ahkSTRING</param>
            <param name="NewSession">Option To Initiate New AHK Instance - Resets Previously Used Variables and Loaded AHK</param>
            <returns>Returns String with Value of ReturnVar if Provided</returns>
        </member>
        <member name="M:sharpAHK._AHK.GetVar(System.String)">
            <summary>Return the Contents of an AHK Variable Name</summary>
            <param name="VarName">Name of the Variable To Return from AHK</param>
        </member>
        <member name="M:sharpAHK._AHK.SetVar(System.String,System.String)">
            <summary>Programmatically set variable value in AHK Session</summary>
            <param name="VarName">Variable Name in AHK Session</param>
            <param name="VarValue">Value to Assign Variable Name</param>
        </member>
        <member name="M:sharpAHK._AHK.Load_ahkFile(System.String,System.Boolean,System.Boolean)">
            <summary>Load AHK Script from a .AHK File Into Current or New AHK Session</summary>
            <param name="AHK_FilePath">AHK Code or FilePath as a String to Load in Current or New AHK Instance</param>
            <param name="NewAHKSession">Option to Reset AHK Instance, Clearing Previously Saved Hotkeys and Variable Values in Memory</param>
            <param name="AddReturn">Option to add Return in front of code added. Keeps from executing your script while loading.</param>
            <returns>False if File Not Found - True if File Found. (Does not indicate success in loading ahk functionality)</returns>
        </member>
        <member name="M:sharpAHK._AHK.Load_ahkString(System.String,System.Boolean,System.Boolean)">
            <summary>Load AHK Script from a String containing AHK Functions Into Current or New AHK Session</summary>
            <param name="functionsAHK">AHK Script String containing AHK Commands</param>
            <param name="NewAHKSession">option to restart AHK session, clearing previously saved hotkeys and variable values in memory</param>
            <param name="AddReturn">Option to add Return in front of code added. Keeps from executing your script while loading.</param>
        </member>
        <member name="M:sharpAHK._AHK.ahkSessionInfo(System.Boolean)">
            <summary>
            Displays/Returns String with Whether AHK Session Has Been Initiated + # of AHK Files Loaded into Memory + AHK FilePaths Loaded
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.Load_ahkDir(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Load All AHK Scripts in Directory Path into New or Current AHK Instance</summary>
            <param name="DirPath">Directory path of AHK files to load</param>
            <param name="Recurse">Option to search subdirectories underneath DirPath for AHK Files (default = false)</param>
            <param name="NewAHKSession">Option to Reset AHK Instance, Clearing Previously Saved Hotkeys and Variable Values in Memory</param>
            <param name="AddReturn">Option to add Return in front of code added. Keeps from executing your script while loading.</param>
            <returns>Returns list of .AHK file paths loaded into current AHK Session</returns>
        </member>
        <member name="M:sharpAHK._AHK.Function(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Execute AHK Function Previously Loaded in Current AHK Session</summary>
            <param name="FunctionName">Name of Function to Call</param>
            <param name="Param1">Parameter to pass into AHK function</param>
            <param name="Param2">Parameter to pass into AHK function</param>
            <param name="Param3">Parameter to pass into AHK function</param>
            <param name="Param4">Parameter to pass into AHK function</param>
            <param name="Param5">Parameter to pass into AHK function</param>
            <param name="Param6">Parameter to pass into AHK function</param>
            <param name="Param7">Parameter to pass into AHK function</param>
            <param name="Param8">Parameter to pass into AHK function</param>
            <param name="Param9">Parameter to pass into AHK function</param>
            <param name="Param10">Parameter to pass into AHK function</param>
            <returns>Returns value of function? Untested</returns>
        </member>
        <member name="M:sharpAHK._AHK.FunctionExists(System.String)">
            <summary>
            Checks to see if Function has been defined in AHK Session
            </summary>
            <param name="FunctionName">Name of Function To Check For</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.GoSub(System.String,System.Boolean)">
            <summary>Execute Label/GoSub Command Loaded in Current AHK Session</summary>
            <param name="GoSubName">AHK Script Label to Execute</param>
            <param name="CheckIfExistsFirst">Option to Confirm Label Exists in Memory Before Attempting To Execute</param>
        </member>
        <member name="M:sharpAHK._AHK.LabelExists(System.String)">
            <summary>
            Checks to see if GoSub Label Exists in AHK Session
            </summary>
            <param name="GoSubLabel"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ErrorLog_Setup(System.Boolean,System.String)">
            <summary>Function Used to Flag Whether AHK Function Uses ErrorLog Value</summary>
            <param name="ErrorLogEnabled">Logs ErrorLevel Variables to Log if True, Otherwise Resets to Blank</param>
            <param name="ErrorLogText">ErrorMessage From Function To Log if Problem Detected</param>
        </member>
        <member name="M:sharpAHK._AHK.ErrorLog(System.String,System.String)">
            <summary>Used by AHK Functions to Log Last Script Command/Line Executed and Sets ErrorLevel Value If Detected</summary>
            <param name="ScriptLine">AHK/C# Command with ErrorLevelMessage</param>
            <param name="ErrorLevelMsg"></param>
        </member>
        <member name="M:sharpAHK._AHK.Dev_Notes">
            <summary>
            Examples using AHK InterOp Dll to Call AutoHotkey Commands
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.debug(System.Boolean)">
            <summary>
            Error Level Message / Last Executed Commands / Debug Functions
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.Pause(System.String,System.Boolean)">
            <summary>Pauses the script's current thread.</summary>
            <param name="OnOffToggle">If blank or omitted, it defaults to Toggle. Otherwise, specify one of the following words: On: Pauses the current thread. | Off: If the thread beneath the current thread is paused, it will be in an unpaused state when resumed. Otherwise, the command has no effect.</param>
            <param name="OperateOnUnderlyingThread">This parameter is ignored for "Pause Off" because that always operates on the underlying thread. For the others, it is ignored unless Pause is being turned on (including via Toggle). False (Default): The command pauses the current thread; that is, the one now running the Pause command. | True: The command marks the thread beneath the current thread as paused so that when it resumes, it will finish the command it was running (if any) and then enter a paused state. If there is no thread beneath the current thread, the script itself is paused, which prevents timers from running (this effect is the same as having used the menu item "Pause Script" while the script has no threads).</param>
        </member>
        <member name="M:sharpAHK._AHK.SetBatchLines(System.String)">
            <summary>Determines how fast a script will run (affects CPU utilization).</summary>
            <param name="LineCount">The number of script lines to execute prior to sleeping for 10ms. The value can be as high as 9223372036854775807. Also, this mode is mutually exclusive of the 20ms mode in the previous paragraph; that is, only one of them can be in effect at a time.</param>        
        </member>
        <member name="M:sharpAHK._AHK.SetTimer(System.String,System.String,System.String)">
            <summary>Causes a subroutine to be launched automatically and repeatedly at a specified time interval.</summary>
            <param name="Label">The name of the label or hotkey label to which to jump, which causes the commands beneath Label to be executed until a Return or Exit is encountered. As with the parameters of almost all other commands, Label can be a variable reference such as %MyLabel%, in which case the name stored in the variable is used as the target.</param>
            <param name="PeriodOnOff">On: Re-enables a previously disabled timer at its former period. If the timer doesn't exist, it is created (with a default period of 250). If the timer exists but was previously set to run-only-once mode, it will again run only once. | Off: Disables an existing timer. | Period: Creates or updates a timer using this parameter as the approximate number of milliseconds that must pass since the last time the Label subroutine was started. | Run only once: Specify a negative Period to indicate that the timer should run only once. </param>
            <param name="Priority">This optional parameter is an integer between -2147483648 and 2147483647 (or an expression) to indicate this timer's thread priority. If omitted, 0 will be used.</param>
        </member>
        <member name="M:sharpAHK._AHK.Sleep(System.Object)">
            <summary>Waits the specified amount of time before continuing.</summary>
            <param name="DelayInMilliseconds">The amount of time to pause (in milliseconds) between 0 and 2147483647 (24 days), which can be an expression.</param>        
        </member>
        <member name="M:sharpAHK._AHK.Suspend(System.String)">
            <summary>Disables or enables all or selected hotkeys and hotstrings.</summary>
            <param name="OnOffTogglePermit">On: Suspends all hotkeys and hotstrings except those explained the Remarks section. | Off: Re-enables the hotkeys and hotstrings that were disable above. | Toggle (default): Changes to the opposite of its previous state (On or Off). | Permit: Does nothing except mark the current subroutine as being exempt from suspension. </param>
        </member>
        <member name="M:sharpAHK._AHK.Clipboard(System.String)">
            <summary>
            Returns Contents of the OS's Clipboard. Writes to Clipboard if Value Provided in WriteText Param
            </summary>
            <param name="WriteText">If Provided, Writes Text to Clipboard Instead of Returning Clipboard Contents</param>
            <returns>Returns Contents of Clipboard with Option to Write New Clipboard Value</returns>
        </member>
        <member name="M:sharpAHK._AHK.ClipboardAll">
            <summary>
            Returns Entire Contents of Clipboard (Such as Formatting and Text)
            </summary>
            <returns>Returns String with Entire Contents of Clipboard</returns>
        </member>
        <member name="M:sharpAHK._AHK.ClipWait(System.Int32)">
            <summary>
            Waits for Clipboard To Contain value, returns Clipboard contents
            </summary>
            <param name="SecondsToWait">Seconds to Wait Before ClipWait Times Out</param>
            <param name="AnyData">If False   is More Selective, Waiting for Files/Text To Exist</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ClipboardClear">
            <summary>
            Clears Contents of Clipboard
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.ClipWrite(System.String)">
            <summary>
            Write Text to Clipboard (Blank to Clear)
            </summary>
            <param name="WriteText">Writes Text to Clipboard</param>
        </member>
        <member name="M:sharpAHK._AHK.Clipboard_Files(System.Object)">
            <summary>
            Adds One or More Files to Windows Clipboard, Ready to Paste in Explorer
            </summary>
            <param name="fileList">FileList can be a Single File Path (as string) or List of File Paths (strings)</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.Control(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Makes a variety of changes to a control.</summary>
            <param name="Cmd">Check|Uncheck|Enable|Disable|Show|Hide|Style,N|ExStyle,N|ShowDropDown|HideDropDown|TabLeft,Count|TabRight,Count|Add,String|Delete,N|Choose,N|EditPaste,String</param>
            <param name="Value">See Cmd options for Value Params</param>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank, the target window's topmost control will be used. To operate upon a control's HWND (window handle), leave the Control parameter blank and specify ahk_id %ControlHwnd% for the WinTitle parameter (this also works on hidden controls even when DetectHiddenWindows is Off) . The HWND of a control is typically retrieved via ControlGet Hwnd, MouseGetPos, or DllCall.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlClick(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Sends a mouse button or mouse wheel event to a control.</summary>
            <param name="ControlOrPos"> (Position): Specify the X and Y coordinates relative to the target window's upper left corner. The X coordinate must precede the Y coordinate and there must be at least one space or tab between them. For example: X55 Y33. If there is a control at the specified coordinates, it will be sent the click-event at those exact coordinates. (ClassNN or Text): Specify either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 window parameters are omitted, the Last Found Window will be used. If this is the letter A and the other 3 window parameters are omitted, the active window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria.</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="WhichButton">The button to click: LEFT, RIGHT, MIDDLE (or just the first letter of each of these). If omitted or blank, the LEFT button will be used.</param>
            <param name="ClickCount">The number of clicks to send, which can be an expression. If omitted or blank, 1 click is sent. </param>
            <param name="Options">NA: May improve reliability | D: Press the mouse button down but do not release it (i.e. generate a down-event). | U: Release the mouse button (i.e. generate an up-event). | Pos: Specify the word Pos anywhere in Options to unconditionally use the X/Y positioning mode as described in the Control-or-Pos parameter above. | Xn: Specify for n the X position to click at, relative to the control's upper left corner. If unspecified, the click will occur at the horizontal-center of the control. | Yn: Specify for n the Y position to click at, relative to the control's upper left corner. If unspecified, the click will occur at the vertical-center of the control. </param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlSend(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Sends simulated keystrokes to a window or control.</summary>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank or omitted, the target window's topmost control will be used. If this parameter is ahk_parent, the keystrokes will be sent directly to the control's parent window.</param>
            <param name="Keys">The sequence of keys to send (see the Send command for details). To send a literal comma, escape it (`,). The rate at which characters are sent is determined by SetKeyDelay. Unlike the Send command, mouse clicks cannot be sent by ControlSend. Use ControlClick for that.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the next 3 parameters are omitted, the Last Found Window will be used. If this is the letter A and the next 3 parameters are omitted, the active window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlSendRaw(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Sends simulated keystrokes to a window or control. ControlSendRaw sends the keystrokes in the Keys parameter exactly as they appear rather than translating {Enter} to an ENTER keystroke, ^c to Control-C, etc.</summary>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank or omitted, the target window's topmost control will be used. If this parameter is ahk_parent, the keystrokes will be sent directly to the control's parent window.</param>
            <param name="Keys">The sequence of keys to send (see the Send command for details). To send a literal comma, escape it (`,). The rate at which characters are sent is determined by SetKeyDelay. Unlike the Send command, mouse clicks cannot be sent by ControlSend. Use ControlClick for that.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the next 3 parameters are omitted, the Last Found Window will be used. If this is the letter A and the next 3 parameters are omitted, the active window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlFocus(System.String,System.String,System.String,System.String,System.String)">
            <summary>Sets input focus to a given control on a window.</summary>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank, the target window's topmost control will be used. To operate upon a control's HWND (window handle), leave the Control parameter blank and specify ahk_id %ControlHwnd% for the WinTitle parameter (this also works on hidden controls even when DetectHiddenWindows is Off) . The HWND of a control is typically retrieved via ControlGet Hwnd, MouseGetPos, or DllCall.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlGet(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Retrieves various types of information about a control.</summary>
            <param name="Cmd">Checked|Enabled|Visible|Tab|FindString,String|Choice|LineCount|CurrentLine|CurrentCol|Line,N|Selected|Style|ExStyle|Hwnd|List,Selected|Focused|Col#|Count|Count Selected|Count Focused|Count Col </param>
            <param name="Value">See Cmd Options</param>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank, the target window's topmost control will be used. To operate upon a control's HWND (window handle), leave the Control parameter blank and specify ahk_id %ControlHwnd% for the WinTitle parameter (this also works on hidden controls even when DetectHiddenWindows is Off) . The HWND of a control is typically retrieved via ControlGet Hwnd, MouseGetPos, or DllCall.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlGetFocus(System.String,System.String,System.String,System.String)">
            <summary>Retrieves which control of the target window has input focus, if any.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlGetPos(System.String,System.String,System.String,System.String,System.String)">
            <summary>Retrieves the position and size of a control.</summary>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank, the target window's topmost control will be used. To operate upon a control's HWND (window handle), leave the Control parameter blank and specify ahk_id %ControlHwnd% for the WinTitle parameter (this also works on hidden controls even when DetectHiddenWindows is Off) . The HWND of a control is typically retrieved via ControlGet Hwnd, MouseGetPos, or DllCall.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlGetHwnd(System.Object,System.Object,System.String,System.String,System.String)">
            <summary>
            Returns a control's handle (control get wrapper for ahk.dll) 
            </summary>
            <param name="Control"></param>
            <param name="WinTitle"></param>
            <param name="WinText"></param>
            <param name="ExcludeTitle"></param>
            <param name="ExcludeText"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ControlGetText(System.String,System.String,System.String,System.String,System.String)">
            <summary>Retrieves text from a control.</summary>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank, the target window's topmost control will be used. To operate upon a control's HWND (window handle), leave the Control parameter blank and specify ahk_id %ControlHwnd% for the WinTitle parameter (this also works on hidden controls even when DetectHiddenWindows is Off) . The HWND of a control is typically retrieved via ControlGet Hwnd, MouseGetPos, or DllCall.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlSetText(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Changes the text of a control</summary>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank, the target window's topmost control will be used. To operate upon a control's HWND (window handle), leave the Control parameter blank and specify ahk_id %ControlHwnd% for the WinTitle parameter (this also works on hidden controls even when DetectHiddenWindows is Off) . The HWND of a control is typically retrieved via ControlGet Hwnd, MouseGetPos, or DllCall.</param>
            <param name="NewText"> </param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.ControlMove(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Moves or resizes a control.</summary>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank, the target window's topmost control will be used. To operate upon a control's HWND (window handle), leave the Control parameter blank and specify ahk_id %ControlHwnd% for the WinTitle parameter (this also works on hidden controls even when DetectHiddenWindows is Off) . The HWND of a control is typically retrieved via ControlGet Hwnd, MouseGetPos, or DllCall.</param>
            <param name="X">The X and Y coordinates (in pixels) of the upper left corner of Control's new location, which can be expressions. If either coordinate is blank, Control's position in that dimension will not be changed. The coordinates are relative to the upper-left corner of the Control's parent window; ControlGetPos or Window Spy can be used to determine them.</param>
            <param name="Y">The X and Y coordinates (in pixels) of the upper left corner of Control's new location, which can be expressions. If either coordinate is blank, Control's position in that dimension will not be changed. The coordinates are relative to the upper-left corner of the Control's parent window; ControlGetPos or Window Spy can be used to determine them.</param>
            <param name="W">The new width and height of Control (in pixels), which can be expressions. If either parameter is blank or omitted, Control's size in that dimension will not be changed.</param>
            <param name="H">The new width and height of Control (in pixels), which can be expressions. If either parameter is blank or omitted, Control's size in that dimension will not be changed.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.SetControlDelay(System.String)">
            <summary>Sets the delay that will occur after each control-modifying command.</summary>
            <param name="Delay">Time in milliseconds, which can be an expression. Use -1 for no delay at all and 0 for the smallest possible delay. If unset, the default delay is 20.</param>
        </member>
        <member name="M:sharpAHK._AHK.PostMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Sends a message to a window or control</summary>
            <param name="Msg">The message number to send, which can be an expression. See the message list in AHK documentation to determine the number. </param>
            <param name="wParam">The first component of the message, which can be an expression. If blank or omitted, 0 will be sent.</param>
            <param name="lParam">The second component of the message, which can be an expression. If blank or omitted, 0 will be sent.</param>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank, the target window's topmost control will be used. To operate upon a control's HWND (window handle), leave the Control parameter blank and specify ahk_id %ControlHwnd% for the WinTitle parameter (this also works on hidden controls even when DetectHiddenWindows is Off) . The HWND of a control is typically retrieved via ControlGet Hwnd, MouseGetPos, or DllCall.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.SendMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Sends a message to a window or control (SendMessage additionally waits for acknowledgement).</summary>
            <param name="Msg">The message number to send, which can be an expression. See the message list in AHK documentation to determine the number. </param>
            <param name="wParam">The first component of the message, which can be an expression. If blank or omitted, 0 will be sent.</param>
            <param name="lParam">The second component of the message, which can be an expression. If blank or omitted, 0 will be sent.</param>
            <param name="Control">Can be either ClassNN (the classname and instance number of the control) or the name/text of the control, both of which can be determined via Window Spy. When using name/text, the matching behavior is determined by SetTitleMatchMode. If this parameter is blank, the target window's topmost control will be used. To operate upon a control's HWND (window handle), leave the Control parameter blank and specify ahk_id %ControlHwnd% for the WinTitle parameter (this also works on hidden controls even when DetectHiddenWindows is Off) . The HWND of a control is typically retrieved via ControlGet Hwnd, MouseGetPos, or DllCall.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.WinMenuSelectItem(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" -->
        <member name="M:sharpAHK._AHK.DateTimeCompare(System.DateTime,System.DateTime)">
            <summary>Compare Date to DateToCompare, Returns either Earlier, Same, or Later as String</summary>
            <param name="Date">Date To Compare</param>
            <param name="DateToCompare">Date to Compare Against</param>
            <returns>Returns either Earlier/Same/Later as String</returns>
        </member>
        <member name="M:sharpAHK._AHK.ValidTime(System.String)">
            <summary>Verify/Format dates before inserting into sql db</summary>
            <param name="InTime">DateTime String To Verify/Convert to DateTime</param>
        </member>
        <member name="M:sharpAHK._AHK.IsValidSqlDatetime(System.String)">
            <summary>Checks to see if Date is a Valid SQL Date</summary>
            <param name="DateString">Date as string to Check</param>
            <returns>Returns True if Date is Valid in SQL</returns>
        </member>
        <member name="M:sharpAHK._AHK.BeforeCurrentTime(System.String)">
            <summary>
            compares timestamp string to current time, returns true if timestamp is before current time
            </summary>
            <param name="TimeToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.AfterCurrentTime(System.String)">
            <summary>
            compares timestamp string to current time, returns true if timestamp is after current time
            </summary>
            <param name="TimeToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.TimeDiff_Min(System.Object,System.Object)">
            <summary>
            Returns difference between two dates (in Minutes)
            </summary>
            <param name="DateTime1">First Date/Time - Can Pass in String or DateTime Var</param>
            <param name="DateTime2">Date/Time to compare to first - Can Pass in String or DateTime Var</param>
            <returns>Returns the Number of Min Between DateTime1 and DateTime2</returns>
        </member>
        <member name="M:sharpAHK._AHK.Time_Difference(System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="date1"></param>
            <param name="date2"></param>
        </member>
        <member name="M:sharpAHK._AHK.MsToMin(System.Int32)">
            <summary>
            Convert Milliseconds into Minutes
            </summary>
            <param name="TimeMS">Millisecond Value to Convert</param>
            <returns>Returns Minutes as Int</returns>
        </member>
        <member name="M:sharpAHK._AHK.MsToSeconds(System.Int32)">
            <summary>
            Convert Milliseconds into Seconds
            </summary>
            <param name="TimeMS">Millisecond Value to Convert</param>
            <returns>Returns Seconds as Int</returns>
        </member>
        <member name="M:sharpAHK._AHK.MsToHours(System.Int32)">
            <summary>
            Convert Milliseconds into Hours
            </summary>
            <param name="TimeMS">Millisecond Value to Convert</param>
            <returns>Returns Hours as Int</returns>        
        </member>
        <member name="M:sharpAHK._AHK.MsToDays(System.Int32)">
            <summary>
            Convert Milliseconds into Days
            </summary>
            <param name="TimeMS">Millisecond Value to Convert</param>
            <returns>Returns Days as Int</returns>          
        </member>
        <member name="M:sharpAHK._AHK.StopWatch(System.Boolean)">
            <summary>
            Start/Stop StopWatch Timer
            </summary>
            <param name="Start"></param>
            <returns></returns>
        </member>
        <member name="T:sharpAHK._AHK.DriveOpts">
            <summary>
            Options for AHK Drive Command
            </summary>		
        </member>
        <member name="T:sharpAHK._AHK.DriveType">
            <summary>
            Options for AHK DriveGet_List Command
            </summary>		
        </member>
        <member name="M:sharpAHK._AHK.Drive(sharpAHK._AHK.DriveOpts,System.String,System.String)">
            <summary>Ejects/retracts the tray in a CD or DVD drive, or sets a drive's volume label.</summary>
            <param name="SubCommand">Label|Lock|Unlock|Eject, Drive, 1</param>
            <param name="DriveLetter">Drive Letter To Act Upon | ex: D:</param>
            <param name="Value">1 to Retract/Close Tray</param>
        </member>
        <member name="M:sharpAHK._AHK.Drive_Eject(System.String)">
            <summary>Ejects the tray in a CD or DVD drive</summary>
            <param name="DriveLetter">Drive Letter To Act Upon, Ex: D:</param>
        </member>
        <member name="M:sharpAHK._AHK.Drive_Close(System.String)">
            <summary>Retracts the tray in a CD or DVD drive</summary>
            <param name="DriveLetter">Drive Letter To Act Upon, Ex: D:</param>
        </member>
        <member name="M:sharpAHK._AHK.Drive_Label(System.String,System.String)">
            <summary>Changes Drive's volume label to be NewLabel (if NewLabel is omitted, the drive will have no label). Drive is the drive letter followed by a colon and an optional backslash (might also work on UNCs and mapped drives). For example: Drive, Label, C:, Seagate200</summary>
            <param name="DriveLetter">Drive Letter To Act Upon, Ex: D:</param>
            <param name="NewLabel">New Drive Label - if Omitted, Drive With Have No Label</param>
        </member>
        <member name="M:sharpAHK._AHK.Drive_Lock(System.String)">
            <summary>Prevents a drive's eject feature from working. For example: "Drive, Lock, D:". Most drives cannot be "locked open". However, locking the drive while it is open will probably result in it becoming locked the moment it is closed. This command has no effect on drives that do not support locking (such as most read-only drives), nor is it likely to work on non-IDE drives on Windows 95/98/Me. If a drive is locked by a script and that script exits, the drive will stay locked until another script or program unlocks it, or the system is restarted. If the specified drive does not exist or does not support the locking feature, ErrorLevel is set to 1. Otherwise, it is set to 0.</summary>
            <param name="DriveLetter">Drive Letter To Act Upon, Ex: D:</param>
        </member>
        <member name="M:sharpAHK._AHK.Drive_Unlock(System.String)">
            <summary>Reverses the above. On Window NT/2000/XP or later, Unlock needs to be executed multiple times if the drive was locked multiple times (at least for some drives). For example, if "Drive, Lock, D:" was executed three times, three executions of "Drive, Unlock, D:" might be needed to unlock it. Because of this and the fact that there is no way to determine whether a drive is currently locked, it is often useful to keep track of its lock-state in a variable.</summary>
            <param name="DriveLetter">Drive Letter To Act Upon, Ex: D:</param>
        </member>
        <member name="M:sharpAHK._AHK.DriveSpaceFree(System.String)">
            <summary>Retrieves the free disk space of a drive, in Megabytes.</summary>
            <param name="DriveLetter">Drive Letter To Return Free Space Value, Ex: C:\</param>
            <returns>Returns Space Free in MB</returns>
        </member>
        <member name="M:sharpAHK._AHK.DriveGet(System.String,System.String)">
            <summary>Retrieves various types of information about the computer's drive(s).</summary>
            <param name="Cmd">List|Capacity|Filesystem|Drive|Label|Serial|Type|Status|StatusCD</param>
            <param name="Value">Type|Path|Drive|Drive|Path|Path|Drive</param>
        </member>
        <member name="M:sharpAHK._AHK.DriveGet_List(sharpAHK._AHK.DriveType)">
            <summary>Returns string of letters, one character for each drive letter in the system. For example: ACDEZ. If Type is omitted, all drive types are retrieved. Otherwise, Type should be one of the following words to retrieve only a specific type of drive: CDROM, REMOVABLE, FIXED, NETWORK, RAMDISK, UNKNOWN.</summary>
            <param name="Type">All Drive Types Returned If Blank || CDROM|REMOVABLE|FIXED|NETWORK|RAMDISK|UNKNOWN</param>
        </member>
        <member name="M:sharpAHK._AHK.DriveGet_Capacity(System.String)">
            <summary>Retrieves the total capacity of Path (e.g. C:\) in megabytes.</summary>
            <param name="Path">Drive Path To Check Total Capacity Of</param>
        </member>
        <member name="M:sharpAHK._AHK.DriveGet_FileSystem(System.String)">
            <summary>Retrieves the type of Drive's file system, where Drive is the drive letter followed by a colon and an optional backslash, or a UNC name such \\server1\share1. OutputVar will be set to one of the following words: FAT, FAT32, NTFS, CDFS (typically indicates a CD), UDF (typically indicates a DVD). OutputVar will be made blank and ErrorLevel set to 1 if the drive does not contain formatted media.</summary>
            <param name="Path">Drive Path To Check FileSystem Type</param>
        </member>
        <member name="M:sharpAHK._AHK.DriveGet_Label(System.String)">
            <summary>Retrieves Drive's volume label, where Drive is the drive letter followed by a colon and an optional backslash, or a UNC name such \\server1\share1.</summary>
            <param name="Path">Drive Path To Return Label From</param>
        </member>
        <member name="M:sharpAHK._AHK.DriveGet_Serial(System.String)">
            <summary>Retrieves Drive's volume serial number expressed as decimal integer, where Drive is the drive letter followed by a colon and an optional backslash, or a UNC name such \\server1\share1.</summary>
            <param name="Path">Drive Path To Return Info From</param>
        </member>
        <member name="M:sharpAHK._AHK.DriveGet_Type(System.String)">
            <summary>Retrieves Path's drive type, which is one of the following words: Unknown, Removable, Fixed, Network, CDROM, RAMDisk.</summary>
            <param name="Path">Drive Path To Return Info From</param>
        </member>
        <member name="M:sharpAHK._AHK.DriveGet_Status(System.String)">
            <summary>Retrieves Path's status, which is one of the following words: Unknown (might indicate unformatted/RAW), Ready, NotReady (typical for removable drives that don't contain media), Invalid (Path does not exist or is a network drive that is presently inaccessible, etc.)</summary>
            <param name="Path">Drive Path To Return Info From</param>
        </member>
        <member name="M:sharpAHK._AHK.DriveGet_StatusCD(System.String)">
            <summary>Retrieves the media status of a CD or DVD drive, where Drive is the drive letter followed by a colon (if Drive is omitted, the default CD/DVD drive will be used).</summary>
            <param name="Path">Drive Path To Return Info From</param>
        </member>
        <member name="M:sharpAHK._AHK.Encrypt(System.String,System.String)">
            <summary>Encrypt String Using passPhrase to Decrypt</summary>
            <param name="plainText">String to Encrypt</param>
            <param name="passPhrase">Password to Decrypt Later</param>
        </member>
        <member name="M:sharpAHK._AHK.Decrypt(System.String,System.String)">
            <summary>Decrypts an Encrypted String using passphrase</summary>
            <param name="cipherText">Encryptd String to Decrypt</param>
            <param name="passPhrase">Password to Decrypt</param>
        </member>
        <member name="F:sharpAHK._AHK.DerivationIterations">
            <summary>
            This constant determines the number of iterations for the password bytes generation function. 
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.Generate256BitsOfRandomEntropy">
            <summary>
            Used by Encrypt Function 
            </summary>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.Restore_Backup(System.String,System.Boolean,System.String)">
            <summary>Restores Last Backup File Copy in BackupDir to Original Location</summary>
            <param name="FilePath">Path of Original File Previously Backed Up</param>
            <param name="Prompt">Option to Prompt User Before Restoring Backup</param>
            <param name="BackupDir">Directory To Store Backup File. Default = AppDir\\Backup</param>
        </member>
        <member name="M:sharpAHK._AHK.Backup_File(System.String,System.Boolean,System.String)">
            <summary>Backup File to Backup Dir with .# ext (also puts \Backup\OriginalName.ext as most recent file copy for opening)</summary>
            <param name="FilePath">Path of Original File To Backup</param>
            <param name="DeleteOriginal">Option to Delete Original File After Successful Backup</param>
            <param name="BackupDir">Directory To Store Backup File. Default = AppDir\\Backup</param>
            <returns>Returns True on Successful Backup</returns>
        </member>
        <member name="M:sharpAHK._AHK.Last_Backup_File(System.String,System.String,System.Boolean)">
            <summary>Returns Path of the Last Backup File Created for this File Name</summary>
            <param name="FilePath">Path of Original File To Backup</param>
            <param name="BackupDir">Directory To Store Backup File. Default = AppDir\\Backup</param>
            <param name="UseSameNameMostRecent">Overrides Using .# Backup Uses Most Recent Copy of File. Default = True</param>
        </member>
        <member name="M:sharpAHK._AHK.Backup_File_Display(System.String,System.Windows.Forms.Control,System.Boolean)">
            <summary>Backup File + Display New Backup File Location on GUI</summary>
            <param name="FilePath">Path of Original File To Backup</param>
            <param name="DisplayControl">WinForm Control Name To Display Backup File Path Returned</param>
            <param name="UseSameNameMostRecent">Overrides Using .# Backup Uses Most Recent Copy of File. Default = True</param>
        </member>
        <member name="M:sharpAHK._AHK.FileAppend(System.String,System.String,System.Int32)">
            <summary>Writes text to the end of a file (first creating the file, if necessary).</summary>
            <param name="Text">The text to append to the file. This text may include linefeed characters (`n) to start new lines.</param>
            <param name="FileName">The name of the file to be appended, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Mode">Mode 0 = Default using AHK FileAppend command | Mode 1 = Using StreamWriter to write Text</param>
        </member>
        <member name="M:sharpAHK._AHK.FileCopy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Copies one or more files.</summary>
            <param name="SourcePattern">The name of a single file or folder, or a wildcard pattern such as C:\Temp\*.tmp. SourcePattern is assumed to be in WorkingDir if an absolute path isn't specified.</param>
            <param name="DestPattern">The name or pattern of the destination, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="OverWrite">Flag determines whether to overwrite files if they already exist. True = OverWrite Existing Files</param>
            <param name="ProgressDialog">Option to Display Windows FileCopy Dialog While File Transfers</param>
        </member>
        <member name="M:sharpAHK._AHK._CopyAll(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Function used by FileCopy function to copy list of files to new location
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="OverWrite"></param>
        </member>
        <member name="M:sharpAHK._AHK.FileCreateShortcut(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates a shortcut (.lnk) file.</summary>
            <param name="Target">Name of the file that the shortcut refers to, which should include an absolute path unless the file is integrated with the system (e.g. Notepad.exe).</param>
            <param name="LinkFile">Name of the shortcut file to be created, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. Be sure to include the .lnk extension. If the file already exists, it will be overwritten.</param>
            <param name="WorkingDir">Directory that will become Target's current working directory when the shortcut is launched. If blank or omitted, the shortcut will have a blank "Start in" field and the system will provide a default working directory when the shortcut is launched.</param>
            <param name="Args">Parameters that will be passed to Target when it is launched. Separate parameters with spaces. If a parameter contains spaces, enclose it in double quotes.</param>
            <param name="Description">Comments that describe the shortcut (used by the OS to display a tooltip, etc.)</param>
            <param name="IconFile">The full path and name of the icon to be displayed for LinkFile. It must either be an ico file or the very first icon of an EXE or DLL.</param>
            <param name="ShortcutKey">A single letter, number, or the name of a single key from the key list (mouse buttons and other non-standard keys might not be supported). Do not include modifier symbols. Currently, all shortcut keys are created as CTRL+ALT shortcuts. For example, if the letter B is specified for this parameter, the shortcut key will be CTRL-ALT-B.</param>
            <param name="IconNumber">To use an icon in IconFile other than the first, specify that number here (can be an expression). For example, 2 is the second icon.</param>
            <param name="RunState">To have Target launched minimized or maximized, specify one of the following digits: 1 - Normal (this is the default) | 3 - Maximized | 7 - Minimized</param>
        </member>
        <member name="M:sharpAHK._AHK.AppShortcutToStartup">
            <summary>
            Adds shortcut to application for current executable in user's startup directory  
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.UrlShortcutToDesktop(System.String,System.String,System.String)">
            <summary>
            Creates URL shortcut on user's pc (default location = desktop)
            </summary>
            <param name="linkName">Name of URL ShortCut/Site</param>
            <param name="linkUrl">URL for new Link</param>
            <param name="SaveDir">Directory to save new link to</param>
        </member>
        <member name="M:sharpAHK._AHK.FileDelete(System.String,System.Boolean)">
            <summary>Deletes one or more files.</summary>
            <param name="FilePattern">The name of a single file or a wildcard pattern such as C:\Temp\*.tmp. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="PromptUser">Option to Prompt User with Yes/No PopUp Dialog Before Deleting (Default = False)</param>
        </member>
        <member name="M:sharpAHK._AHK.FileGetAttrib(System.String)">
            <summary>Reports whether a file or folder is read-only, hidden, etc.</summary>
            <param name="Filename">The name of the target file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>        
        </member>
        <member name="M:sharpAHK._AHK.FileGetShortcut(System.String)">
            <summary>Retrieves information about a shortcut (.lnk) file, such as its target file.</summary>
            <param name="LinkFile"></param>        
        </member>
        <member name="T:sharpAHK._AHK.shortCutInfo">
            <summary>Object contains return values from FileGetShortcut command</summary>
        </member>
        <member name="M:sharpAHK._AHK.FileBytes(System.String)">
            <summary>Read File, Return File Bytes</summary>
            <param name="filePath">Path to file to convert to bytes</param>    
        </member>
        <member name="M:sharpAHK._AHK.FileGetSize(System.String,System.String)">
            <summary>Retrieves the size of a file.</summary>
            <param name="Filename">The name of the target file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Units">If present, this parameter causes the result to be returned in units other than bytes: K = kilobytes | M = megabytes</param>
        </member>
        <member name="M:sharpAHK._AHK.DirSize(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns Directory size in Formatted Bytes FileSize Text
            </summary>
            <param name="DirPath">Path of Directory to Return Size</param>
            <param name="FormatBytes">Option to Convert Return Value from Bytes to Formated. Ex: 4MB</param>
            <param name="Recursive">Option to Search SubDirs for Total Folder Size</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DirSizeReport(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns List of Folders with FolderSize 
            </summary>
            <param name="RootDir"></param>
            <param name="FormatBytes"></param>
            <param name="Recursive"></param>
            <param name="OutFile"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileGetTime(System.String,System.String)">
            <summary>Retrieves the datetime stamp of a file or folder.</summary>
            <param name="Filename">The name of the target file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="WhichTime">Which timestamp to retrieve: M = Modification time (default if omitted) | C = Creation time | A = Last access time   </param>        
        </member>
        <member name="M:sharpAHK._AHK.FileGetVersion(System.String)">
            <summary>Retrieves the version of a file.</summary>
            <param name="Filename">The name of the target file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
        </member>
        <member name="M:sharpAHK._AHK.FileMove(System.String,System.String,System.Boolean)">
            <summary>Moves or renames one or more files.</summary>
            <param name="SourcePattern">The name of a single file or a wildcard pattern such as C:\Temp\*.tmp. SourcePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="DestPattern">The name or pattern of the destination, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. To perform a simple move -- retaining the existing file name(s) -- specify only the folder name as shown in these functionally identical examples: FileMove, C:\*.txt, C:\My Folder</param>
            <param name="OverWrite">Determines whether to overwrite files if they already exist</param>
        </member>
        <member name="M:sharpAHK._AHK.FileRename(System.String,System.String,System.Boolean)">
            <summary>Renames one or more files (same as FileMove)</summary>
            <param name="SourcePattern">The name of a single file or a wildcard pattern such as C:\Temp\*.tmp. SourcePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="DestPattern">The name or pattern of the destination, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. To perform a simple move -- retaining the existing file name(s) -- specify only the folder name as shown in these functionally identical examples: FileMove, C:\*.txt, C:\My Folder</param>
            <param name="OverWrite">Determines whether to overwrite files if they already exist</param>
        </member>
        <member name="M:sharpAHK._AHK.DirRename(System.String,System.String)">
            <summary>
            Rename Folder Path
            </summary>
            <param name="SourceDir"></param>
            <param name="DestDir"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileMoveToRoot(System.String,System.Boolean)">
            <summary>
            Moves all files in subfolders to the RootDirPath, removes empty folders
            </summary>
            <param name="RootDirPath">Top Folder Containing Subfolders to Move All Files Into</param>
            <param name="OverWriteDupes">Option to OverWrite Existing Files in RootDirPath with Same Name</param>
        </member>
        <member name="M:sharpAHK._AHK.RemoveEmptyDirs(System.String)">
            <summary>
            Loops through RootDirPath and Removes SubFolders that don't contain any files
            </summary>
            <param name="RootDirPath"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DirContainsFormat(System.String,System.String)">
            <summary>
            Searches Directory for Specific File Format, Returns True if Located in Dir
            </summary>
            <param name="RootDirPath">Directory to Search</param>
            <param name="Format">File Format To Search For (ex: *.txt)</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileListLoop(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loop through file pattern, return matches as list of full file paths
            </summary>
            <param name="FilePattern"></param>
            <param name="IncludeFolders"></param>
            <param name="Recurse"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileCount(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Loop Through File Pattern/Folder, Return Number of Files Found
            </summary>
            <param name="Directory">Path to Folder to Search For FileCount</param>
            <param name="SearchPattern">File Pattern to Match For FileCount, Default = *.*</param>
            <param name="IncludeFolders">Add # of Directories Found to Total File Count</param>
            <param name="Recurse">Option to Include Files Found in Subdirectories. Default = true</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DirCount(System.String,System.String,System.Boolean)">
            <summary>
            Loop Through File Pattern/Folder, Return Number of Directories Found
            </summary>
            <param name="Directory">Path to Folder to Search For FileCount</param>
            <param name="SearchPattern">File Pattern to Match For FileCount, Default = *.*</param>
            <param name="Recurse">Option to Include Subdirectories. Default = true</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileReadLine(System.String,System.String)">
            <summary>Reads the specified line from a file and stores the text in a variable.</summary>
            <param name="Filename">The name of the file to access, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="LineNum">Which line to read (1 is the first, 2 the second, and so on). This can be an expression.</param>
        </member>
        <member name="M:sharpAHK._AHK.FileRead(System.String)">
            <summary>Reads a File's Contents into a Variable</summary>
            <param name="FilePath">Path to File to Read, Assumed to be in %A_WorkingDir% if Absolute Path isn't Specified</param>
        </member>
        <member name="M:sharpAHK._AHK.FileRecycle(System.String)">
            <summary>Sends a file or directory to the recycle bin, if possible.</summary>
            <param name="FilePattern">The name of a single file or a wildcard pattern such as C:\Temp\*.tmp. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified. To recycle an entire directory, provide its name without a trailing backslash.</param>
        </member>
        <member name="M:sharpAHK._AHK.FileRecycleEmpty(System.String)">
            <summary>Empties the recycle bin.</summary>
            <param name="DriveLetter">If omitted, the recycle bin for all drives is emptied. Otherwise, specify a drive letter such as C:\</param>        
        </member>
        <member name="M:sharpAHK._AHK.FileSelectFile(System.String,System.String,System.String,System.String)">
            <summary>Displays a standard dialog that allows the user to open or save file(s).</summary>
            <param name="Options">M: Multi-select. | S: Save button. | 1: File Must Exist | 2: Path Must Exist | 8: Prompt to Create New File | 16: Prompt to OverWrite File | 32: Shortcuts (.lnk files) are selected as-is rather than being resolved to their targets.</param>
            <param name="RootDirFileName">RootDir: The root (starting) directory. | Filename: The default filename to initially show in the dialog's edit field.</param>
            <param name="Prompt">Text displayed in the window to instruct the user what to do. If omitted or blank, it will default to "Select File - %A_SCRIPTNAME%" (i.e. the name of the current script).</param>
            <param name="Filter">Indicates which types of files are shown by the dialog. Example: Documents (*.txt)</param>
        </member>
        <member name="M:sharpAHK._AHK.FileSelectFolder(System.String,System.String,System.String)">
            <summary>Displays a standard dialog that allows the user to select a folder.</summary>
            <param name="StartingFolder">If blank or omitted, the dialog's initial selection will be the user's My Documents folder (or possibly My Computer).</param>
            <param name="Options">0: The options are all disabled | 1 (default): A button is provided that allows the user to create new folders. | Add 2 to the above number to provide an edit field that allows the user to type the name of a folder. | Adding 4 ensures that FileSelectFolder will work properly even in a Preinstallation Environment like WinPE or BartPE</param>
            <param name="Prompt">Text displayed in the window to instruct the user what to do. If omitted or blank, it will default to "Select Folder - %A_SCRIPTNAME%" (i.e. the name of the current script).</param>
        </member>
        <member name="M:sharpAHK._AHK.FileSetAttrib(System.String,System.String,System.String,System.Boolean)">
            <summary>Changes the attributes of one or more files or folders. Wildcards are supported.</summary>
            <param name="Attributes">+ Turn on the attribute | - Turn off the attribute | ^ Toggle the attribute || R = READONLY | A = ARCHIVE | S = SYSTEM | H = HIDDEN | N = NORMAL | O = OFFLINE | T = TEMPORARY</param>
            <param name="FilePattern">The name of a single file or folder, or a wildcard pattern such as C:\Temp\*.tmp. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified. </param>
            <param name="OperateOnFolders">0 (default) Folders are not operated upon (only files). | 1 All files and folders that match the wildcard pattern are operated upon. | 2 Only folders are operated upon (no files)</param>
            <param name="Recurse">False (default) Subfolders are not recursed into. | True = Subfolders are recursed into so that files and folders contained therein are operated upon if they match FilePattern. </param>
        </member>
        <member name="M:sharpAHK._AHK.FileSetTime(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Changes the datetime stamp of one or more files or folders. Wildcards are supported.</summary>
            <param name="YYYYMMDDHH24MISS">If blank or omitted, it defaults to the current time. Otherwise, specify the time to use for the operation (see Remarks for the format). Years prior to 1601 are not supported.</param>
            <param name="FilePattern">The name of a single file or folder, or a wildcard pattern such as C:\Temp\*.tmp. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="WhichTime">M = Modification time (this is the default if the parameter is blank or omitted) | C = Creation time | A = Last access time</param>
            <param name="OperateOnFolders">0 (default) Folders are not operated upon (only files). | 1 All files and folders that match the wildcard pattern are operated upon. | 2 Only folders are operated upon (no files).</param>
            <param name="Recurse">False (default) Subfolders are not recursed into. | True = Subfolders are recursed into so that files and folders contained therein are operated upon if they match FilePattern.</param>        
        </member>
        <member name="M:sharpAHK._AHK.IfExist(System.String)">
            <summary>Checks for the existence of a file or folder.</summary>
            <param name="FilePattern">The path, filename, or file pattern to check. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
        </member>
        <member name="M:sharpAHK._AHK.IfNotExist(System.String)">
            <summary>Checks for the existence of a file or folder.</summary>
            <param name="FilePattern">The path, filename, or file pattern to check. FilePattern is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>        
        </member>
        <member name="M:sharpAHK._AHK.SetWorkingDir(System.String)">
            <summary>Changes the script's current working directory.</summary>
            <param name="DirName">The name of the new working directory, which is assumed to be a subfolder of the current %A_WorkingDir% if an absolute path isn't specified.</param>
        </member>
        <member name="M:sharpAHK._AHK.FileName(System.String,System.Boolean)">
            <summary>Separates a file path - returns file name (with extension)</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileName returns blank if file not found</param>
        </member>
        <member name="M:sharpAHK._AHK.FileDrive(System.String)">
            <summary>
            Returns File's Drive Letter
            </summary>
            <param name="FilePath"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileNameNoExt(System.String,System.Boolean)">
            <summary>Separates a file path - returns file name (no extension)</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileNameNoExt returns blank if file not found</param>
        </member>
        <member name="M:sharpAHK._AHK.FileExt(System.String,System.Boolean,System.Boolean)">
            <summary>Separates a file path - returns file extension (Includes '.' Prefix)</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileExt returns blank if file not found</param>
            <param name="RemovePrefix">Option to remove leading . in front of File Extention Return</param>
        </member>
        <member name="M:sharpAHK._AHK.FileDir(System.String,System.Boolean)">
            <summary>Returns File's Parent Directory Path</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileDir returns blank if file not found</param>
        </member>
        <member name="M:sharpAHK._AHK.DirName(System.String,System.Boolean)">
            <summary>Returns File's Parent Directory Name from Full File Path</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileDir returns blank if file not found</param>
        </member>
        <member name="M:sharpAHK._AHK.FileModified(System.String)">
            <summary>
            Returns File's Last Modified Date 
            </summary>
            <param name="FilePath"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileSize(System.String,System.Boolean,System.Boolean)">
            <summary>Returns name of file size in bytes from file path</summary>
            <param name="FilePath">File Location to Parse</param>
            <param name="CheckIfExists">Option to check to see if FilePath exists - FileDir returns blank if file not found</param>
            <param name="ReturnBytes">Returns Bytes by Default, option to override and return bytes converted to KB/MB/TB</param>
        </member>
        <member name="M:sharpAHK._AHK.isCompressed(System.String)">
            <summary>checks whether a file is Compressed</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.isEncrypted(System.String)">
            <summary>checks whether a file is encrypted</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.isReadOnly(System.String)">
            <summary>checks whether a file is read only</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.isHidden(System.String)">
            <summary>checks whether a file is hidden</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.isArchive(System.String)">
            <summary>checks whether a file has archive attribute</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.isSystem(System.String)">
            <summary>checks whether a file is system file</summary>
            <param name="filePath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.isVideo(System.String)">
            <summary>
            Checks FilePath's Extension to see if it matches known video formats
            </summary>
            <param name="FilePath">File path to check</param>
            <returns>Returns True if File is Known Video Format</returns>
        </member>
        <member name="M:sharpAHK._AHK.isText(System.String)">
            <summary>
            Checks FilePath's Extension to see if it matches known text file formats
            </summary>
            <param name="FilePath">File path to check</param>
            <returns>Returns True if File is Known Text File Format</returns>
        </member>
        <member name="M:sharpAHK._AHK.isImage(System.String)">
            <summary>
            Checks FilePath's Extension to see if it matches known Image File Formats
            </summary>
            <param name="FilePath">File path to check</param>
            <returns>Returns True if File is Known Image File Format</returns>
        </member>
        <member name="M:sharpAHK._AHK.isFile(System.String)">
            <summary>
            Checks File/DirPath and Returns True if File
            </summary>
            <param name="Path">File or Folder Path to Check</param>
            <returns>Returns True if Path leads to File instead of Directory</returns>
        </member>
        <member name="M:sharpAHK._AHK.isDir(System.String)">
            <summary>
            Checks File/DirPath and Returns True if Directory
            </summary>
            <param name="Path">File or Folder Path to Check</param>
            <returns>Returns True if Path leads to Directory instead of File</returns>
        </member>
        <member name="M:sharpAHK._AHK.CreationTime(System.String)">
            <summary>Returns the timestamp when the file was created</summary>
            <param name="FilePath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.LastWriteTime(System.String)">
            <summary>Returns the timestamp when the file was written to</summary>
            <param name="FilePath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.LastAccessTime(System.String)">
            <summary>Returns the timestamp when the file was last accessed</summary>
            <param name="FilePath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.FileCopyDir(System.String,System.String,System.Boolean)">
            <summary>Copies a folder along with all its sub-folders and files (similar to xcopy).</summary>
            <param name="Source">Name of the source directory (with no trailing backslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Dest">Name of the destination directory (with no trailing baskslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="OverWrite">Flag determines whether to overwrite files if they already exist. True = OverWrite Existing Files</param>
        </member>
        <member name="M:sharpAHK._AHK.FileCreateDir(System.String)">
            <summary>Creates a directory/folder.</summary>
            <param name="DirName">Name of the directory to create, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
        </member>
        <member name="M:sharpAHK._AHK.FileMoveDir(System.String,System.String,System.String)">
            <summary>Moves a folder along with all its sub-folders and files. It can also rename a folder.</summary>
            <param name="Source">Name of the source directory (with no trailing backslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Dest">The new path and name of the directory (with no trailing baskslash), which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. For example: D:\My Folder. Note: Dest is the actual path and name that the directory will have after it is moved; it is not the directory into which Source is moved (except for the known limitation mentioned below).</param>
            <param name="Flag">0 (default): Do not overwrite existing files. | 1: Overwrite existing files. However, any files or subfolders inside Dest that do not have a counterpart in Source will not be deleted. | 2: The same as mode 1 above except that the limitation is absent. | R: Rename the directory rather than moving it. </param>
        </member>
        <member name="M:sharpAHK._AHK.FileRemoveDir(System.String,System.Boolean)">
            <summary>Deletes a folder.</summary>
            <param name="DirPath">Name of the directory to delete, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Recurse">Recurse = False - Do not remove files and sub-directories contained in DirName. In this case, if DirName is not empty, no action will be taken | True = Remove all files and subdirectories.</param>
        </member>
        <member name="M:sharpAHK._AHK.OpenDir(System.String,System.Boolean)">
            <summary>Opens Directory in Windows Explorer Window (If Found), Returns False if there is an Error / Directory Not Found</summary>
            <param name="DirPath">Path to directory to open in explorer. Can also pass in FilePath to Open File's Directory</param>
            <param name="CreateIfMissing">Option to Create Missing Directory instead of Returning False, Opens New Dir After Creating</param>
        </member>
        <member name="M:sharpAHK._AHK.OpenFileDir(System.String)">
            <summary>Opens Directory in Windows Explorer containing FilePath</summary>
            <param name="FilePath">Path to file, extracting the folder path to open</param>
        </member>
        <member name="M:sharpAHK._AHK.FileHash(System.String)">
            <summary>
            Returns Hash value for File
            </summary>
            <param name="FilePath"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileCompare(System.String,System.String,System.Boolean)">
            <summary>
            Compare 2 Files To See if they are the same (either compares Hash or Bytes)
            </summary>
            <param name="fileOne">First File To Compare</param>
            <param name="fileTwo">Second File to Compare</param>
            <param name="Hash">Option to Compare File Hashes (Default = True). If False, Compares by Bytes</param>
            <returns>Returns True if Files are the Same</returns>
        </member>
        <member name="M:sharpAHK._AHK.FileCompare_Bytes(System.String,System.String)">
            <summary>
            Compare two files by bytes - returns true if match found 
            </summary>
            <param name="file1"></param>
            <param name="file2"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileCompare_Hash(System.String,System.String)">
            <summary>
            Compares two image paths using hash - returns true if match found
            </summary>
            <param name="file1"></param>
            <param name="file2"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DirPrint(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Prints List of Files in Directory to String or New Text File
            </summary>
            <param name="SearchDir">Directory to Loop through for File Paths</param>
            <param name="OutFile">If path provided, writes contents of directory to this to new/existing text file</param> 
            <param name="Recurse">Option to Search Files in Subdirectories (aka Recurse) Default = True</param>
            <param name="SearchPattern">File pattern to search for</param>
            <param name="OverWritePrevious">Option to overwrite previous OutFile if it exists (Default = True)</param>
            <param name="OpenAfterWrite">If OutFile path provided, option to open new text file after writing (Default = True)</param>
            <returns>Returns string with list of file paths under SearchDir</returns>
        </member>
        <member name="M:sharpAHK._AHK.GetDirectoryTable(System.String,System.Boolean,System.String)">
            <summary>Converts search directory contents to Datatable to display in DataGridView etc</summary>
            <param name="SearchDir"> </param>
            <param name="Recurse"> </param>
            <param name="SearchPattern"> </param>
        </member>
        <member name="M:sharpAHK._AHK.DirSizeBytes(System.String)">
            <summary>Returns Directory size in bytes</summary>
            <param name="DirPath">Path of Directory to Return Size</param>
        </member>
        <member name="M:sharpAHK._AHK.IsDir(System.String)">
            <summary>Returns true if path is a valid Directory Path</summary>
            <param name="FolderPath"> </param>
        </member>
        <member name="M:sharpAHK._AHK.NextFileName(System.String,System.Int32)">
            <summary>Returns the next available file name in a folder, incrementing with "File (FileNumber).ext" Format</summary>
            <param name="FilePath">Original File Name</param>
            <param name="LeadingZeroCount">Option to Add Leading Zeros to New File Name Format</param>
        </member>
        <member name="M:sharpAHK._AHK.WaitForFileExist(System.String,System.Int32)">
            <summary>Waits for file to exist</summary>
            <param name="FileToWaitFor">File to search for, waiting until found</param>
            <param name="TimeOutSeconds">Number of Seconds to Wait Before Timing Out</param>
            <returns>Returns True If File Found, False if TimeOut Reached</returns>
        </member>
        <member name="M:sharpAHK._AHK.WaitForFileRead(System.String)">
            <summary>waits for file to exist, then returns it's contents as a string</summary>
            <param name="filePath"> </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.FileList(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:sharpAHK._AHK.DirList(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns List of Folders in Directory Path
            </summary>
            <param name="DirPath"> </param>
            <param name="SearchPattern"> </param>
            <param name="Recurse"> </param>
            <param name="FullPathReturn">Option to return either the Full Directory Paths (true) or the Directory name list (false)</param>
        </member>
        <member name="M:sharpAHK._AHK.ModifiedToday(System.String,System.String)">
            <summary>
            Search Returns list of (ex: .cs) Files Modified Today 
            </summary>
            <param name="SearchRoot"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.SafeSaveName(System.String,System.String)">
            <summary>
            Format String Removing Illegal Characters - Allowed to Save As File In Windows
            </summary>
            <param name="FileName"></param>
            <param name="ReplaceChar">Character to replace illegal characters with, Default = Space</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileSizeDict(System.String,System.String,System.Boolean)">
            <summary>
            Returns Dictionary with Full FilePath / FileSize (Bytes)
            </summary>
            <param name="DirPath"></param>
            <param name="SearchPattern"></param>
            <param name="Recurse"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FileSizeDict_FromDirList(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Loop Through List of Directories, Returns Dictionary with FilePath / FileSize (bytes)
            </summary>
            <param name="DirPaths"></param>
            <param name="SearchPattern"></param>
            <param name="Recurse"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DisplayText(System.String,System.Windows.Forms.Control)">
            <summary>Updates Text on DisplayControl (works on multi-thread)</summary>
            <param name="Text">Text to populate on Control (TextBox/Label/Etc)</param>
            <param name="DisplayControl">WinForm Control to Update (TextBox/Label/etc - any that acces Text param</param>
        </member>
        <member name="M:sharpAHK._AHK.Gui(System.String,System.String,System.String,System.String)">
            <summary>Creates and manages windows and controls. Such windows can be used as data entry forms or custom user interfaces.</summary>
            <param name="subCommand">See AHK Documentation For Options</param>
            <param name="Param2">See AHK Documentation For Options</param>
            <param name="Param3">See AHK Documentation For Options</param>
            <param name="Param4">See AHK Documentation For Options</param>
        </member>
        <member name="M:sharpAHK._AHK.GuiControl(System.String,System.String,System.String)">
            <summary>Makes a variety of changes to a control in a GUI window.</summary>
            <param name="subCommand">See AHK Documentation For Options</param>
            <param name="ControlID">See AHK Documentation For Options</param>
            <param name="Param3">See AHK Documentation For Options</param>
        </member>
        <member name="M:sharpAHK._AHK.GuiControlGet(System.String,System.String,System.String)">
            <summary>Retrieves various types of information about a control in a GUI window.</summary>
            <param name="subCommand">See AHK Documentation For Options</param>
            <param name="ControlID">See AHK Documentation For Options</param>
            <param name="Param3">See AHK Documentation For Options</param>        
        </member>
        <member name="M:sharpAHK._AHK.BlockInput(System.String)">
            <summary>Disables or enables the user's ability to interact with the computer via keyboard and mouse.</summary>
            <param name="Mode">Mode 1: One of the following words: On: The user is prevented from interacting with the computer (mouse and keyboard input has no effect). | Off: Input is re-enabled. || Mode 2: This mode operates independently of the other two. | Send: The user's keyboard and mouse input is ignored while a Send or SendRaw is in progress (the traditional SendEvent mode only). | This prevents the user's mouse movements and clicks from disrupting the simulated mouse events. | SendAndMouse: A combination of the above two modes.  </param>
        </member>
        <member name="M:sharpAHK._AHK.KeyHistory">
            <summary>Displays script info and a history of the most recent keystrokes and mouse clicks.</summary>
        </member>
        <member name="M:sharpAHK._AHK.GetKeyState(System.String,System.String)">
            <summary>Checks if a keyboard key or mouse/joystick button is down or up. Also retrieves joystick status.</summary>
            <param name="KeyName">This can be just about any single character from the keyboard or one of the key names from the key list, such as a mouse/joystick button (though mouse button state usually cannot be detected on Windows 95/98/Me). Examples: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1. Alternatively, an explicit virtual key code such as vkFF may be specified. This is useful in the rare case where a key has no name. The virtual key code of such a key can be determined by following the steps at the bottom fo the key list page. </param>
            <param name="Mode">P: Retrieve the physical state | T: Retrieve the toggle state. If omitted, the mode will default to that which retrieves the logical state of the key. This is the state that the OS and the active window believe the key to be in, but is not necessarily the same as the physical state. </param>
        </member>
        <member name="M:sharpAHK._AHK.KeyDown(System.String)">
            <summary>Returns true if key is currently pressed down</summary>
            <param name="Key">This can be just about any single character from the keyboard or one of the key names from the key list, such as a mouse/joystick button (though mouse button state usually cannot be detected on Windows 95/98/Me). Examples: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1. Alternatively, an explicit virtual key code such as vkFF may be specified. This is useful in the rare case where a key has no name. The virtual key code of such a key can be determined by following the steps at the bottom fo the key list page. </param>
        </member>
        <member name="M:sharpAHK._AHK.KeyWait(System.String,System.String)">
            <summary>Waits for a key or mouse/joystick button to be released or pressed down.</summary>
            <param name="KeyName">This can be just about any single character from the keyboard or one of the key names from the key list, such as a mouse/joystick button (though mouse button state usually cannot be detected on Windows 95/98/Me). Examples: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1. Alternatively, an explicit virtual key code such as vkFF may be specified. This is useful in the rare case where a key has no name. The virtual key code of such a key can be determined by following the steps at the bottom fo the key list page. </param>
            <param name="Options">D: Wait for the key to be pushed down. | L: Check the logical state of the key, which is the state that the OS and the active window believe the key to be in (not necessarily the same as the physical state). This option is ignored for joystick buttons. | T: Timeout (e.g. T3). The number of seconds to wait before timing out and setting ErrorLevel to 1. If the key or button achieves the specified state, the command will not wait for the timeout to expire. Instead, it will immediately set ErrorLevel to 0 and the script will continue executing. If this parameter is blank, the command will wait indefinitely for the specified key or mouse/joystick button to be physically released by the user. However, if the keyboard hook is not installed and KeyName is a keyboard key released artificially by means such as the Send command, the key will be seen as having been physically released. The same is true for mouse buttons when the mouse hook is not installed. </param>
        </member>
        <member name="M:sharpAHK._AHK.Input(System.String,System.String,System.String)">
            <summary>Waits for the user to type a string.</summary>
            <param name="Options">B: Backspace is ignored. | C: Case sensitive. | I: Ignore input generated by any AutoHotkey script, such as the SendEvent command. | L: Length limit (e.g. L5). The maximum allowed length of the input. | M: Modified keystrokes such as Control-A through Control-Z are recognized and transcribed if they correspond to real ASCII characters. | T: Timeout (e.g. T3). The number of seconds to wait before terminating the Input and setting ErrorLevel to the word Timeout. | V: Visible. Normally, the user's input is blocked (hidden from the system). Use this option to have the user's keystrokes sent to the active window. | *: Wildcard (find anywhere). Normally, what the user types must exactly match one of the MatchList phrases for a match to occur. Use this option to find a match more often by searching the entire length of the input text.</param>
            <param name="EndKeys">A list of zero or more keys, any one of which terminates the Input when pressed (the EndKey itself is not written to OutputVar). When an Input is terminated this way, ErrorLevel is set to the word EndKey followed by a colon and the name of the EndKey.</param>
            <param name="MatchList">A comma-separated list of key phrases, any of which will cause the Input to be terminated (in which case ErrorLevel will be set to the word Match). The entirety of what the user types must exactly match one of the phrases for a match to occur (unless the * option is present). In addition, any spaces or tabs around the delimiting commas are significant, meaning that they are part of the match string. For example, if MatchList is "ABC , XYZ ", the user must type a space after ABC or before XYZ to cause a match.</param>
        </member>
        <member name="M:sharpAHK._AHK.InputBox(System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Displays an input box to ask the user to enter a string.</summary>
            <param name="Title">The title of the input box. If blank or omitted, it defaults to the name of the script. </param>
            <param name="Prompt">The text of the input box, which is usually a message to the user indicating what kind of input is expected. If Prompt is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.</param>
            <param name="Hide">If this parameter is the word HIDE, the user's input will be masked, which is useful for passwords.</param>
            <param name="Width">If this parameter is blank or omitted, the starting width of the window will be 375. This parameter can be an expression.</param>
            <param name="Height">If this parameter is blank or omitted, the starting height of the window will be 189. This parameter can be an expression.</param>
            <param name="X">The X and Y coordinates of the window (use 0,0 to move it to the upper left corner of the desktop), which can be expressions. If either coordinate is blank or omitted, the dialog will be centered in that dimension. Either coordinate can be negative to position the window partially or entirely off the desktop.</param>
            <param name="Y">The X and Y coordinates of the window (use 0,0 to move it to the upper left corner of the desktop), which can be expressions. If either coordinate is blank or omitted, the dialog will be centered in that dimension. Either coordinate can be negative to position the window partially or entirely off the desktop.</param>
            <param name="Font">Not yet implemented (leave blank). In the future it might accept something like verdana:8</param>
            <param name="TimeOut">Timeout in seconds (can contain a decimal point or be an expression).  If this value exceeds 2147483 (24.8 days), it will be set to 2147483. After the timeout has elapsed, the InputBox window will be automatically closed and ErrorLevel will be set to 2. OutputVar will still be set to what the user entered.</param>
            <param name="Default">A string that will appear in the InputBox's edit field when the dialog first appears. The user can change it by backspacing or other means. </param>
        </member>
        <member name="M:sharpAHK._AHK._InputBox(System.String,System.String,System.String@,System.String,System.String)">
            <summary>
            v2 Input Box
            </summary>
            <param name="title"></param>
            <param name="promptText"></param>
            <param name="value"></param>
            <param name="OKButton"></param>
            <param name="CancelButton"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.msgBox(System.String,System.String,System.String,System.String)">
            <summary>Displays the specified text in a small window containing one or more buttons (such as Yes and No) - returns True if Clicked, False if timeout reached</summary>
            <param name="Text_Or_Options">If all parameters are omitted, MsgBox will display "Press OK to continue." Otherwise, this parameter is the text displayed inside the message box. OPTIONS Indicates the type of message box and the possible button combinations. More than one option can be added by combining values: || Ok - 0 | Ok/Cancel - 1 | Abort/Retry/Ignore - 2 | Yes/No/Cancel - 3 | Yes/No - 4 | Retry/Cancel - 5 | Cancel/Try Again/Continue - 6 | Add Help Button - 16384 | Icon Stop/Error - 16 | Icon Question - 32 | Icon Exclamation - 48 | Icon Asterisk - 64 | 2nd Button Default - 256 | 3rd Button Default - 512 | System Modal (always on top) - 4096 | Task Modal - 8192 | Show on Default Desktop - 131072 | AlwaysOnTop (no title bar) - 262144 | Text Right Justified - 524288 | Right to Left Reading - 1048576</param>
            <param name="Title">The title of the message box window. If omitted or blank, it defaults to the name of the script (without path). </param>
            <param name="Text">This parameter is the text displayed inside the message box to instruct the user what to do, or to present information.</param>
            <param name="TimeOut">(optional) Timeout in seconds (can contain a decimal point but cannot be an expression).  If this value exceeds 2147483 (24.8 days), it will be set to 2147483.  After the timeout has elapsed the message box will be automatically closed and the IfMsgBox command will see the value TIMEOUT.</param>
            <returns>R</returns>
        </member>
        <member name="M:sharpAHK._AHK.MsgBox(System.Object,System.String,sharpAHK._AHK.MsgBoxButtons,sharpAHK._AHK.MsgBoxIcon,System.Int32)">
            <summary>
            Behaves Same as MsgBox Command, Options are PreDefined Here for Faster Config
            </summary>
            <param name="Text">Text to Display in MessageBox</param>
            <param name="Title">MsgBox Title</param>
            <param name="Button">Button Options (Default = OK)</param>
            <param name="Icon">Button Icon (Default = None)</param>
            <param name="TimeOut">Seconds to Wait on User Input Before Timeout (Default = -1 Which Disables TimeOut)</param>
            <returns>Returns Button Text User Clicked or 'TimeOut' if User Didn't Click Before TimeOut Reached</returns>
        </member>
        <member name="T:sharpAHK._AHK.MsgBoxButtons">
            <summary>
            MsgBox Button Options
            </summary>		
        </member>
        <member name="T:sharpAHK._AHK.MsgBoxIcon">
            <summary>
            MsgBox Icon Options
            </summary>		
        </member>
        <member name="M:sharpAHK._AHK.MsgBox_Clicked">
            No Longer Needed - MsgBox Command Returns Clicked Text Value
            <summary>Checks which button was pushed by the user during the most recent MsgBox command. **Returns Button Name pressed by last MsgBox command**</summary>
            <returns>Returns the Button Name Clicked By User on Last MsgBox Prompt</returns>
        </member>
        <member name="M:sharpAHK._AHK.IfMsgBox(System.String)">
            <summary>Checks to see if ButtonName (ex: Ok, No, Cancel) was pushed by the user during the most recent MsgBox command. Returns True if Specific ButtonName was pushed</summary>
            <param name="ButtonName">Name of the MsgBox Button User May Have Clicked (Ex: Ok/Yes/No/Cancel) - Returns True if Button Was Clicked</param>
        </member>
        <member name="M:sharpAHK._AHK.YesNoBox(System.String,System.String)">
            <summary>yes/no user prompt</summary>
            <param name="Question"> </param>
            <param name=" Title"> </param>
        </member>
        <member name="M:sharpAHK._AHK.YesNo(System.String,System.String)">
            <summary>
            Yes/No Dialog that Returns TRUE if Yes Clicked
            </summary>
            <param name="Question"></param>
            <param name="Title"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.YesNoCancelBox(System.String,System.String)">
            <summary>yes/no/cancel prompt for user input</summary>
            <param name="Question"> </param>
            <param name=" Title"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Color_Dialog">
            <summary>Select Color Dialog</summary>
        </member>
        <member name="M:sharpAHK._AHK.Select_Folder_Dialog">
            <summary>Popup dialog to select folder path</summary>
        </member>
        <member name="M:sharpAHK._AHK.Open_File_Dialog(System.String,System.String,System.String,System.String)">
            <summary>Open File Dialog</summary>
            <param name="InitialDir"> </param>
            <param name="DefaultExt"> </param>
            <param name="Filter"> </param>
            <param name="Title"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Save_File_Dialog(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Save File Prompt</summary>
            <param name="InitialDirectory"> </param>
            <param name="DefaultExt"> </param>
            <param name="Filter"> </param>
            <param name="Title"> </param>
            <param name="FileMustExist"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Save_File_As_Dialog(System.String,System.String,System.String,System.String)">
            <summary>Save File As Prompt</summary>
            <param name="InitialDirectory"> </param>
            <param name="DefaultExt"> </param>
            <param name="Filter"> </param>
            <param name="Title"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Progress(System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates or updates a window containing a progress bar or an image.</summary>
            <param name="Param1">If the progress window already exists: If Param1 is the word OFF, the window is destroyed. If Param1 is the word SHOW, the window is shown if it is currently hidden. Otherwise, if Param1 is an pure number, its bar's position is changed to that value. If Param1 is blank, its bar position will be unchanged but its text will be updated to reflect any new strings provided in SubText, MainText, and WinTitle. In both of these modes, if the window doesn't yet exist, it will be created with the defaults for all options.</param>
            <param name="SubText">The text to display below the image or bar indicator. Although word-wrapping will occur, to begin a new line explicitly, use linefeed (`n). To set an existing window's text to be blank, specify %A_Space%. For the purpose of auto-calculating the window's height, blank lines can be reserved in a way similar to MainText below.</param>
            <param name="MainText">The text to display above the image or bar indicator (its font is semi-bold). Although word-wrapping will occur, to begin a new line explicitly, use linefeed (`n). If blank or omitted, no space will be reserved in the window for MainText. To reserve space for single line to be added later, or to set an existing window's text to be blank, specify %A_Space%. To reserve extra lines beyond the first, append one or more linefeeds (`n). Once the height of MainText's control area has been set, it cannot be changed without recreating the window. </param>
            <param name="WinTitle">The title of the window. If omitted and the window is being newly created, the title defaults to the name of the script (without path). If the B (borderless) option has been specified, there will be no visible title bar but the window can still be referred to by this title in commands such as WinMove.</param>
            <param name="FontName">The name of the font to use for both MainText and SubText. The font table lists the fonts included with the various versions of Windows. If unspecified or if the font cannot be found, the system's default GUI font will be used. See AHK documentation for how to change the size, weight, and color of the font.</param>
        </member>
        <member name="M:sharpAHK._AHK.SplashImage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates or updates a window containing a progress bar or an image.</summary>
            <param name="ImagePath">If this is the word OFF, the window is destroyed. If this is the word SHOW, the window is shown if it is currently hidden. Otherwise, this is the file name of the BMP, GIF, or JPG image to display (to display other file formats such as PNG, TIF, and ICO, consider using the Gui command to create a window containing a picture control). ImageFile is assumed to be in %A_WorkingDir% if an absolute path isn't specified. If ImageFile and Options are blank and the window already exists, its image will be unchanged but its text will be updated to reflect any new strings provided in SubText, MainText, and WinTitle. For newly created windows, if ImageFile is blank or there is a problem loading the image, the window will be displayed without the picture.</param>
            <param name="Options">See AHK Documentation For More Info - A string of zero or more options from the list of options. || A - Window will NOT be always-on-top | B - Borderless | M - Window will be moveable by user (except if borderless) | T - the window will be given a button in the task bar and it will be unowned. | Hn - specify n for the height of the window's client area | Wn - specify n for the width of the client window's area | Xn - specify n for the window's x coordinate | Yn - specify n for the window's y cooridnate | Hide - window will be initially hidden</param>
            <param name="SubText">The text to display below the image or bar indicator. Although word-wrapping will occur, to begin a new line explicitly, use linefeed (`n). To set an existing window's text to be blank, specify %A_Space%. For the purpose of auto-calculating the window's height, blank lines can be reserved in a way similar to MainText below.</param>
            <param name="MainText">The text to display above the image or bar indicator (its font is semi-bold). Although word-wrapping will occur, to begin a new line explicitly, use linefeed (`n). If blank or omitted, no space will be reserved in the window for MainText. To reserve space for single line to be added later, or to set an existing window's text to be blank, specify %A_Space%. To reserve extra lines beyond the first, append one or more linefeeds (`n). Once the height of MainText's control area has been set, it cannot be changed without recreating the window. </param>
            <param name="WinTitle">The title of the window. If omitted and the window is being newly created, the title defaults to the name of the script (without path). If the B (borderless) option has been specified, there will be no visible title bar but the window can still be referred to by this title in commands such as WinMove.</param>
            <param name="FontName">The name of the font to use for both MainText and SubText. The font table lists the fonts included with the various versions of Windows. If unspecified or if the font cannot be found, the system's default GUI font will be used. See AHK documentation for how to change the size, weight, and color of the font.</param>
        </member>
        <member name="M:sharpAHK._AHK.SplashImageShow(System.Int32)">
            <summary>
            Displays a SplashImage previously hidden (created with "Hide" Option enabled)
            </summary>
            <param name="DisplayTimeMS">Option to Hide Splash Image after X milliseconds (if greater than 0)</param>
        </member>
        <member name="M:sharpAHK._AHK.SplashImageOff">
            <summary>Command to remove an existing Splash Image.</summary>
        </member>
        <member name="M:sharpAHK._AHK.SplashTextOff">
            <summary>Command to remove an existing splash window.</summary>
        </member>
        <member name="M:sharpAHK._AHK.SplashTextOn(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Creates a customizable text popup window.</summary>
            <param name="Width">The width in pixels of the Window. Default 200. This parameter can be an expression.</param>
            <param name="Height">The height in pixels of the window (not including its title bar). Default 0 (i.e. just the title bar will be shown). This parameter can be an expression.</param>
            <param name="Title">The title of the window. Default empty (blank). </param>
            <param name="Text">The text of the window. Default empty (blank). If Text is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.</param>
            <param name="DisplayTimeMS">Option to Hide Splash Text after X milliseconds (if greater than 0)</param>
        </member>
        <member name="M:sharpAHK._AHK.ToolTip(System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates an always-on-top window anywhere on the screen.</summary>
            <param name="Text">If blank or omitted, the existing tooltip (if any) will be hidden. Otherwise, this parameter is the text to display in the tooltip. To create a multi-line tooltip, use the linefeed character (`n) in between each line, e.g. Line1`nLine2. If Text is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability. </param>
            <param name="DisplayTime">Time (Milliseconds) to Display ToolTip on Screen</param>
            <param name="X">The X and Y position of the tooltip relative to the active window (use "CoordMode, ToolTip" to change to screen coordinates). If the coordinates are omitted, the tooltip will be shown near the mouse cursor. X and Y can be expressions.</param>
            <param name="Y">The X and Y position of the tooltip relative to the active window (use "CoordMode, ToolTip" to change to screen coordinates). If the coordinates are omitted, the tooltip will be shown near the mouse cursor. X and Y can be expressions.</param>
            <param name="WhichToolTip">Omit this parameter if you don't need multiple tooltips to appear simultaneously. Otherwise, this is a number between 1 and 20 to indicate which tooltip window to operate upon. If unspecified, that number is 1 (the first). This parameter can be an expression.</param>
        </member>
        <member name="F:sharpAHK._AHK.aTimer">
            <summary>Timer used to destroy tooltip after X milliseconds</summary>
        </member>
        <member name="M:sharpAHK._AHK.KillToolTip(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>Event Used to Close ToolTip after X Milliseconds</summary>
        </member>
        <member name="M:sharpAHK._AHK.TrayTip(System.String,System.String,System.String,System.String)">
            <summary>Creates a balloon message window near the tray icon. Requires Windows 2000/XP or later.</summary>
            <param name="Title">If all parameters are omitted, any TrayTip window currently displayed will be removed. Otherwise, this parameter is the title of the window, which can be up to 73 characters long (characters beyond this length are not shown). If Title is blank, the title line will be entirely omitted from the balloon window, making it vertically shorter.</param>
            <param name="Text">If this parameter is omitted or blank, any TrayTip window currently displayed will be removed. Otherwise, specify the message to display, which appears beneath Title. Only the first 265 characters of Text will be displayed. Carriage return (`r) or linefeed (`n) may be used to create multiple lines of text. For example: Line1`nLine2 </param>
            <param name="Seconds">The approximate number of seconds to display the window, after which it will be automatically removed by the OS. Specifying a number less than 10 or greater than 30 will usually cause the minimum (10) or maximum (30) display time to be used instead. If blank or omitted, the minimum time will usually be used. This parameter can be an expression.</param>
            <param name="Options">1: Info icon | 2: Warning icon | 3: Error icon | If omitted, it defaults to 0, which is no icon. This parameter can be an expression. </param>
        </member>
        <member name="M:sharpAHK._AHK.Notify(System.String,System.String)">
            <summary>
            Updated Version of TrayTip - Displays Popup on Bottom Right of Primary Display
            </summary>
            <param name="text">Text to Display</param>
            <param name="title">Notification Title</param>
        </member>
        <member name="M:sharpAHK._AHK.Send(System.String)">
            <summary>Sends simulated keystrokes and mouse clicks to the active window. Modifiers include: ! (ALT) | + (SHIFT) | ^ (CONTROL) | # (WIN) | {!} - {^} (Literal Key Use) | {F1} - {F24} | {Enter} | {Space} | {Tab} | {Up} | {PgDn} | {Backspace} | {Control Down} | {NumpadLeft} | {PrintScreen}</summary>
            <param name="Keys">The sequence of keys to send. As with other commands, the comma in front of the first parameter is optional.</param>
        </member>
        <member name="M:sharpAHK._AHK.SendRaw(System.String)">
            <summary>Sends simulated keystrokes and mouse clicks to the active window. The SendRaw command sends the keystrokes exactly as they appear rather than translating {Enter} to an ENTER keystroke, ^c to Control-C, etc.</summary>
            <param name="Keys">The sequence of keys to send. As with other commands, the comma in front of the first parameter is optional.</param>
        </member>
        <member name="M:sharpAHK._AHK.SendInput(System.String)">
            <summary>Sends simulated keystrokes and mouse clicks to the active window. SendInput is generally the preferred method to send keystrokes and mouse clicks because of its superior speed and reliability. Under most conditions, SendInput is nearly instantaneous, even when sending long strings.</summary>
            <param name="Keys">The sequence of keys to send. As with other commands, the comma in front of the first parameter is optional.</param>
        </member>
        <member name="M:sharpAHK._AHK.SendPlay(System.String)">
            <summary>Sends simulated keystrokes and mouse clicks to the active window. SendPlay's biggest advantage is its ability to "play back" keystrokes and mouse clicks in a broader variety of games than the other modes.</summary>
            <param name="Keys">The sequence of keys to send. As with other commands, the comma in front of the first parameter is optional.</param>
        </member>
        <member name="M:sharpAHK._AHK.SendEvent(System.String,System.String)">
            <summary>Sends simulated keystrokes and mouse clicks to the active window.</summary>
            <param name="Keys">The sequence of keys to send. As with other commands, the comma in front of the first parameter is optional.</param>
            <param name="KeyDelay">Amount of time (ms) to pause in between key sends. Default is -1 (fastest possible)</param>
        </member>
        <member name="M:sharpAHK._AHK.SendMode(System.String)">
            <summary>Makes Send synonymous with SendInput or SendPlay rather than the default (SendEvent). Also makes Click and MouseMove/Click/Drag use the specified method.</summary>
            <param name="Mode">Event | Input | InputThenPlay | Play</param>
        </member>
        <member name="M:sharpAHK._AHK.KeyDelay(System.String,System.String,System.String)">
            <summary>Sets the delay that will occur after each keystroke sent by Send and ControlSend.</summary>
            <param name="Delay">Time in milliseconds, which can be an expression. Use -1 for no delay at all and 0 for the smallest possible delay (however, if the Play parameter is present, both 0 and -1 produce no delay). Leave this parameter blank to retain the current Delay.</param>
            <param name="PressDuration">Certain games and other specialized applications may require a delay inside each keystroke; that is, after the press of the key but before its release. Use -1 for no delay at all (default) and 0 for the smallest possible delay (however, if the Play parameter is present, both 0 and -1 produce no delay). Omit this parameter to leave the current PressDuration unchanged. Note: PressDuration also produces a delay after any change to the modifier key state (CTRL, ALT, SHIFT, and WIN) needed to support the keys being sent.</param>
            <param name="Play">The word Play applies the above settings to the SendPlay mode rather than the traditional SendEvent mode. If a script never uses this parameter, the delay is always -1/-1 for SendPlay.</param>
        </member>
        <member name="M:sharpAHK._AHK.CapsLock(System.Boolean)">
            <summary>Sets the state of the Capslock key. Can also force the key to stay on or off.</summary>
            <param name="OnState">Default = On || OnState = True (On): Turns on the key and removes the AlwaysOn/Off attribute of the key (if present). | OnState = False (Off): Turns off the key and removes the AlwaysOn/Off attribute of the key (if present). | AlwaysOn: Forces the key to stay on permanently | AlwaysOff: Forces the key to stay off permanently </param>
        </member>
        <member name="M:sharpAHK._AHK.NumLock(System.Boolean)">
            <summary>Sets the state of the NumLock key. Can also force the key to stay on or off.</summary>
            <param name="OnState">Default = AlwaysOn || On (True): Turns on the key and removes the AlwaysOn/Off attribute of the key (if present). | Off (False): Turns off the key and removes the AlwaysOn/Off attribute of the key (if present). | AlwaysOn: Forces the key to stay on permanently | AlwaysOff: Forces the key to stay off permanently </param>
        </member>
        <member name="M:sharpAHK._AHK.ScrollLock(System.Boolean)">
            <summary>Sets the state of the ScrollLock key. Can also force the key to stay on or off.</summary>
            <param name="OnState">Default = AlwaysOn || On (True): Turns on the key and removes the AlwaysOn/Off attribute of the key (if present). | Off (False): Turns off the key and removes the AlwaysOn/Off attribute of the key (if present). | AlwaysOn: Forces the key to stay on permanently | AlwaysOff: Forces the key to stay off permanently </param>
        </member>
        <member name="M:sharpAHK._AHK.SetStoreCapslockMode(System.Boolean)">
            <summary>Whether to restore the state of CapsLock after a Send.</summary>
            <param name="OnState">On (True): This is the initial setting for all scripts: The CapsLock key will be restored to its former value if Send needed to change it temporarily for its operation. | Off (True): The state of the CapsLock key is not changed at all. As a result, Send will invert the case of the characters if Capslock happens to be ON during the operation. </param>
        </member>
        <member name="M:sharpAHK._AHK.Hotkey_Setup(System.Windows.Forms.Form)">
            <summary>Intializes Hotkey Communication with Main Application - Allows for AutoHotkey to execute functions in Main Application (non-AHK Code like C#)</summary>
            <param name="form">Name of the Form Setting Up the Hotkey. Ex: Hotkey_Setup(this);</param>
        </member>
        <member name="M:sharpAHK._AHK.Add_Hotkey(System.String,System.String)">
            <summary>Add Hotkey Command The Triggers a Function/Method In Your Main Application</summary>
            <param name="Hotkey">Combination of keys to pressed to call executing a function/method</param>
            <param name="Method">Function/Method in Main Application To Run When Hotkey Is Pressed</param>
        </member>
        <member name="M:sharpAHK._AHK.Save_Hotkeys(System.Windows.Forms.Form)">
            <summary>Save Command That Initializes Hotkeys Added using Add_Hotkey()</summary>
            <param name="ThisForm">Name of the Form Setting Up the Hotkey. Ex: Save_Hotkeys(this);</param>
        </member>
        <member name="M:sharpAHK._AHK.Hotkey(System.String,System.String,System.String)">
            <summary>Creates, modifies, enables, or disables a hotkey while the script is running.</summary>
            <param name="KeyName">Name of the hotkey's activation key, including any modifier symbols. For example, specify #c for the Win+C hotkey. If KeyName already exists as a hotkey, that hotkey will be updated with the values of the command's other parameters. KeyName can also be the name of an existing hotkey label (i.e. a double-colon label), which will cause that hotkey to be updated with the values of the command's other parameters. When specifying an existing hotkey, KeyName is not case sensitive. However, the names of keys must be spelled the same as in the existing hotkey (e.g. Esc is not the same as Escape for this purpose). Also, the order of modifier symbols such as ^!+# does not matter. The current IfWin setting determines the variant of a hotkey upon which the Hotkey command will operate. If the variant does not yet exist, it will be created. When a hotkey is first created -- either by the Hotkey command or a double-colon label in the script -- its key name and the ordering of its modifier symbols becomes the permanent name of that hotkey as reflected by A_ThisHotkey. This name does not change even if the Hotkey command later accesses the hotkey with a different symbol ordering. </param>
            <param name="Label">The label name whose contents will be executed (as a new thread) when the hotkey is pressed. Both normal labels and hotkey/hotstring labels can be used. The trailing colon(s) should not be included. If Label is dynamic (e.g. %VarContainingLabelName%), IsLabel(VarContainingLabelName) may be called beforehand to verify that the label exists. This parameter can be left blank if KeyName already exists as a hotkey, in which case its label will not be changed. This is useful to change only the hotkey's Options. If the label is specified but the hotkey is disabled from a previous use of this command, the hotkey will remain disabled. To prevent this, include the word ON in Options. This parameter can also be one of the following special values: On: The hotkey becomes enabled. No action is taken if the hotkey is already On. Off: The hotkey becomes disabled. No action is taken if the hotkey is already Off. Toggle: The hotkey is set to the opposite state (enabled or disabled). AltTab (and others): These are special Alt-Tab hotkey actions that are described here. Note: The current IfWin setting determines the variant of a hotkey upon which On/Off/Toggle will operate.</param>
            <param name="Options">A string of zero or more of the following letters with optional spaces in between. For example: UseErrorLevel B0 UseErrorLevel: If the command encounters a problem, this option skips the warning dialog, sets ErrorLevel to one of the codes from the table below, then allows the current thread to continue. On: Enables the hotkey if it is currently disabled. Off: Disables the hotkey if it is currently enabled. This is typically used to create a hotkey in an initially-disabled state. B or B0: Specify the letter B to buffer the hotkey as described in #MaxThreadsBuffer. Specify B0 (B with the number 0) to disable this type of buffering. Pn: Specify the letter P followed by the hotkey's thread priority. If the P option is omitted when creating a hotkey, 0 will be used. Tn: Specify the letter T followed by a the number of threads to allow for this hotkey as described in #MaxThreadsPerHotkey. For example: T5 If either or both of the B and T option letters are omitted and the hotkey already exists, those options will not be changed. But if the hotkey does not yet exist -- that is, it is about to be created by this command -- the options will default to those most recently in effect. For example, the instance of #MaxThreadsBuffer that occurs closest to the bottom of the script will be used. If #MaxThreadsBuffer does not appear in the script, its default setting (OFF in this case) will be used. This behavior also applies to #IfWin: the bottommost occurrence applies to newly created hotkeys unless "Hotkey IfWin" has executed since the script started. Note: The current IfWin setting determines the variant of a hotkey upon which the Hotkey command will operate. If the variant does not yet exist, it will be created.</param>
        </member>
        <member name="M:sharpAHK._AHK.Hotkey_IfWinActive(System.String,System.String,System.String,System.String)">
            <summary>Context sensitive Hotkeys, enabled when specific window is active.</summary>
            <param name="KeyName">Name of the hotkey's activation key, including any modifier symbols. For example, specify #c for the Win+C hotkey. If KeyName already exists as a hotkey, that hotkey will be updated with the values of the command's other parameters. KeyName can also be the name of an existing hotkey label (i.e. a double-colon label), which will cause that hotkey to be updated with the values of the command's other parameters. When specifying an existing hotkey, KeyName is not case sensitive. However, the names of keys must be spelled the same as in the existing hotkey (e.g. Esc is not the same as Escape for this purpose). Also, the order of modifier symbols such as ^!+# does not matter. The current IfWin setting determines the variant of a hotkey upon which the Hotkey command will operate. If the variant does not yet exist, it will be created. When a hotkey is first created -- either by the Hotkey command or a double-colon label in the script -- its key name and the ordering of its modifier symbols becomes the permanent name of that hotkey as reflected by A_ThisHotkey. This name does not change even if the Hotkey command later accesses the hotkey with a different symbol ordering. </param>
            <param name="Label">The label name whose contents will be executed (as a new thread) when the hotkey is pressed. Both normal labels and hotkey/hotstring labels can be used. The trailing colon(s) should not be included. If Label is dynamic (e.g. %VarContainingLabelName%), IsLabel(VarContainingLabelName) may be called beforehand to verify that the label exists. This parameter can be left blank if KeyName already exists as a hotkey, in which case its label will not be changed. This is useful to change only the hotkey's Options. If the label is specified but the hotkey is disabled from a previous use of this command, the hotkey will remain disabled. To prevent this, include the word ON in Options. This parameter can also be one of the following special values: On: The hotkey becomes enabled. No action is taken if the hotkey is already On. Off: The hotkey becomes disabled. No action is taken if the hotkey is already Off. Toggle: The hotkey is set to the opposite state (enabled or disabled). AltTab (and others): These are special Alt-Tab hotkey actions that are described here. Note: The current IfWin setting determines the variant of a hotkey upon which On/Off/Toggle will operate.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
        </member>
        <member name="M:sharpAHK._AHK.Hotkey_IfWinExist(System.String,System.String,System.String,System.String)">
            <summary>Context sensitive Hotkeys, enabled when specific window exists.</summary>
            <param name="KeyName">Name of the hotkey's activation key, including any modifier symbols. For example, specify #c for the Win+C hotkey. If KeyName already exists as a hotkey, that hotkey will be updated with the values of the command's other parameters. KeyName can also be the name of an existing hotkey label (i.e. a double-colon label), which will cause that hotkey to be updated with the values of the command's other parameters. When specifying an existing hotkey, KeyName is not case sensitive. However, the names of keys must be spelled the same as in the existing hotkey (e.g. Esc is not the same as Escape for this purpose). Also, the order of modifier symbols such as ^!+# does not matter. The current IfWin setting determines the variant of a hotkey upon which the Hotkey command will operate. If the variant does not yet exist, it will be created. When a hotkey is first created -- either by the Hotkey command or a double-colon label in the script -- its key name and the ordering of its modifier symbols becomes the permanent name of that hotkey as reflected by A_ThisHotkey. This name does not change even if the Hotkey command later accesses the hotkey with a different symbol ordering. </param>
            <param name="Label">The label name whose contents will be executed (as a new thread) when the hotkey is pressed. Both normal labels and hotkey/hotstring labels can be used. The trailing colon(s) should not be included. If Label is dynamic (e.g. %VarContainingLabelName%), IsLabel(VarContainingLabelName) may be called beforehand to verify that the label exists. This parameter can be left blank if KeyName already exists as a hotkey, in which case its label will not be changed. This is useful to change only the hotkey's Options. If the label is specified but the hotkey is disabled from a previous use of this command, the hotkey will remain disabled. To prevent this, include the word ON in Options. This parameter can also be one of the following special values: On: The hotkey becomes enabled. No action is taken if the hotkey is already On. Off: The hotkey becomes disabled. No action is taken if the hotkey is already Off. Toggle: The hotkey is set to the opposite state (enabled or disabled). AltTab (and others): These are special Alt-Tab hotkey actions that are described here. Note: The current IfWin setting determines the variant of a hotkey upon which On/Off/Toggle will operate.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
        </member>
        <member name="M:sharpAHK._AHK.ListHotkeys">
            <summary>Displays the hotkeys in use by the current script, whether their subroutines are currently running, and whether or not they use the keyboard or mouse hook.</summary>
        </member>
        <member name="M:sharpAHK._AHK.IniDelete(System.String,System.String,System.String)">
            <summary>Deletes a value from a standard format .ini file.</summary>
            <param name="Filename">The name of the .ini file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Section">The section name in the .ini file, which is the heading phrase that appears in square brackets (do not include the brackets in this parameter). </param>
            <param name="Key">The key name in the .ini file. If omitted, the entire Section will be deleted.</param>
        </member>
        <member name="M:sharpAHK._AHK.IniRead(System.String,System.String,System.String,System.String)">
            <summary>Reads a value from a standard format .ini file.</summary>
            <param name="Filename">The name of the .ini file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Section">The section name in the .ini file, which is the heading phrase that appears in square brackets (do not include the brackets in this parameter).</param>
            <param name="Key">The key name in the .ini file.</param>        
            <param name="Default">The value to store in OutputVar if the requested key is not found. If omitted, it defaults to the word ERROR. To store a blank value (empty string), specify %A_Space%.</param>
        </member>
        <member name="M:sharpAHK._AHK.IniWrite(System.String,System.String,System.String,System.String)">
            <summary>Writes a value to a standard format .ini file.</summary>
            <param name="Value">The string or number that will be written to the right of Key's equal sign (=). If the text is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.</param>
            <param name="Filename">The name of the .ini file, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified.</param>
            <param name="Section">The section name in the .ini file, which is the heading phrase that appears in square brackets (do not include the brackets in this parameter).</param>
            <param name="Key">The key name in the .ini file.</param>        
        </member>
        <member name="M:sharpAHK._AHK.URL_Read(System.String)">
            <summary>
            Reads .URL File (Essential an INI File) and Returns Web Address
            </summary>
            <param name="URLFile">FilePath to .URL File to Read</param>
            <returns>Returns Link Found in .URL File</returns>
        </member>
        <member name="M:sharpAHK._AHK.URL_Write(System.String,System.String,System.String)">
            <summary>
            Writes .URL File (Essentiall an INI File) with Link to WebSite
            </summary>
            <param name="linkName">Name of the Site to Save Link To</param>
            <param name="SaveDir">Directory to Save New URL File To</param>
            <param name="linkURL">WebSite Address to Write to new URL File</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.InLIST(System.Collections.Generic.List{System.String},System.String,System.Boolean)" -->
        <member name="M:sharpAHK._AHK.ListADD(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>Checks if AddItem already exists in LIST, adds to existing list if NOT in LIST</summary>
            <param name="LIST">List of strings to add new distinct item to</param>
            <param name="AddItem">Item to add to LIST if not already in LIST</param>
            <param name="CaseSensitive">Determines whether AddItem value must match LIST item's case exactly before excluding as existing item. False would add "haVe" and "HAVe" as different item values.</param>
        </member>
        <member name="M:sharpAHK._AHK.ListSEARCH(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>Returns List with items containing SearchText</summary>
            <param name="LIST">List of items to search for items containing SearchText</param>
            <param name="SearchText">Return list of items containg SearchText in list item</param>
            <param name="CaseSensitive">Determines list item must contain same case as SearchText before adding to return list</param>
            <returns>Returns original list minus excluded items list values</returns>
        </member>
        <member name="M:sharpAHK._AHK.ListREMOVE(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>Removes list of items passed in to remove from Original list - subtracting unwanted items</summary>
            <param name="OriginalList">List of items to search and remove items from</param>
            <param name="RemoveItems">List of items to remove from Original List</param>
            <param name="CaseSensitive">Determines whether RemoveItem must match item in Original list's case before excluding from return list</param>
            <returns>Returns original list minus excluded items list values</returns>
        </member>
        <member name="M:sharpAHK._AHK.ListREMOVE_Item(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>Removes list of exclude items from the original list - subtracting unwanted items</summary>
            <param name="OriginalList">List of items to search and remove items from</param>
            <param name="RemoveItem">List item to remove from existing list</param>
            <param name="CaseSensitive">Determines whether RemoveItem must match item in Original list's case before excluding from return list</param>
            <returns>Returns list with all items except RemoveItem</returns>
        </member>
        <member name="M:sharpAHK._AHK.ListREMOVE_Containing(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>Return list that does not contain any items with TextToExclude in itemstring</summary>
            <param name="OriginalList">List of items to search and remove items from</param>
            <param name="ExcludeText">Return list excluding items containing this text</param>
            <param name="CaseSensitive">Determines whether ExcludeText must be case sensitive match to OriginalList item before removing</param>
        </member>
        <member name="M:sharpAHK._AHK.ListMERGE(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>Returns new list merging two lists together, with the option to exclude duplicate items</summary>
            <param name="MainList">Existing list to add to</param>
            <param name="AddList">List to add to MainList, returning combined list</param>
            <param name="ExcludeDuplicates">Option to not add items from AddList already found in MainList</param>
            <param name="CaseSensitive">When ExcludeDuplicates is True, determines whether AddList item must match MainList item's case before excluding from merged list</param>
            <returns>Returns new list merging two lists together, with the option to exclude duplicate items</returns>
        </member>
        <member name="M:sharpAHK._AHK.ListDIFF(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Compare two lists, return values found in List A NOT Found in List B</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_ItemPosition(System.Collections.Generic.List{System.String},System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_Int_ItemPosition(System.Collections.Generic.List{System.Int32},System.Int32)" -->
        <member name="M:sharpAHK._AHK.List_ItemValue(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>Return value of LIST item by Position # in List</summary>
            <param name="LIST">List to return item value from</param>
            <param name="ListPosition">Item # in LIST to Return Value From</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.Return_List_ValueInt(System.Collections.Generic.List{System.Int32},System.Int32)" -->
        <member name="M:sharpAHK._AHK.List_FirstItem(System.Collections.Generic.List{System.String})">
            <summary>Returns First Item added to LIST</summary>
            <param name="LIST">List to return First Item Value From</param>
            <returns>Returns first item in LIST, Returns NULL if no items in LIST</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.Last_List_Item(System.Collections.Generic.List{System.String})" -->
        <member name="M:sharpAHK._AHK.List_LastItem(System.Collections.Generic.List{System.String})">
            <summary>Returns Last Item added to LIST</summary>
            <param name="LIST">List to return Last Item Value From</param>
            <returns>Returns last item in LIST, Returns NULL if no items in LIST</returns>
        </member>
        <member name="M:sharpAHK._AHK.List_ToString(System.Collections.Generic.List{System.String},System.String)">
            <summary>Return list split by SplitChar (ex: ",") as new string</summary>
            <param name="LIST">List to convert to string</param>
            <param name="SplitChar">Character to place between list items in string return</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_ToStringLines(System.Collections.Generic.List{System.String})" -->
        <member name="M:sharpAHK._AHK.Text_ToList(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Converts text from a text file to string List</summary>
            <param name="TextString"> </param>
            <param name="SkipBlankLines"> </param>
            <param name="Trim"> </param>
            <param name="SkipCommentLines"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Text_ToListInt(System.String,System.Boolean,System.Boolean)">
            <summary>Converts numbers from a text file to int List</summary>
            <param name="TextString"> </param>
            <param name="SkipBlankLines"> </param>
            <param name="SkipCommentLines"> </param>
        </member>
        <member name="M:sharpAHK._AHK.TextFile_ToList(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Read text file, return string List</summary>
            <param name="FilePath"> </param>
            <param name="SkipBlankLines"> </param>
            <param name="Trim"> </param>
            <param name="SkipCommentLines"> </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.TextFile_ToListInt(System.String)" -->
        <member name="M:sharpAHK._AHK.Array_ToList(System.String[])">
            <summary>Convert Array[] to List</summary>
            <param name="arr">Array to convert to List</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_ToArray(System.Collections.Generic.List{System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.Dict_KeyList(System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.Dict_KeyListInt(System.Collections.Generic.Dictionary{System.Int32,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.Dict_ValueList(System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <member name="M:sharpAHK._AHK.Dict_ValueListInt(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>Returns list of string Dictionary Values</summary>
            <param name="Dictionary"> </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.DirList_Images(System.String,System.Boolean)" -->
        <member name="M:sharpAHK._AHK.FileList_SortedAlpha_ByFileName(System.String,System.String,System.Boolean)">
            <summary>loop through multiple folders, return files meeting search criteria, sort files by FileName regardless of directory path, return sorted list of full file paths as list</summary>
            <param name="DirPath"> </param>
            <param name="ExtTypes"> </param>
            <param name="Recurse"> </param>
        </member>
        <member name="M:sharpAHK._AHK.FileList_SortedSize(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns List of Files (Default sorted largest to smallest) size
            </summary>
            <param name="DirPath">Folder Path</param>
            <param name="ExtTypes">File Extentions to Search For</param>
            <param name="Descending">Largest to Smallest FileSize</param>
            <param name="Recurse">Search into SubFolders</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.FileList_Modified_Today(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.FileList_Modified_Since(System.String,System.DateTime,System.String,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:sharpAHK._AHK.List_Drives">
             Drives
            <summary>Returns list of drive letters (C:\ etc) visible on this pc</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_ToCSV(System.Collections.Generic.List{System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.CSV_ToList(System.String,System.String)" -->
        <member name="M:sharpAHK._AHK.ControlList(System.Windows.Forms.Control)">
            <summary>Returns List of Controls on a Form as a Control List</summary>
            <param name="FormName">WinForm to return list of Controls From</param>
        </member>
        <member name="M:sharpAHK._AHK.ProcessList(System.String)">
            <summary>Returns List of ALL Processes Running on PC - If ProcessName Provided then Returns All Processes with that ProcessName</summary>
            <param name="ProcessName">Optional parameter to return all processes with this process name</param>
        </member>
        <member name="M:sharpAHK._AHK.WinTitles_By_ProcessName(System.String,System.Boolean)">
            <summary>Returns List of all WinTitles with ProcessName</summary>
            <param name="processName">Name of process to seach for</param>
        </member>
        <member name="M:sharpAHK._AHK.Letters(System.String)">
            <summary>
            Returns List of Alphabet (to loop). If Start Letter Provided, Will Return All Letters Starting with That One
            </summary>
            <param name="StartLetter"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_To_Grid(System.Windows.Forms.DataGridView,System.Collections.Generic.List{System.String},System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_To_GridInt(System.Windows.Forms.DataGridView,System.Collections.Generic.List{System.Int32},System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_To_TreeView(System.Windows.Forms.TreeView,System.Collections.Generic.List{System.String},System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_To_TreeViewInt(System.Windows.Forms.TreeView,System.Collections.Generic.List{System.Int32},System.String,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_To_ComboBox(System.Windows.Forms.ComboBox,System.Collections.Generic.List{System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_To_ComboBoxInt(System.Windows.Forms.ComboBox,System.Collections.Generic.List{System.Int32})" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_To_ListBox(System.Windows.Forms.ListBox,System.Collections.Generic.List{System.String},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.List_To_ListBoxInt(System.Windows.Forms.ListBox,System.Collections.Generic.List{System.Int32})" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.TreeViewList(System.Windows.Forms.TreeView,System.Collections.Generic.List{System.String},System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:sharpAHK._AHK.TreeViewList_Int(System.Windows.Forms.TreeView,System.Collections.Generic.List{System.Int32},System.String)" -->
        <member name="M:sharpAHK._AHK.Random(System.String,System.String)">
            <summary>Generates a pseudo-random number.</summary>
            <param name="Min">The smallest number that can be generated, which can be negative, floating point, or an expression. If omitted, the smallest number will be 0. The lowest allowed value is -2147483648 for integers, but floating point numbers have no restrictions.</param>
            <param name="Max">The largest number that can be generated, which can be negative, floating point, or an expression. If omitted, the largest number will be 2147483647 (which is also the largest allowed integer value -- but floating point numbers have no restrictions).</param>
        </member>
        <member name="M:sharpAHK._AHK.Random_NewSeed(System.String)">
            <summary>Reseeding can improve the quality/security of generated random numbers - affects all subsequently generated random numbers.</summary>
            <param name="NewSeed">This mode reseeds the random number generator with NewSeed (which can be an expression). This affects all subsequently generated random numbers. NewSeed should be an integer between 0 and 4294967295 (0xFFFFFFFF). Reseeding can improve the quality/security of generated random numbers, especially when NewSeed is a genuine random number rather than one of lesser quality such as a pseudo-random number. Generally, reseeding does not need to be done more than once. If reseeding is never done by the script, the seed starts off as the low-order 32-bits of the 64-bit value that is the number of 100-nanosecond intervals since January 1, 1601. This value travels from 0 to 4294967295 every ~7.2 minutes.</param>
        </member>
        <member name="M:sharpAHK._AHK.SetFormat(System.String,System.String)">
            <summary>Sets the format of integers and floating point numbers generated by math operations.</summary>
            <param name="NumberType">Must be either IntegerFast, FloatFast, Integer, or Float</param>
            <param name="Format">For NumberType Integer or IntegerFast, specify H or HEX for hexadecimal, or D for decimal. Hexadecimal numbers all start with the prefix 0x (e.g. 0xFF).  For NumberType Float or FloatFast, specify TotalWidth.DecimalPlaces (e.g. 0.6). In v1.0.46.11+, the letter "e" may be appended to produce scientific notation; e.g. 0.6e or 0.6E (using uppercase produces an uppercase E in each number instead of lowercase). Note: In AutoHotkey 1.x, scientific notation must include a decimal point; e.g. 1.0e1 is valid but not 1e1. TotalWidth is typically 0 to indicate that number should not have any blank or zero padding. If a higher value is used, numbers will be padded with spaces or zeroes (see remarks) to make them that wide. DecimalPlaces is the number of decimal places to display (rounding will occur). If blank or zero, neither a decimal portion nor a decimal point will be displayed, that is, floating point results are displayed as integers rather than a floating point number. The starting default is 6. Padding: If TotalWidth is high enough to cause padding, spaces will be added on the left side; that is, each number will be right-justified. To use left-justification instead, precede TotalWidth with a minus sign. To pad with zeroes instead of spaces, precede TotalWidth with a zero (e.g. 06.2).</param>
        </member>
        <member name="M:sharpAHK._AHK.Transform(System.String,System.String,System.String)">
            <summary>Performs miscellaneous math functions, bitwise operations, and tasks such as ASCII/Unicode conversion.</summary>
            <param name="Cmd">See AHK Documentation For Options</param>
            <param name="Value1">See AHK Documentation For Options</param>
            <param name="Value2">See AHK Documentation For Options</param>
        </member>
        <member name="M:sharpAHK._AHK.Remainder(System.Int32,System.Int32)">
            <summary>
            Returns the Remainder Value when Dividing Value, ex: 10/3 = remainder of 1
            </summary>
            <param name="ValueToDivide">Whole Number to Divide</param>
            <param name="DivideBy">Value to Divide ValueToDivide by</param>
            <returns>Returns Remaining Values that won't define evenly</returns>
        </member>
        <member name="M:sharpAHK._AHK.SysGet(System.String,System.String)">
            <summary>Retrieves screen resolution, multi-monitor info, dimensions of system objects, and other system properties.</summary>
            <param name="SubCommand">MonitorCount | MonitorPrimary | Monitor, N | MonitorWorkArea, N | (See Documentation For Numeric Options)</param>
            <param name="Param3">Additional Param for SysGet</param>
        </member>
        <member name="M:sharpAHK._AHK.MonitorCount">
            <summary>Retrieves the total number of monitors. Unlike SM_CMONITORS mentioned in the table below, MonitorCount includes all monitors, even those not being used as part of the desktop. On Windows 95/NT the count is always 1.</summary>
        </member>
        <member name="M:sharpAHK._AHK.MonitorPrimary">
            <summary>Retrieves the number of the primary monitor, which will be 1 in a single-monitor system. On Windows 95/NT the primary monitor is always 1.</summary>
        </member>
        <member name="M:sharpAHK._AHK.SysGet_Monitor(System.String)">
            <summary>Retrieves the bounding coordinates of monitor number N (if MonitorNumber is omitted, the primary monitor is used). The information is stored in four variables whose names all start with OutputVar. If N is too high or there is a problem retrieving the info, the variables are all made blank. .</summary>
            <param name="MonitorNumber">If Omitted, the primary monitor is used</param>
        </member>
        <member name="M:sharpAHK._AHK.SysGet_MonitorName(System.String)">
            <summary>Retrieves the bounding coordinates of monitor number N (if N is omitted, the primary monitor is used). The information is stored in four variables whose names all start with OutputVar. If N is too high or there is a problem retrieving the info, the variables are all made blank. .</summary>
            <param name="MonitorNumber">If Omitted, the primary monitor is used</param>
        </member>
        <member name="M:sharpAHK._AHK.Click(System.String)">
            <summary>Clicks a mouse button at the specified coordinates.</summary>
            <param name="Command">Ex: Right 44, 55 | Down | 44, 55</param>
            <example>ahk.Click("Right 45, 55");</example>
        </member>
        <member name="M:sharpAHK._AHK.CoordMode(System.String,System.Boolean)">
            <summary>Sets coordinate mode for various commands to be relative to either the active window or the screen.</summary>
            <param name="Mode">ToolTip (Affects ToolTip)| Pixel (Affects PixelGetColor, PixelSearch, and ImageSearch)| Mouse (Affects MouseGetPos, Click, and MouseMove/Click/Drag)| Caret (Affects the built-in variables A_CaretX and A_CaretY)| Menu (Affects the "Menu Show" command when coordinates are specified for it)</param>
            <param name="RelativeToScreen"> True: Coordinates are relative to the desktop (entire screen). | False: Coordinates are relative to the active window</param>
        </member>
        <member name="M:sharpAHK._AHK.MouseCoordMode(System.String)">
            <summary>Sets coordinate mode for mouse commands to be relative to either the active window or the screen. Affects MouseGetPos, Click, and MouseMove/Click/Drag.</summary>
            <param name="RelativeToScreen"> Leave BLANK to simply return current Mouse CoordMode. | "True" to set the CoordMode relative to Screen. | "False" (Default) to set CoordMode relative to Window</param>
        </member>
        <member name="F:sharpAHK._AHK._MouseCoordMode">
            <summary>
            Tracks current mouse cood mode value to return from MouseCoodMode()
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.MouseClick(sharpAHK._AHK.MouseButton,System.Object,System.Object,System.Boolean,System.Object,System.Object,sharpAHK._AHK.MouseState,System.Boolean)">
            <summary>Clicks or holds down a mouse button, or turns the mouse wheel.</summary>
            <param name="button">The button to click: Left (default), Right, Middle (or just the first letter of each of these); or the fourth or fifth mouse button (X1 or X2), which are supported on Windows 2000/XP or later. For example: MouseClick, X1. This parameter may be omitted, in which case it defaults to Left. | Rotate the mouse wheel: On Windows NT/2000/XP or later, specify WheelUp or WU to turn the wheel upward (away from you); specify WheelDown or WD to turn the wheel downward (toward you). In v1.0.48+, specify WheelLeft (or WL) or WheelRight (or WR) to push the wheel left or right, respectively (but these have no effect on operating systems older than Windows Vista). ClickCount is the number of notches to turn the wheel.</param>
            <param name="X">The x/y coordinates to which the mouse cursor is moved prior to clicking, which can be expressions. Coordinates are relative to the active window unless CoordMode was used to change that. If omitted, the cursor's current position is used.</param>
            <param name="Y">The x/y coordinates to which the mouse cursor is moved prior to clicking, which can be expressions. Coordinates are relative to the active window unless CoordMode was used to change that. If omitted, the cursor's current position is used.</param>
            <param name="ClickCount">The number of times to click the mouse, which can be an expression.  If omitted, the button is clicked once. </param>
            <param name="Speed">The speed to move the mouse in the range 0 (fastest) to 100 (slowest), which can be an expression.  Note: a speed of 0 will move the mouse instantly.  If omitted, the default speed (as set by SetDefaultMouseSpeed or 2 otherwise) will be used.</param>
            <param name="D_U">D = Press the mouse button down but do not release it (i.e. generate a down-event). | U = Release the mouse button (i.e. generate an up-event). </param>
            <param name="R">If this parameter is the letter R, the X and Y coordinates will be treated as offsets from the current mouse position. In other words, the cursor will be moved from its current position by X pixels to the right (left if negative) and Y pixels down (up if negative).</param>
        </member>
        <member name="M:sharpAHK._AHK.MouseClickDrag(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Clicks and holds the specified mouse button, moves the mouse to the destination coordinates, then releases the button.</summary>
            <param name="WhichButton">The button to click: Left, Right, Middle (or just the first letter of each of these). The fourth and fifth mouse buttons are supported on Windows 2000/XP or later: Specify X1 for the fourth button and X2 for the fifth. For example: MouseClickDrag, X1, ...</param>
            <param name="X1">The x/y coordinates of the drag's starting position, which can be expressions (the mouse will be moved to these coordinates right before the drag is started). Coordinates are relative to the active window unless CoordMode was used to change that. If omitted, the mouse's current position is used.</param>
            <param name="Y1">The x/y coordinates of the drag's starting position, which can be expressions (the mouse will be moved to these coordinates right before the drag is started). Coordinates are relative to the active window unless CoordMode was used to change that. If omitted, the mouse's current position is used.</param>
            <param name="X2">The x/y coordinates to drag the mouse to (that is, while the button is held down), which can be expressions. Coordinates are relative to the active window unless CoordMode was used to change that. </param>
            <param name="Y2">The x/y coordinates to drag the mouse to (that is, while the button is held down), which can be expressions. Coordinates are relative to the active window unless CoordMode was used to change that. </param>
            <param name="Speed">The speed to move the mouse in the range 0 (fastest) to 100 (slowest), which can be an expression.  Note: a speed of 0 will move the mouse instantly.  If omitted, the default speed (as set by SetDefaultMouseSpeed or 2 otherwise) will be used.</param>
            <param name="R">If this parameter is the letter R, the X1 and Y1 coordinates will be treated as offsets from the current mouse position. In other words, the cursor will be moved from its current position by X1 pixels to the right (left if negative) and Y1 pixels down (up if negative). Similarly, the X2 and Y2 coordinates will be treated as offsets from the X1 and Y1 coordinates. For example, the following would first move the cursor down and to the right by 5 pixels from its starting position, and then drag it from that position down and to the right by 10 pixels: MouseClickDrag, Left, 5, 5, 10, 10, , R </param>
        </member>
        <member name="M:sharpAHK._AHK.MouseGetPos(System.String)">
            <summary>Retrieves the current position of the mouse cursor, and optionally which window and control it is hovering over.</summary>
            <param name="Opt">BLANK or 1 Populate ControlClassNN, 2 and 3 Populate ControlHwnd | 1: Uses a simpler method to determine OutputVarControl. This method correctly retrieves the active/topmost child window of an Multiple Document Interface (MDI) application such as SysEdit or TextPad. However, it is less accurate for other purposes such as detecting controls inside a GroupBox control. | 2: Stores the control's HWND in OutputVarControl rather than the control's ClassNN. | 3: A combination of 1 and 2 </param>
        </member>
        <member name="M:sharpAHK._AHK.MouseMove(System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>Moves the mouse cursor.</summary>
            <param name="X">The x/y coordinates to move the mouse to, which can be expressions. Coordinates are relative to the active window unless CoordMode was used to change that.</param>
            <param name="Y">The x/y coordinates to move the mouse to, which can be expressions. Coordinates are relative to the active window unless CoordMode was used to change that.</param>
            <param name="Speed">The speed to move the mouse in the range 0 (fastest) to 100 (slowest), which can be an expression.  Note: a speed of 0 will move the mouse instantly.  If omitted, the default speed (as set by SetDefaultMouseSpeed or 2 otherwise) will be used.</param>
            <param name="OffSetFromCurrentPos">If this parameter is True, the X and Y coordinates will be treated as offsets from the current mouse position. In other words, the cursor will be moved from its current position by X pixels to the right (left if negative) and Y pixels down (up if negative).</param>
        </member>
        <member name="M:sharpAHK._AHK.SetDefaultMouseSpeed(System.String)">
            <summary>Sets the mouse speed that will be used if unspecified in Click and MouseMove/Click/Drag.</summary>
            <param name="Speed">The speed to move the mouse in the range 0 (fastest) to 100 (slowest).  Note: a speed of 0 will move the mouse instantly. This parameter can be an expression.</param>
        </member>
        <member name="M:sharpAHK._AHK.SetMouseDelay(System.String,System.String)">
            <summary>Sets the delay that will occur after each mouse movement or click.</summary>
            <param name="Delay">Time in milliseconds, which can be an expression. Use -1 for no delay at all and 0 for the smallest possible delay (however, if the Play parameter is present, both 0 and -1 produce no delay). If unset, the default delay is 10 for the traditional SendEvent mode and -1 for SendPlay mode.</param>
            <param name="Play">The word Play applies the delay to the SendPlay mode rather than the traditional Send/SendEvent mode. If a script never uses this parameter, the delay is always -1 for SendPlay.</param>
        </member>
        <member name="M:sharpAHK._AHK.process(System.String,System.String,System.String)">
            <summary>Performs one of the following operations on a process: checks if it exists; changes its priority; closes it; waits for it to close.</summary>
            <param name="Cmd">Exist | Close | List | Priority | Wait | WaitClose</param>
            <param name="PIDorName">This parameter can be either a number (the PID) or a process name as described below. It can also be left blank to change the priority of the script itself.</param>
            <param name="Param3">See AHK Documentation For Options</param>
        </member>
        <member name="M:sharpAHK._AHK.Run(System.String,System.String,System.String)">
            <summary>Runs an external program.</summary>
            <param name="Target">A document, URL, executable file (.exe, .com, .bat, etc.), shortcut (.lnk), or system verb to launch (see remarks). If Target is a local file and no path was specified with it, A_WorkingDir will be searched first. If no matching file is found there, the system will search for and launch the file if it is integrated ("known"), e.g. by being contained in one of the PATH folders. To pass parameters, add them immediately after the program or document name. If a parameter contains spaces, it is safest to enclose it in double quotes (even though it may work without them in some cases).</param>
            <param name="WorkingDir">The working directory for the launched item. Do not enclose the name in double quotes even if it contains spaces. If omitted, the script's own working directory (A_WorkingDir) will be used. </param>
            <param name="MinMaxHideUseErrorLevel">Max: launch maximized | Min: launch minimized | Hide: launch hidden | UseErrorLevel: If the launch fails, this option skips the warning dialog, sets ErrorLevel to the word ERROR, and allows the current thread to continue. </param>
            <returns>Returns OutputVarPID as string</returns>
        </member>
        <member name="M:sharpAHK._AHK.RunWait(System.String,System.String,System.String)">
            <summary>Runs an external program. RunWait will wait until the program finishes before continuing.</summary>
            <param name="Target">A document, URL, executable file (.exe, .com, .bat, etc.), shortcut (.lnk), or system verb to launch (see remarks). If Target is a local file and no path was specified with it, A_WorkingDir will be searched first. If no matching file is found there, the system will search for and launch the file if it is integrated ("known"), e.g. by being contained in one of the PATH folders. To pass parameters, add them immediately after the program or document name. If a parameter contains spaces, it is safest to enclose it in double quotes (even though it may work without them in some cases).</param>
            <param name="WorkingDir">The working directory for the launched item. Do not enclose the name in double quotes even if it contains spaces. If omitted, the script's own working directory (A_WorkingDir) will be used. </param>
            <param name="MinMaxHideUseErrorLevel">Max: launch maximized | Min: launch minimized | Hide: launch hidden | UseErrorLevel: If the launch fails, this option skips the warning dialog, sets ErrorLevel to the word ERROR, and allows the current thread to continue. </param>
            <returns>Returns OutputVarPID as string</returns>
        </member>
        <member name="M:sharpAHK._AHK.RunAs(System.String,System.String,System.String)">
            <summary>Specifies a set of user credentials to use for all subsequent uses of Run and RunWait. Requires Windows 2000/XP or later.</summary>
            <param name="User">If this and the other parameters are all omitted, the RunAs feature will be turned off, which restores Run and RunWait to their default behavior. Otherwise, this is the username under which new processes will be created. </param>
            <param name="Password">User's password.</param>
            <param name="Domain">User's domain. To use a local account, leave this blank. If that fails to work, try using @YourComputerName.</param>
        </member>
        <member name="M:sharpAHK._AHK.Shutdown(System.String)">
            <summary>Shuts down, restarts, or logs off the system.</summary>
            <param name="Code">A combination of shutdown codes:  LogOff = 0 | ShutDown = 1 | Reboot = 2 | Force = 4 | Power Down = 8</param>
        </member>
        <member name="M:sharpAHK._AHK.ProcessPath(System.Object)">
            <summary>
            Returns exe path of window by WinTitle or WinHandle
            </summary>
            <param name="WinTitle"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.RunOrActivate(System.String,System.String)">
            <summary>
            Either Activate or Launch Application
            </summary>
            <param name="WinTitle">WinTitle to Activate / Look For</param>
            <param name="Path">Application Path to Launch</param>
        </member>
        <member name="M:sharpAHK._AHK.RegDelete(System.String,System.String,System.String)">
            <summary>Deletes a subkey or value from the registry.</summary>
            <param name="RootKey">Must be either HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER, HKEY_CLASSES_ROOT, or HKEY_CURRENT_CONFIG (or the abbreviations for each of these, such as HKLM). To access a remote registry, prepend the computer name and a colon, as in this example: \\workstation01:HKEY_LOCAL_MACHINE</param>
            <param name="SubKey">The name of the subkey (e.g. Software\SomeApplication).</param>
            <param name="ValueName">The name of the value to delete. If omitted, the entire SubKey will be deleted. To delete Subkey's default value -- which is the value displayed as "(Default)" by RegEdit -- use the phrase AHK_DEFAULT for this parameter. </param>
            <returns>Returns True if No ErrorLevel</returns>
        </member>
        <member name="M:sharpAHK._AHK.RegRead(System.String,System.String,System.String)">
            <summary>Reads a value from the registry.</summary>
            <param name="RootKey">Must be either HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER, HKEY_CLASSES_ROOT, or HKEY_CURRENT_CONFIG (or the abbreviations for each of these, such as HKLM). To access a remote registry, prepend the computer name and a colon, as in this example: \\workstation01:HKEY_LOCAL_MACHINE</param>
            <param name="SubKey">The name of the subkey (e.g. Software\SomeApplication).</param>
            <param name="ValueName">The name of the value to retrieve. If omitted, Subkey's default value will be retrieved, which is the value displayed as "(Default)" by RegEdit. If there is no default value (that is, if RegEdit displays "value not set"), OutputVar is made blank and ErrorLevel is set to 1.</param>
        </member>
        <member name="M:sharpAHK._AHK.RegWrite(System.String,System.String,System.String,System.String,System.String)">
            <summary>Writes a value to the registry.</summary>
            <param name="ValueType">Must be either REG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ, REG_DWORD, or REG_BINARY. </param>
            <param name="RootKey">Must be either HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER, HKEY_CLASSES_ROOT, or HKEY_CURRENT_CONFIG (or the abbreviations for each of these, such as HKLM). To access a remote registry, prepend the computer name and a colon, as in this example: \\workstation01:HKEY_LOCAL_MACHINE</param>
            <param name="SubKey">The name of the subkey (e.g. Software\SomeApplication). If SubKey does not exist, it is created (along with its ancestors, if necessary). If SubKey is left blank, the value is written directly into RootKey (though some operating systems might refuse to write in HKEY_CURRENT_USER's top level).</param>
            <param name="ValueName">The name of the value that will be written to. If blank or omitted, Subkey's default value will be used, which is the value displayed as "(Default)" by RegEdit.</param>
            <param name="Value">The value to be written. If omitted, it will default to an empty (blank) string, or 0, depending on ValueType. If the text is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.</param>
            <returns>Returns True if No ErrorLevel</returns>
        </member>
        <member name="M:sharpAHK._AHK.SoundBeep(System.Object,System.Object)">
            <summary>Emits a tone from the PC speaker.</summary>
            <param name="Frequency">The frequency of the sound, which can be an expression. It should be a number between 37 and 32767. If omitted, the frequency will be 523.</param>
            <param name="Duration">The duration of the sound, in milliseconds (can be an expression). If omitted, the duration will be 150.</param>
        </member>
        <member name="M:sharpAHK._AHK.SoundGet(System.String,System.String,System.String)">
            <summary>Retrieves various settings from a sound device (master mute, master volume, etc.)</summary>
            <param name="ComponentType">If omitted or blank, it defaults to the word MASTER. Otherwise, it can be one of the following words: MASTER (synonymous with SPEAKERS), DIGITAL, LINE, MICROPHONE, SYNTH, CD, TELEPHONE, PCSPEAKER, WAVE, AUX, ANALOG, HEADPHONES, or N/A. If the sound device lacks the specified ComponentType, ErrorLevel will indicate the problem. The component labled Auxiliary in some mixers might be accessible as ANALOG rather than AUX. If a device has more than one instance of ComponentType (two of type LINE, for example), usually the first contains the playback settings and the second contains the recording settings. To access an instance other than the first, append a colon and a number to this parameter. For example: Analog:2 is the second instance of the analog component.</param>
            <param name="ControlType">If omitted or blank, it defaults to VOLUME. Otherwise, it can be one of the following words: VOLUME (or VOL), ONOFF, MUTE, MONO, LOUDNESS, STEREOENH, BASSBOOST, PAN, QSOUNDPAN, BASS, TREBLE, EQUALIZER, or the number of a valid control type (see soundcard analysis script). If the specified ComponentType lacks the specified ControlType, ErrorLevel will indicate the problem.</param>
            <param name="DeviceNumber">If this parameter is omitted, it defaults to 1 (the first sound device), which is usually the system's default device for recording and playback. Specify a number higher than 1 to operate upon a different sound device. This parameter can be an expression.</param>
        </member>
        <member name="M:sharpAHK._AHK.SoundGetWaveVolume(System.String)">
            <summary>Retrieves the wave output volume for a sound device.</summary>
            <param name="DeviceNumber">If this parameter is omitted, it defaults to 1 (the first sound device), which is usually the system's default device for recording and playback. Specify a number higher than 1 to operate upon a different sound device.</param>
        </member>
        <member name="M:sharpAHK._AHK.SoundPlay(System.String,System.Boolean)">
            <summary>Plays a sound, video, or other supported file type.</summary>
            <param name="Filename">The name of the file to be played, which is assumed to be in %A_WorkingDir% if an absolute path isn't specified. To produce standard system sounds, specify an asterisk followed by a number as shown below. Note: the wait parameter has no effect in this mode. *-1: Simple beep. If the sound card is not available, the sound is generated using the speaker. *16: Hand (stop/error) *32: Question *48: Exclamation *64: Asterisk (info) </param>
            <param name="WaitUntilFinished">If False, the script's current thread will move on to the next commmand(s) while the file is playing. To avoid this, set Wait to TRUE, which causes the current thread to wait until the file is finished playing before continuing. Even while waiting, new threads can be launched via hotkey, custom menu item, or timer. Known limitation: If the WAIT parameter is omitted, the OS might consider the playing file to be "in use" until the script closes or until another file is played (even a nonexistent file).</param>
        </member>
        <member name="M:sharpAHK._AHK.SoundSet(System.String,System.String,System.String,System.String)">
            <summary>Changes various settings of a sound device (master mute, master volume, etc.)</summary>
            <param name="NewSetting">Percentage number between -100 and 100 inclusive (it can be a floating point number or expression). If the number begins with a plus or minus sign, the current setting will be adjusted up or down by the indicated amount. Otherwise, the setting will be set explicitly to the level indicated by NewSetting. For ControlTypes with only two possible settings -- namely ONOFF, MUTE, MONO, LOUDNESS, STEREOENH, and BASSBOOST -- any positive number will turn on the setting and a zero will turn it off. However, if the number begins with a plus or minus sign, the setting will be toggled (set to the opposite of its current state).</param>
            <param name="ComponentType">If omitted or blank, it defaults to the word MASTER. Otherwise, it can be one of the following words: MASTER (synonymous with SPEAKERS), DIGITAL, LINE, MICROPHONE, SYNTH, CD, TELEPHONE, PCSPEAKER, WAVE, AUX, ANALOG, HEADPHONES, or N/A. If the sound device lacks the specified ComponentType, ErrorLevel will indicate the problem. The component labeled Auxiliary in some mixers might be accessible as ANALOG rather than AUX. If a device has more than one instance of ComponentType (two of type LINE, for example), usually the first contains the playback settings and the second contains the recording settings. To access an instance other than the first, append a colon and a number to this parameter. For example: Analog:2 is the second instance of the analog component.</param>
            <param name="ControlType">If omitted or blank, it defaults to VOLUME. Otherwise, it can be one of the following words: VOLUME (or VOL), ONOFF, MUTE, MONO, LOUDNESS, STEREOENH, BASSBOOST, PAN, QSOUNDPAN, BASS, TREBLE, EQUALIZER, or the number of a valid control type (see soundcard analysis script). If the specified ComponentType lacks the specified ControlType, ErrorLevel will indicate the problem.</param>
            <param name="DeviceNumber">If this parameter is omitted, it defaults to 1 (the first sound device), which is usually the system's default device for recording and playback. Specify a number higher than 1 to operate upon a different sound device. This parameter can be an expression.</param>
        </member>
        <member name="M:sharpAHK._AHK.SoundSetWaveVolume(System.String,System.String)">
            <summary>Changes the wave output volume for a sound device.</summary>
            <param name="Percent">Percentage number between -100 and 100 inclusive (it can be a floating point number or an expression). If the number begins with a plus or minus sign, the current volume level will be adjusted up or down by the indicated amount. Otherwise, the volume will be set explicitly to the level indicated by Percent.</param>
            <param name="DeviceNumber">If this parameter is omitted, it defaults to 1 (the first sound device), which is usually the system's default device for recording and playback. Specify a number higher than 1 to operate upon a different sound device.</param>
        </member>
        <member name="M:sharpAHK._AHK.FormatTime(System.String,System.String)">
            <summary>Transforms a YYYYMMDDHH24MISS timestamp into the specified date/time format.</summary>
            <param name="YYYYMMDDHH24MISS">Leave this parameter blank to use the current local date and time. Otherwise, specify all or the leading part of a timestamp in the YYYYMMDDHH24MISS format. If the date and/or time portion of the timestamp is invalid -- such as February 29th of a non-leap year -- the date and/or time will be omitted from OutputVar. Although only years between 1601 and 9999 are supported, a formatted time can still be produced for earlier years as long as the time portion is valid.</param>
            <param name="Format">If omitted, it defaults to the time followed by the long date, both of which will be formatted according to the current user's locale. For example: 4:55 PM Saturday, November 27, 2004 Otherwise, specify one or more of the date-time formats below, along with any literal spaces and punctuation in between (commas do not need to be escaped; they can be used normally). In the following example, note that M must be capitalized: M/d/yyyy h:mm tt</param>
        </member>
        <member name="M:sharpAHK._AHK.StringCaseSense(System.String)">
            <summary>Determines whether string comparisons are case sensitive (default is "not case sensitive").</summary>
            <param name="OnOffLocale">On: String comparisons are case sensitive. This setting also makes the expression equal sign operator (=) and the case-insensitive mode of InStr() use the locale method described below. Off (starting default): The letters A-Z are considered identical to their lowercase counterparts. This is the starting default for all scripts due to backward compatibility and performance (Locale is 1 to 8 times slower than Off depending on the nature of the strings being compared). Locale [v1.0.43.03+]: String comparisons are case insensitive according to the rules of the current user's locale. For example, most English and Western European locales treat not only the letters A-Z as identical to their lowercase counterparts, but also ANSI letters like Ä and Ü as identical to theirs. </param>
        </member>
        <member name="M:sharpAHK._AHK.StringGetPos(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the position of the specified substring within a string.</summary>
            <param name="InputVar">The name of the input variable, whose contents will be searched. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="SearchText">The string to search for. Matching is not case sensitive unless StringCaseSense has been turned on. </param>
            <param name="LR">This affects which occurrence will be found if SearchText occurs more than once within InputVar. If this parameter is omitted, InputVar will be searched starting from the left for the first match. If this parameter is 1 or the letter R, the search will start looking at the right side of InputVar and will continue leftward until the first match is found. To find a match other than the first, specify the letter L or R followed by the number of the occurrence. For example, to find the fourth occurrence from the right, specify r4. Note: If the number is less than or equal to zero, no match will be found.</param>
            <param name="Offset">The number of characters on the leftmost or rightmost side (depending on the parameter above) to skip over. If omitted, the default is 0. For example, the following would start searching at the tenth character from the left: StringGetPos, OutputVar, InputVar, abc, , 9. This parameter can be an expression.</param>
        </member>
        <member name="M:sharpAHK._AHK.StringLeft(System.String,System.Object)">
            <summary>Retrieves a number of characters from the left-hand side of a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be extracted from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="Count">The number of characters to extract, which can be an expression. If Count is less than or equal to zero, OutputVar will be made empty (blank). If Count exceeds the length of InputVar, OutputVar will be set equal to the entirety of InputVar.</param>
        </member>
        <member name="M:sharpAHK._AHK.StringRight(System.String,System.Object)">
            <summary>Retrieves a number of characters from the right-hand side of a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be extracted from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="Count">The number of characters to extract, which can be an expression. If Count is less than or equal to zero, OutputVar will be made empty (blank). If Count exceeds the length of InputVar, OutputVar will be set equal to the entirety of InputVar.</param>
        </member>
        <member name="M:sharpAHK._AHK.StringLen(System.String)">
            <summary>Retrieves the count of how many characters are in a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be measured. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
        </member>
        <member name="M:sharpAHK._AHK.StringLower(System.String,System.Boolean)">
            <summary>Converts a string to lowercase.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="ProperCase">If this parameter is True, the string will be converted to title case. For example, "GONE with the WIND" would become "Gone With The Wind". </param>
        </member>
        <member name="M:sharpAHK._AHK.StringUpper(System.String,System.Boolean)">
            <summary>Converts a string to uppercase.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="ProperCase">If this parameter is True, the string will be converted to title case. For example, "GONE with the WIND" would become "Gone With The Wind". </param>
        </member>
        <member name="M:sharpAHK._AHK.StringMid(System.String,System.String,System.String,System.String)">
            <summary>Retrieves one or more characters from the specified position in a string.</summary>
            <param name="InputVar">The name of the variable from whose contents the substring will be extracted. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="StartChar">The position of the first character to be extracted, which can be an expression. Unlike StringGetPos, 1 is the first character. If StartChar is less than 1, it will be assumed to be 1. If StartChar is beyond the end of the string, OutputVar is made empty (blank).</param>
            <param name="Count"> this parameter may be omitted or left blank, which is the same as specifying an integer large enough to retrieve all characters from the string. Otherwise, specify the number of characters to extract, which can be an expression. If Count is less than or equal to zero, OutputVar will be made empty (blank). If Count exceeds the length of InputVar measured from StartChar, OutputVar will be set equal to the entirety of InputVar starting at StartChar.</param>
            <param name="L">The letter L can be used to extract characters that lie to the left of StartChar rather than to the right. In the following example, OutputVar will be set to Red: InputVar = The Red Fox StringMid, OutputVar, InputVar, 7, 3, L If the L option is present and StartChar is less than 1, OutputVar will be made blank. If StartChar is beyond the length of InputVar, only those characters within reach of Count will be extracted. For example, the below will set OutputVar to Fox: InputVar = The Red Fox StringMid, OutputVar, InputVar, 14, 6, L</param>
        </member>
        <member name="M:sharpAHK._AHK.StringReplace(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Replaces the specified substring with a new string.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="SearchText">The string to search for. Matching is not case sensitive unless StringCaseSense has been turned on.</param>
            <param name="ReplaceText">SearchText will be replaced with this text. If omitted or blank, SearchText will be replaced with blank (empty). In other words, it will be omitted from OutputVar.</param>
            <param name="ReplaceAll">If omitted, only the first occurrence of SearchText will be replaced. But if this parameter is 1, A, or All, all occurrences will be replaced. Specify the word UseErrorLevel to store in ErrorLevel the number of occurrences replaced (0 if none). UseErrorLevel implies "All".</param>
        </member>
        <member name="M:sharpAHK._AHK.StringTrimLeft(System.String,System.String)">
            <summary>Removes a number of characters from the left-hand side of a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="Count">The number of characters to remove, which can be an expression. If Count is less than or equal to zero, OutputVar will be set equal to the entirety of InputVar. If Count exceeds the length of InputVar, OutputVar will be made empty (blank).</param>
        </member>
        <member name="M:sharpAHK._AHK.StringTrimRight(System.String,System.String)">
            <summary>Removes a number of characters from the right-hand side of a string.</summary>
            <param name="InputVar">The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the contents of the variable to be used as the name.</param>
            <param name="Count">The number of characters to remove, which can be an expression. If Count is less than or equal to zero, OutputVar will be set equal to the entirety of InputVar. If Count exceeds the length of InputVar, OutputVar will be made empty (blank).</param>
        </member>
        <member name="M:sharpAHK._AHK.IfInString(System.String,System.String)">
            <summary>Checks if a string contains the specified string.</summary>
            <param name="Text">Text to search for SearchString</param>
            <param name="SearchString">The string to search for. Matching is not case sensitive unless StringCaseSense has been turned on.</param>
        </member>
        <member name="M:sharpAHK._AHK.IfNotInString(System.String,System.String)">
            <summary>Checks if a string contains the specified string.</summary>
            <param name="Text">Text to search for SearchString</param>
            <param name="SearchString">The string to search for. Matching is not case sensitive unless StringCaseSense has been turned on.</param>
        </member>
        <member name="M:sharpAHK._AHK.Sort(System.String,System.String)">
            <summary>Arranges a variable's contents in alphabetical, numerical, or random order (optionally removing duplicates).</summary>
            <param name="Text">String whose contents will be sorted.</param>
            <param name="Options">C = Case Sensitive Sort | CL = Case Insensitive sort based on User's Locale | Dx = Specifies x as the delimiter character, which determins where each item in the Text begins and ends (default = newline) | F MyFunction = uses custom sorting according to the criteria in MyFunction | N = Numeric Sort | Pn = Sorts items based on character position n | R = Sorts in reverse order | Random = Sorts in random order | U = Removes Duplicates | Z = Last linefeed is considered to be part of the last item</param>
        </member>
        <member name="M:sharpAHK._AHK.Remove_Numbers(System.String)">
            <summary>Removes Numbers from String</summary>
            <param name="InString"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Remove_Letters(System.String)">
            <summary>
            Remove Letters from String
            </summary>
            <param name="InString"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.UnHtml(System.String)">
            <summary>Remove HTML characters from string</summary>
            <param name="HTML">HTML to strip</param>
        </member>
        <member name="M:sharpAHK._AHK.FixSpecialChars(System.String)">
            <summary>Format string to be compatible with SQL/SQLite Inserts</summary>
            <param name="str"> </param>
        </member>
        <member name="M:sharpAHK._AHK.CharCount(System.String,System.String)">
            <summary>Returns the number of times a character is found in a string</summary>
            <param name="Line"> </param>
            <param name=" Char"> </param>
        </member>
        <member name="M:sharpAHK._AHK.TrimFirst(System.String,System.Int32)">
            <summary>Remove X Characters from beginning of string</summary>
            <param name="str"> </param>
            <param name="RemoveCharacterCount"> </param>
        </member>
        <member name="M:sharpAHK._AHK.TrimLast(System.String,System.Int32)">
            <summary>Remove X Characters from end of string</summary>
            <param name="str"> </param>
            <param name="RemoveCharacterCount"> </param>
        </member>
        <member name="M:sharpAHK._AHK.TrimLeadingZeros(System.String)">
            <summary>
            Trims 0's from beginning of string 
            </summary>
            <param name="Text">String to trim leading zeros from</param>
            <returns>Returns string minus leading zeroes</returns>
        </member>
        <member name="M:sharpAHK._AHK.TrimEndIf(System.String,System.String)">
            <summary>
            Trim ending characters from string if they exist, returns string without ending chars
            </summary>
            <param name="Text"></param>
            <param name="ToTrim"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.TrimLeadingChars(System.String,System.String)">
            <summary>
            Trims all of a specific leading character from the from beginning of string { UNTESTED }
            </summary>
            <param name="Text"></param>
            <param name="Char"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.FirstCharacters(System.String,System.Int32)">
            <summary>Returns first X characters in string</summary>
            <param name="Text"> </param>
            <param name="NumberOfCharacters"> </param>
        </member>
        <member name="M:sharpAHK._AHK.LastCharacters(System.String,System.Int32)">
            <summary>Returns last X characters in string</summary>
            <param name="Text"> </param>
            <param name="NumberOfCharacters"> </param>
        </member>
        <member name="M:sharpAHK._AHK.FirstWord(System.String)">
            <summary>Returns First word in string</summary>
            <param name="InputString"> </param>
        </member>
        <member name="M:sharpAHK._AHK.LastWord(System.String)">
            <summary>Returns last word in string</summary>
            <param name="InputString"> </param>
        </member>
        <member name="M:sharpAHK._AHK.WordNum(System.String,System.Int32)">
            <summary>Return specific word # from string</summary>
            <param name="InputString"> </param>
            <param name="WordNumber"> </param>
        </member>
        <member name="M:sharpAHK._AHK.WordList(System.String)">
            <summary>Parse line by space, returns list of words</summary>
            <param name="InputString"> </param>
        </member>
        <member name="M:sharpAHK._AHK.WordCount(System.String)">
            <summary>
            Returns # of Words in String
            </summary>
            <param name="Text">String to check word count</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.LineList(System.String,System.Boolean,System.Boolean)">
            <summary>Parse line by new line, returns list of lines</summary>
            <param name="InputString"> </param>
            <param name="Trim"> </param>
            <param name="RemoveBlanks"> </param>
        </member>
        <member name="M:sharpAHK._AHK.RemoveComments(System.String,System.String)">
            <summary>Returns code line without comments</summary>
            <param name="line"> </param>
            <param name="CommentCharacters"> </param>
        </member>
        <member name="M:sharpAHK._AHK.ReturnComments(System.String,System.String)">
            <summary>Returns comments on line after code</summary>
            <param name="line"> </param>
            <param name="CommentCharacters"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Extract_Between(System.String,System.String,System.String)">
            <summary>Extracts text between brackets</summary>
            <param name="Code"> </param>
            <param name="start"> </param>
            <param name="end"> </param>
        </member>
        <member name="M:sharpAHK._AHK.XML_TagText(System.String,System.String)">
            <summary>Extract text between <Tag> XML style tags </Tag></summary>
            <param name="XMLString">String to extract tag text from</param>
            <param name="Tag">Name of tag to return text between. Ex: <UserTag>About this Project</UserTag> returns "About this Project"</param>
        </member>
        <member name="M:sharpAHK._AHK.Insert_Text(System.String,System.String,System.Int32)">
            <summary>Insert text into specific position in string</summary>
            <param name="InText"> </param>
            <param name="InsertText"> </param>
            <param name="Position"> </param>
        </member>
        <member name="M:sharpAHK._AHK.StringSplit(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>Split string by character (return pos starts at word 0, final option overrides position to return last item)</summary>
            <param name="InText">Text to split</param>
            <param name="SplitChar">Character(s) to split string by</param>
            <param name="ReturnPos">Position # of the word(s) to return. Ex: ReturnPos 0 returns the text before the SplitChar is found, 1 returns the text after the first splitchar and before the 2nd splitchar</param>
            <param name="ReturnLast">Override for ReturnPos value - will return last value in split string</param>
            <param name="NoBlanks">Option to return next available value if ReturnPos value is blank</param>
        </member>
        <member name="M:sharpAHK._AHK.StringSplit_List(System.String,System.String,System.Boolean)">
            <summary>Split string by character, Returns List of values separated by the SplitChar</summary>
            <param name="InText">Text to split</param>
            <param name="SplitChar">Character(s) to split string by</param>
            <param name="SkipBlanks">Default Option To Not Return Blank Values in Return List</param>
        </member>
        <member name="M:sharpAHK._AHK.AddLeadingZeros(System.Object,System.Int32)">
            <summary>Add leading zeros to an int/string, ex: InNumber 12 with TotalReturnLength 5 returns string "00012"</summary>
            <param name="InNumber">Original number (int or string) to add leading zeros to.</param>
            <param name="TotalReturnLength">Total # of desired digits, adding zeros in front of the InNumber to ensure return value is TotalReturnLength characters long.</param>
            <tested>True</tested>
        </member>
        <member name="M:sharpAHK._AHK.AddLeadingSpaces(System.String,System.Int32)">
            <summary>Add leading spaces before a string</summary>
            <param name="InText">Original string to add spaces</param>
            <param name="SpaceCount">Number of Spaces To Add to String</param>
        </member>
        <member name="M:sharpAHK._AHK.LeadingSpaceCount(System.String)">
            <summary>Returns number of leading spaces before text begins</summary>
            <param name="InText"> </param>
        </member>
        <member name="M:sharpAHK._AHK.ToTitleCase(System.String)">
            <summary>convert string to Proper casing -- Output: This Is A String Test</summary>
            <param name="InText"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Closest_FileName(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>Search list for Contains match - otherwise take close word match</summary>
            <param name="SearchTerm"> </param>
            <param name="SearchList"> </param>
            <param name="Debug"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Closest_Word(System.String,System.Collections.Generic.List{System.String})">
            <summary>Find the closest match in a list to search word</summary>
            <param name="SearchWord"> </param>
            <param name="WordList"> </param>
        </member>
        <member name="M:sharpAHK._AHK.Reverse(System.String)">
            <summary>Reverse Order of Characters in String</summary>
            <param name="StringToReverse">String to reverse</param>
        </member>
        <member name="M:sharpAHK._AHK.Encode(System.String)">
            <summary>
            Encodes Title Text into Database Compatible Storage
            </summary>
            <param name="TitleText"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.Decode(System.String)">
            <summary>
            Decodes Encoded Text into Display Text
            </summary>
            <param name="TitleText"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ObjStringFix(System.String)">
            <summary>
            Used for Object Strings Separated by '|' - this temporarily replaces with temp char to void parsing errors
            </summary>
            <param name="Text">Text Potentially Containing '|' to Replace</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ObjStringRestore(System.String)">
            <summary>
            Restores Object String Value, Adding Back Replaced Temp Character
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ObjStringToDict(System.String)">
            <summary>
            Convert Object String to Dictionary (object name, Col1, Val1, Col2...)
            </summary>
            <param name="ObjString"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ObjectStringDTs(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Convert List of ObjectStrings to DataTable
            </summary>
            <param name="ObjStrings"></param>
            <param name="Checked"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ObjStringDT(System.String)">
            <summary>
            Convert ObjectString to DataTable
            </summary>
            <param name="ObjString">ObjectString Format</param>
        </member>
        <member name="M:sharpAHK._AHK.ObjStringVarType(System.String)">
            <summary>
            Extract the ObjectType from ObjectString
            </summary>
            <param name="ObjString">ObjectString Format</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DTLoop_DtToDtLoop(System.Data.DataTable)">
            <summary>
            Convert DataTable to dtLoop List
            </summary>
            <param name="Table">DTLoop Table</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DTLoop_ToDT(System.Collections.Generic.List{sharpAHK._AHK.dtLoop})">
            <summary>
            Convert dtLoop List to DataTable
            </summary>
            <param name="LoopList">dtLoop List to Convert</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DTLoop_FromObjString(System.String)">
            <summary>
            Convert ObjString to DataTable
            </summary>
            <param name="RadGrid"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DTLoop_DtLoopFromObjString(System.String)">
            <summary>
            Convert ObjString to dtLoop List
            </summary>
            <param name="RadGrid"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DTLoop_CombineObjStrings(System.String,System.String)">
            <summary>
            Merge Two ObjString Lines from DTLoop Table
            </summary>
            <param name="MainObjString"></param>
            <param name="AddObjString"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DTLoop_FromObjStrings(System.Collections.Generic.List{System.String})">
            <summary>
            Convert List of ObjStrings to DataTable
            </summary>
            <param name="RadGrid"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DTLoop_ConditionMatch(System.Collections.Generic.List{sharpAHK._AHK.dtLoop},System.Collections.Generic.List{sharpAHK._AHK.dtLoop},System.Collections.Generic.List{sharpAHK._AHK.dtLoop}@,System.Boolean)">
            <summary>
            Loop Through List of dtLoop Values, Returns True if Conditions List Matches All Values in ValuesList
            </summary>
            <param name="Values">Dataset of Values</param>
            <param name="Conditions">Specific Values to Find and Match</param>
            <param name="RequireAllConditionsFound">All Conditions Must Be Found In ValueList In Order To Be True</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.DTLoop_DiffList(System.Collections.Generic.List{sharpAHK._AHK.dtLoop},System.Collections.Generic.List{sharpAHK._AHK.dtLoop})">
            <summary>
            Compare Two dtLoop Lists, Returns List of Value Differences
            </summary>
            <param name="BeforeList">Dataset of Values</param>
            <param name="AfterList">Specific Values to Find and Match</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ToBool(System.Object)">
            <summary>Converts String/Int To Bool Variable Type</summary>
            <param name="TrueFalseVar">String/Int to Convert</param>
            <returns>Returns BOOL Variable Type From Input String/Int</returns>
        </member>
        <member name="M:sharpAHK._AHK.ToInt(System.Object)">
            <summary>Converts String/Bool To Int Variable Type</summary>
            <param name="Input">String/Bool/IntPtr to Convert</param>
            <returns>Returns INT Variable Type From Input String/Bool/IntPtr</returns>
        </member>
        <member name="M:sharpAHK._AHK.ToIntPtr(System.Object)">
            <summary>convert string / int to IntPtr</summary>
            <param name="Input"> </param>
            <returns>Returns IntPtr Variable Type From Input String/Int</returns>
        </member>
        <member name="M:sharpAHK._AHK.IntPtr_ToString(System.Text.Encoding,System.IntPtr,System.Int32)">
            <summary>
            Convert IntPtr to String (Untested)
            </summary>
            <param name="encoding"></param>
            <param name="ptr"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.ToDateTime(System.Object)">
            <summary>Converts String/Int To DateTime Format</summary>
            <param name="TimeString">FileSize on Bytes</param>
            <returns>Returns DateTime Variable Type From TimeString</returns>
        </member>
        <member name="M:sharpAHK._AHK.FormatBytes(System.Object)">
            <summary>Returns a human-readable size discriptor for up 64-bit length fields (adds kb/mb/tb to return)</summary>
            <param name="fileBytes">FileSize on Bytes</param>
            <returns>Returns string with FileSize with Units (KB/MB/TB etc)</returns>
        </member>
        <member name="M:sharpAHK._AHK.ToBytes(System.String)">
            <summary>
            Converts Formated FileSize (ex: 42 MB) and Converts to Bytes
            </summary>
            <param name="FormattedFileSize">string with file size, ex: 32 KB/MB/GB/TB</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.Bytes_To_MB(System.Int64)">
            <summary>
            Convert Bytes to Megabytes
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.KB_To_MB(System.Int64)">
            <summary>
            Convert Kilobytes To Megabytes
            </summary>
            <param name="kilobytes"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.MB_To_GB(System.Double)">
            <summary>
            Convert Megabytes To Gigabytes
            </summary>
            <param name="megabytes"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.MB_To_TB(System.Double)">
            <summary>
            Convert Megabytes To Terabytes
            </summary>
            <param name="megabytes"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.GB_To_MB(System.Double)">
            <summary>
            Convert Gigabytes To Megabytes
            </summary>
            <param name="gigabytes"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.GB_To_TB(System.Double)">
            <summary>
            Convert Gigabytes To Terabytes
            </summary>
            <param name="gigabytes"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.TB_To_MB(System.Double)">
            <summary>
            Convert Terabytes To Megabytes
            </summary>
            <param name="terabytes"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.TB_To_GB(System.Double)">
            <summary>
            Convert Terabytes To Gigabytes
            </summary>
            <param name="terabytes"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.VarType(System.Object,System.Boolean)">
            <summary>
            Returns String With Variable Type Passed Into Object Parameter, Option to Display Type In MessageBox
            </summary>
            <param name="Object">Object To Check For Variable Type</param>
            <param name="DisplayVarType">Option to Display Results in MessageBox (Default = False)</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.IsVarType(System.Object,sharpAHK._AHK.varType,System.Boolean)">
            <summary>
            Pass in Object and Variable Type To Check For, Returns True if Matched
            </summary>
            <param name="Object"></param>
            <param name="TypeToCheck">Known Variable Type to Check For</param>
            <param name="DebugMsg">Displays Attempted VarType When Failed to Match Known Types</param>
            <returns></returns>
        </member>
        <member name="T:sharpAHK._AHK.varType">
            <summary>
            Known Variable Types to Use with IsVarType
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.String">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.Int32">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.Int64">
            <summary>
            System.Int64
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.Long">
            <summary>
            System.Long
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.Bool">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.DataTable">
            <summary>
            System.Data.DataTable
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.DateTime">
            <summary>
            System.DateTime
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.IntPtr">
            <summary>
            System.IntPtr
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.Double">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.ListString">
            <summary>
            System.Collections.Generic.List`1(System.String)
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.ListInt">
            <summary>
            System.Collections.Generic.List`1(System.Int32)
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.Button">
            <summary>
            System.Windows.Forms.Button
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.CheckBox">
            <summary>
            System.Windows.Forms.CheckBox
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.DataGridView">
            <summary>
            System.Windows.Forms.DataGridView
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.ListBox">
            <summary>
            System.Windows.Forms.ListBox
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.PictureBox">
            <summary>
            System.Windows.Forms.PictureBox
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.TabControl">
            <summary>
            System.Windows.Forms.TabControl
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.TabPage">
            <summary>
            System.Windows.Forms.TabPage
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.TableLayoutPanel">
            <summary>
            System.Windows.Forms.TableLayoutPanel
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.TextBox">
            <summary>
            System.Windows.Forms.TextBox
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadPanel">
            <summary>
            Telerik.WinControls.UI.RadPanel
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadProgressBar">
            <summary>
            Telerik.WinControls.UI.RadProgressBar
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.CommandBarSeparator">
            <summary>
            Telerik.WinControls.UI.CommandBarSeparator
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadRibbonBar">
            <summary>
            Telerik.WinControls.UI.RadRibbonBar
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RibbonTab">
            <summary>
            Telerik.WinControls.UI.RibbonTab
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadDock">
            <summary>
            Telerik.WinControls.UI.Docking.RadDock
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.DocumentContainer">
            <summary>
            Telerik.WinControls.UI.Docking.DocumentContainer
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadGalleryItem">
            <summary>
            Telerik.WinControls.UI.RadGalleryItem
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadTextBoxElement">
            <summary>
            Telerik.WinControls.UI.RadTextBoxElement
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadRibbonBarButtonGroup">
            <summary>
            Telerik.WinControls.UI.RadRibbonBarButtonGroup
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadDropDownButtonElement">
            <summary>
            Telerik.WinControls.UI.RadDropDownButtonElement
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadButtonElement">
            <summary>
            Telerik.WinControls.UI.RadButtonElement
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadRibbonBarGroup">
            <summary>
            Telerik.WinControls.UI.RadRibbonBarGroup
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadTextBox">
            <summary>
            Telerik.WinControls.UI.RadTextBox
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadGridView">
            <summary>
            Telerik.WinControls.UI.RadGridView
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadTreeView">
            <summary>
            Telerik.WinControls.UI.RadTreeView
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadMenu">
            <summary>
            Telerik.WinControls.UI.RadMenu
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadMenuItem">
            <summary>
            Telerik.WinControls.UI.RadMenuItem
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadNode">
            <summary>
            Telerik.WinControls.UI.RadNode
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadStatusStrip">
            <summary>
            Telerik.WinControls.UI.RadStatusStrip
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadLabelElement">
            <summary>
            Telerik.WinControls.UI.RadLabelElement
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadLabel">
            <summary>
            Telerik.WinControls.UI.RadLabel
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadMultiColumnComboBox">
            <summary>
            Telerik.WinControls.UI.RadMultiColumnComboBox
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadSplitContainer">
            <summary>
            Telerik.WinControls.UI.RadSplitContainer
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadButton">
            <summary>
            Telerik.WinControls.UI.RadButton
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.SplitPanel">
            <summary>
            Telerik.WinControls.UI.SplitPanel
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadDropDownButton">
            <summary>
            Telerik.WinControls.UI.RadDropDownButton
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadPageView">
            <summary>
            Telerik.WinControls.UI.RadPageView
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadPageViewPage">
            <summary>
            Telerik.WinControls.UI.RadPageViewPage
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadAutoCompleteBox">
            <summary>
            Telerik.WinControls.UI.RadAutoCompleteBox
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.RadDateTimePicker">
            <summary>
            Telerik.WinControls.UI.RadDateTimePicker
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.CommandBarRowElement">
            <summary>
            Telerik.WinControls.UI.CommandBarRowElement
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.CommandBarStripElement">
            <summary>
            Telerik.WinControls.UI.CommandBarStripElement
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.CommandBarToggleButton">
            <summary>
            Telerik.WinControls.UI.CommandBarToggleButton
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.varType.CommandBarButton">
            <summary>
            Telerik.WinControls.UI.CommandBarButton
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.AppDir(System.Boolean)">
            <summary>
            Directory path for the current application's exe. Used to find/create subfolders under your project
            </summary>
            <param name="openDir">Option to Open AppDir Folder (Default = False)</param>
            <returns>Returns path to current application's exe</returns>
        </member>
        <member name="M:sharpAHK._AHK.AppDriveLetter">
            <summary>
            Returns the Drive Letter the Current Application Is Running on 
            </summary>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.AppName">
            <summary>Returns the app name from the assembly info of application running</summary>
        </member>
        <member name="M:sharpAHK._AHK.DesktopDir(System.Boolean)">
            <summary>
            Returns path to user's desktop directory
            </summary>
            <param name="openDir">Option to Open Desktop Directory (Default = False - Only Returns Path)</param>
            <returns>Returns Directory Path to User's Desktop</returns>
        </member>
        <member name="M:sharpAHK._AHK.StartUpDir(System.Boolean)">
            <summary>
            Returns path to user's startup directory
            </summary>
            <param name="openDir">Option to Open User's StartUp Dir (Default = False - Only Returns Path)</param>
            <returns>Returns path to user's startup dir</returns>
        </member>
        <member name="M:sharpAHK._AHK.ComputerName">
            <summary>Returns user's computer name</summary>
        </member>
        <member name="M:sharpAHK._AHK.UserName">
            <summary>Returns user's Windows User name</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_WorkingDir(System.Boolean)">
            <summary>The script's current working directory, which is where files will be accessed by default. The final backslash is not included unless it is the root directory. Two examples: C:\ and C:\My Documents. Use SetWorkingDir to change the working directory.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ScriptDir(System.Boolean)">
            <summary>The full path of the directory where the current script is located. For backward compatibility with AutoIt v2, the final backslash is included only for .aut scripts (even for root directories).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ScriptName">
            <summary>The file name of the current script, without its path, e.g. MyScript.ahk.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ScriptFullPath">
            <summary>The combination of A_ScriptDir and A_ScriptName - gives the complete file specification of the script, e.g. C:\My Documents\My Script.ahk</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_LineNumber">
            <summary>The number of the currently executing line within the script (or one of its #Include files). This line number will match the one shown by ListLines; it can be useful for error reporting such as this example: MsgBox Could not write to log file (line number %A_LineNumber%).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_LineFile">
            <summary>The full path and name of the file to which A_LineNumber belongs, which will be the same as A_ScriptFullPath unless the line belongs to one of a non-compiled script's #Include files.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ThisFunc">
            <summary>The name of the user-defined function that is currently executing (blank if none); for example: MyFunction.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ThisLabel">
            <summary>The name of the label (subroutine) that is currently executing (blank if none); for example: MyLabel. It is updated whenever the script executes Gosub/Return or Goto. It is also updated for automatically-called labels such as timers, GUI threads, menu items, hotkeys, hotstrings, OnClipboardChange, and OnExit, However, A_ThisLabel is not updated when execution "falls into" a label from above; when that happens, A_ThisLabel retains its previous value. See also: A_ThisHotkey and IsLabel()</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_AhkVersion">
            <summary>In versions prior to 1.0.22, this variable is blank. Otherwise, it contains the version of AutoHotkey that is running the script, such as 1.0.22. In the case of a compiled script, the version that was originally used to compile it is reported. The formatting of the version number allows a script to check whether A_AhkVersion is greater than some minimum version number with > or >= as in this example: if A_AhkVersion >= 1.0.25.07</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_AhkPath">
            <summary>For non-compiled scripts: The full path and name of the EXE file that is actually running the current script. For example: C:\Program Files\AutoHotkey\AutoHotkey.exe</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IsCompiled">
            <summary>Contains 1 if the script is running as a compiled EXE and nothing if it is not.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ExitReason">
            <summary>The most recent reason the script was asked to terminate. This variable is blank unless the script has an OnExit subroutine and that subroutine is currently running or has been called at least once by an exit attempt. See OnExit for details.</summary>
        </member>
        <member name="M:sharpAHK._AHK.ExitApp">
            <summary>
            Exit Application
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.A_YYYY">
            <summary>Current 4-digit year (e.g. 2004). Synonymous with A_Year.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_MM">
            <summary>Current 2-digit month (01-12). Synonymous with A_Mon.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_DD">
            <summary>Current 2-digit day of the month (01-31). Synonymous with A_MDay.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_MMMM">
            <summary>Current month's full name in the current user's language, e.g. July</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_MMM">
            <summary>Current month's abbreviation in the current user's language, e.g. Jul</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_DDDD">
            <summary>Current day of the week's full name in the current user's language, e.g. Sunday</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_DDD">
            <summary>Current day of the week's 3-letter abbreviation in the current user's language, e.g. Sun</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_WDay">
            <summary>Current 1-digit day of the week (1-7). 1 is Sunday in all locales.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_YDay">
            <summary>Current day of the year (1-366). The value is not zero-padded, e.g. 9 is retrieved, not 009.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_YWeek">
            <summary>Current year and week number (e.g. 200453) according to ISO 8601.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Hour">
            <summary>Current 2-digit hour (00-23) in 24-hour time (for example, 17 is 5pm).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Min">
            <summary>Current 2-digit minute (00-59).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Sec">
            <summary>Current 2-digit second (00-59).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_MSec">
            <summary>Current 3-digit millisecond (000-999).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Now">
            <summary>The current local time in YYYYMMDDHH24MISS format.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_NowUTC">
            <summary>The current Coordinated Universal Time (UTC) in YYYYMMDDHH24MISS format. UTC is essentially the same as Greenwich Mean Time (GMT).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_TickCount">
            <summary>The Number of Milliseconds Since Computer Rebooted</summary>
        </member>
        <member name="M:sharpAHK._AHK.ahkReturn(System.String,System.String)">
            <summary>
            Execute AHK Command That Populates 'OutputVar', Returns Value From AHK Session
            </summary>
            <param name="ahkCommand">AutoHotkey Command to Execute</param>
            <param name="outVarName">Variable to return value from in AHK Session, Default = "OutputVar"</param>
            <returns>Returns Variable Value from AHK Session</returns>
        </member>
        <member name="M:sharpAHK._AHK.ahkReturnBool(System.String,System.String)">
            <summary>
            Returns AHK OutputVar Contents as Bool
            </summary>
            <param name="ahkCommand">AutoHotkey Command to Execute</param>
            <param name="outVarName">Variable to return value from in AHK Session, Default = "OutputVar"</param>
            <returns>Returns True/False From AHK Command as Bool</returns>
        </member>
        <member name="M:sharpAHK._AHK.ahkReturnInt(System.String,System.String)">
            <summary>
            Returns AHK OutputVar Contents as Int
            </summary>
            <param name="ahkCommand">AutoHotkey Command to Execute</param>
            <param name="outVarName">Variable to return value from in AHK Session, Default = "OutputVar"</param>
            <returns>Returns Value from AHK Command, Converts to Integer</returns>
        </member>
        <member name="M:sharpAHK._AHK.A_IsSuspended">
            <summary>Returns TRUE if script is suspended, otherwise FALSE</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IsPaused">
            <summary>Returns TRUE if the thread immediately underneath the current thread is paused. Otherwise returns FALSE.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IsCritical">
            <summary>Returns TRUE if the thread immediately underneath the current thread is paused. Otherwise returns FALSE.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_BatchLines">
            <summary>Synonymous with A_NumBatchLines - The current value as set by SetBatchLines. Examples: 200 or 10ms (depending on format)</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_TitleMatchMode">
            <summary>The current mode set by SetTitleMatchMode: 1, 2, 3, or RegEx.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_TitleMatchModeSpeed">
            <summary>The current match speed (fast or slow) set by SetTitleMatchMode.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_DetectHiddenWindows">
            <summary>The current mode (On or Off) set by DetectHiddenWindows.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_DetectHiddenText">
            <summary>The current mode (On or Off) set by DetectHiddenText.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_AutoTrim">
            <summary>The current mode (On or Off) set by AutoTrim.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_StringCaseSense">
            <summary>The current mode (On, Off, or Locale) set by StringCaseSense.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_FormatInteger">
            <summary>The current integer format (H or D) set by SetFormat.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_FormatFloat">
            <summary>The current floating point number format set by SetFormat.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_KeyDelay">
            <summary>The current delay set by SetKeyDelay (always decimal, not hex). This delay is for the traditional SendEvent mode, not SendPlay.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_WinDelay">
            <summary>The current delay set by SetWinDelay (always decimal, not hex).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ControlDelay">
            <summary>The current delay set by SetControlDelay (always decimal, not hex)</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_MouseDelay">
            <summary>The current delay set by SetMouseDelay (always decimal, not hex). This delay is for the traditional SendEvent mode, not SendPlay.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_DefaultMouseSpeed">
            <summary>The current speed set by SetDefaultMouseSpeed (always decimal, not hex).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IconHidden">
            <summary>Contains 1 if the tray icon is currently hidden or 0 otherwise. The icon can be hidden via #NoTrayIcon or the Menu command.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IconTip">
            <summary>Blank unless a custom tooltip for the tray icon has been specified via Menu, Tray, Tip -- in which case it's the text of the tip.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IconFile">
            <summary>Blank unless a custom tray icon has been specified via Menu, tray, icon -- in which case it's the full path and name of the icon's file.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IconNumber">
            <summary>Blank if A_IconFile is blank. Otherwise, it's the number of the icon in A_IconFile (typically 1)</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_TimeIdle">
            <summary>The number of milliseconds that have elapsed since the system last received keyboard, mouse, or other input. This is useful for determining whether the user is away. This variable will be blank unless the operating system is Windows 2000, XP, or beyond. Physical input from the user as well as artificial input generated by any program or script (such as the Send or MouseMove commands) will reset this value back to zero. Since this value tends to increase by increments of 10, do not check whether it is equal to another value. Instead, check whether it is greater or less than another value. For example: IfGreater, A_TimeIdle, 600000, MsgBox, The last keyboard or mouse activity was at least 10 minutes ago.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_TimeIdlePhysical">
            <summary>Similar to above but ignores artificial keystrokes and/or mouse clicks whenever the corresponding hook (keyboard or mouse) is installed; that is, it responds only to physical events. (This prevents simulated keystrokes and mouse clicks from falsely indicating that a user is present.) If neither hook is installed, this variable is equivalent to A_TimeIdle. If only one hook is installed, only its type of physical input affects A_TimeIdlePhysical (the other/non-installed hook's input, both physical and artificial, has no effect)</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Gui">
            <summary>The GUI window number that launched the current thread. This variable is blank unless a Gui control, menu bar item, or event such as GuiClose/GuiEscape launched the current thread.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_GuiControl">
            <summary>The name of the variable associated with the GUI control that launched the current thread. If that control lacks an associated variable, A_GuiControl instead contains the first 63 characters of the control's text/caption (this is most often used to avoid giving each button a variable name). A_GuiControl is blank whenever: 1) A_Gui is blank; 2) a GUI menu bar item or event such as GuiClose/GuiEscape launched the current thread; 3) the control lacks an associated variable and has no caption; or 4) The control that originally launched the current thread no longer exists (perhaps due to Gui Destroy).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_GuiWidth">
            <summary>Contain the GUI window's width when referenced in a GuiSize subroutine. They apply to the window's client area, which is the area excluding title bar, menu bar, and borders.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_GuiHeight">
            <summary>Contain the GUI window's height when referenced in a GuiSize subroutine. They apply to the window's client area, which is the area excluding title bar, menu bar, and borders.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_GuiX">
            <summary>Contains the X coordinate for GuiContextMenu and GuiDropFiles events. Coordinates are relative to the upper-left corner of the window.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_GuiY">
            <summary>Contains the Y coordinate for GuiContextMenu and GuiDropFiles events. Coordinates are relative to the upper-left corner of the window.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_GuiEvent">
            <summary>The type of event that launched the current thread. If the thread was not launched via GUI action, this variable is blank.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_EventInfo">
            <summary>Contains additional information about the following events: The OnClipboardChange label | Mouse wheel hotkeys (WheelDown/Up/Left/Right)  |  RegisterCallback() | GUI events, namely GuiContextMenu, GuiDropFiles, ListBox, ListView, TreeView, and StatusBar. If there is no additional information for an event, A_EventInfo contains 0.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ThisMenuItem">
            <summary>The name of the most recently selected custom menu item (blank if none).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ThisMenu">
            <summary>The name of the menu from which A_ThisMenuItem was selected.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ThisMenuItemPos">
            <summary>A number indicating the current position of A_ThisMenuItem within A_ThisMenu. The first item in the menu is 1, the second is 2, and so on. Menu separator lines are counted. This variable is blank if A_ThisMenuItem is blank or no longer exists within A_ThisMenu. It is also blank if A_ThisMenu itself no longer exists.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ThisHotkey">
            <summary>The key name of the most recently executed hotkey or non-auto-replace hotstring (blank if none), e.g. #z. This value will change if the current thread is interrupted by another hotkey, so be sure to copy it into another variable immediately if you need the original value for later use in a subroutine.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_PriorHotkey">
            <summary>Same as A_ThisHotkey except for the previous hotkey. It will be blank if none.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_TimeSinceThisHotkey">
            <summary>The number of milliseconds that have elapsed since A_ThisHotkey was pressed. It will be -1 whenever A_ThisHotkey is blank.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_TimeSincePriorHotkey">
            <summary>The number of milliseconds that have elapsed since A_PriorHotkey was pressed. It will be -1 whenever A_PriorHotkey is blank.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_EndChar">
            <summary>The ending character that was pressed by the user to trigger the most recent non-auto-replace hotstring. If no ending character was required (due to the * option), this variable will be blank.</summary>
        </member>
        <member name="M:sharpAHK._AHK.ComSpec">
            <summary>Contains the same string as the environment's ComSpec variable (e.g. C:\Windows\system32\cmd.exe). Often used with Run/RunWait.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Temp(System.Boolean)">
            <summary>The full path and name of the folder designated to hold temporary files (e.g. C:\DOCUME~1\UserName\LOCALS~1\Temp). It is retrieved from one of the following locations (in order): 1) the environment variables TMP, TEMP, or USERPROFILE; 2) the Windows directory. On Windows 9x, A_WorkingDir is returned if neither TMP nor TEMP exists.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_OSType">
            <summary>The type of Operating System being run.  Either WIN32_WINDOWS (i.e. Windows 95/98/ME) or WIN32_NT (i.e. Windows NT4/2000/XP/2003/Vista).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_OSVersion">
            <summary>One of the following strings: WIN_VISTA [requires v1.0.44.13+], WIN_2003, WIN_XP, WIN_2000, WIN_NT4, WIN_95, WIN_98, WIN_ME.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Language">
            <summary>The system's default language, which is one of these 4-digit codes.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ComputerName">
            <summary>The name of the computer as seen on the network.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_UserName">
            <summary>The logon name of the user who launched this script.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_WinDir(System.Boolean)">
            <summary>The Windows directory. For example: C:\Windows</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ProgramFiles(System.Boolean)">
            <summary>The Program Files directory (e.g. C:\Program Files).</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_AppData(System.Boolean)">
            <summary>The full path and name of the folder containing the current user's application-specific data. For example: C:\Documents and Settings\Username\Application Data</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_AppDataCommon(System.Boolean)">
            <summary>The full path and name of the folder containing the all-users application-specific data.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Desktop(System.Boolean)">
            <summary>A_Desktop The full path and name of the folder containing the current user's desktop files.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_DesktopCommon(System.Boolean)">
            <summary>The full path and name of the folder containing the all-users desktop files.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_StartMenu(System.Boolean)">
            <summary>The full path and name of the current user's Start Menu folder.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_StartMenuCommon(System.Boolean)">
            <summary>The full path and name of the all-users Start Menu folder.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Programs(System.Boolean)">
            <summary>The full path and name of the Programs folder in the current user's Start Menu.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_ProgramsCommon(System.Boolean)">
            <summary>The full path and name of the Programs folder in the all-users Start Menu.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Startup(System.Boolean)">
            <summary>The full path and name of the Startup folder in the current user's Start Menu.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_StartupCommon(System.Boolean)">
            <summary>The full path and name of the Startup folder in the all-users Start Menu.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_MyDocuments(System.Boolean)">
            <summary>The full path and name of the current user's "My Documents" folder. Unlike most of the similar variables, if the folder is the root of a drive, the final backslash is not included. For example, it would contain M: rather than M:\</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IsAdmin">
            <summary>If the current user has admin rights, returns TRUE. Otherwise, returns FALSE. Under Windows 95/98/Me, this variable always returns True</summary>
        </member>
        <member name="M:sharpAHK._AHK.ScreenWidth">
            <summary>Returns Width of Primary Monitor in Pixels (e.g. 1024 and 768).</summary>
        </member>
        <member name="M:sharpAHK._AHK.ScreenHeight">
            <summary>Returns Height of Primary Monitor, in Pixels (e.g. 1024 and 768)</summary>
            <returns>Returns Width as Int</returns>
        </member>
        <member name="M:sharpAHK._AHK.A_ScreenWidth">
            <summary>Returns Width of Primary Monitor in Pixels (e.g. 1024 and 768)</summary>
            <returns>Returns Width as String</returns>
        </member>
        <member name="M:sharpAHK._AHK.A_ScreenHeight">
            <summary>Returns Height of Primary Monitor, in Pixels (e.g. 1024 and 768)</summary>
            <returns>Returns Width as String</returns>
        </member>
        <member name="M:sharpAHK._AHK.A_IPAddress1">
            <summary>The IP addresses of the first 4 network adapters in the computer.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IPAddress2">
            <summary>The IP addresses of the first 4 network adapters in the computer.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IPAddress3">
            <summary>The IP addresses of the first 4 network adapters in the computer.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_IPAddress4">
            <summary>The IP addresses of the first 4 network adapters in the computer.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Space">
            <summary>This variable contains a single space character. See AutoTrim for details.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Tab">
            <summary>This variable contains a single tab character. See AutoTrim for details.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_Cursor">
            <summary>The type of mouse cursor currently being displayed. It will be one of the following words: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. The acronyms used with the size-type cursors are compass directions, e.g. NESW = NorthEast+SouthWest. The hand-shaped cursors (pointing and grabbing) are classified as Unknown.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_CaretX">
            <summary>The current X coordinate of the caret (text insertion point). The coordinates are relative to the active window unless CoordMode is used to make them relative to the entire screen. If there is no active window or the caret position cannot be determined, these variables are blank.</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_CaretY">
            <summary>The current Y coordinate of the caret (text insertion point). The coordinates are relative to the active window unless CoordMode is used to make them relative to the entire screen. If there is no active window or the caret position cannot be determined, these variables are blank.</summary>
        </member>
        <member name="M:sharpAHK._AHK.ErrorLevel">
            <summary>Value of Last Error Level Set by AHK</summary>
        </member>
        <member name="M:sharpAHK._AHK.A_LastError">
            <summary>The result from the OS's GetLastError() function. For details, see DllCall() and Run/RunWait.</summary>
        </member>
        <member name="M:sharpAHK._AHK.Download_HTML(System.String,System.String,System.String,System.String)">
            <summary>
            Downloads HTML string from URL path
            </summary>
            <param name="URL">URL to Download</param>
            <param name="SaveFile">Optional Local File Path to Save HTML To (Only Returns HTML as String if Blank)</param>
            <param name="login">Optional Login Parameter for URL</param>
            <param name="pass">Optional Password Parameter for URL</param>
            <returns>Returns HTML from Website as String</returns>
            <example>
            string HTML = ahk.Download_HTML("http://www.imdb.com/title/tt1985949/", "c:\\HTML.txt");
            </example>
        </member>
        <member name="M:sharpAHK._AHK.Download_File(System.String,System.String,System.Boolean)">
            <summary>
            Download File From Website
            </summary>
            <param name="remoteFileUrl">URL to File</param>
            <param name="localFileName">Local Save Path</param>
            <param name="SkipExisting">Option to Skip Downloading if Local File Already Exists</param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.AlwaysOnTop(System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>Makes a window stay on top of all other windows. Use ON to turn on the setting, OFF to turn it off, or TOGGLE to set it to the opposite of its current state. If omitted, it defaults to TOGGLE. The word Topmost can be used in place of AlwaysOnTop.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="On">Turn AlwaysOnTop On/Off</param>
            <param name="Toggle">Option to Toggle Current AlwaysOnTop State</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinSetBottom(System.String,System.String,System.String,System.String)">
            <summary>Sends a window to the bottom of stack; that is, beneath all other windows. The effect is similar to pressing Alt-Escape.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinSetTop(System.String,System.String,System.String,System.String)">
            <summary>Brings a window to the top of the stack without explicitly activating it. However, the system default settings will probably cause it to activate in most cases. In addition, this command may have no effect due to the operating system's protection against applications that try to steal focus from the user (it may depend on factors such as what type of window is currently active and what the user is currently doing). One possible work-around is to make the window briefly AlwaysOnTop, then turn off AlwaysOnTop.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinSetEnable(System.String,System.String,System.String,System.String)">
            <summary>Enables a window. When a window is disabled, the user cannot move it or interact with its controls. In addition, disabled windows are omitted from the alt-tab list.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinSetDisable(System.String,System.String,System.String,System.String)">
            <summary>Disables a window. When a window is disabled, the user cannot move it or interact with its controls. In addition, disabled windows are omitted from the alt-tab list.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinSetRedraw(System.String,System.String,System.String,System.String)">
            <summary>Attempts to update the appearance/contents of a window by informing the OS that the window's rectangle needs to be redrawn. If this method does not work for a particular window, try WinMove.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.DetectHiddenText(System.Boolean)">
            <summary>Determines whether invisible text in a window is "seen" for the purpose of finding the window. This affects commands such as IfWinExist and WinActivate.</summary>
            <param name="On">True (Default): Hidden text will be detected. False: This is the default for AutoIt v2 scripts. Hidden text is not detected.</param>
        </member>
        <member name="M:sharpAHK._AHK.DetectHiddenWindows(System.Boolean)">
            <summary>Determines whether invisible windows are "seen" by the script.</summary>
            <param name="On">True (Default): Hidden windows are detected. False: This is the default. Hidden windows are not detected, except by the WinShow command. </param>
        </member>
        <member name="M:sharpAHK._AHK.WinActive(System.String,System.String,System.String,System.String)">
            <summary>Checks if the specified window exists and is currently active (foremost).</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinNotActive(System.String,System.String,System.String,System.String)">
            <summary>Checks if the specified window exists and is currently active (foremost).</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinExist(System.String,System.String,System.String,System.String)">
            <summary>Checks if the specified window exists.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinNotExist(System.String,System.String,System.String,System.String)">
            <summary>Checks if the specified window exists.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.SetTitleMatchMode(System.String)">
            <summary>Sets the matching behavior of the WinTitle parameter in commands such as WinWait.</summary>
            <param name="Mode">One of the following digits or the word RegEx: 1: A window's title must start with the specified WinTitle to be a match. 2: A window's title can contain WinTitle anywhere inside it to be a match. 3: A window's title must exactly match WinTitle to be a match.</param>
        </member>
        <member name="M:sharpAHK._AHK.SetWinDelay(System.String)">
            <summary>Sets the delay that will occur after each windowing command, such as WinActivate.</summary>
            <param name="Delay">Time in milliseconds, which can be an expression. Use -1 for no delay at all and 0 for the smallest possible delay. If unset, the default delay is 100.</param>
        </member>
        <member name="M:sharpAHK._AHK.StatusBarGetText(System.String,System.String,System.String,System.String,System.String)">
            <summary>Retrieves the text from a standard status bar control.</summary>
            <param name="PartNum">Which part number of the bar to retrieve, which can be an expression. Default 1, which is usually the part that contains the text of interest.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.StatusBarWait(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>Waits until a window's status bar contains the specified string.</summary>
            <param name="BarText">The text or partial text for the which the command will wait to appear. Default is blank (empty), which means to wait for the status bar to become blank. The text is case sensitive and the matching behavior is determined by SetTitleMatchMode, similar to WinTitle below. To instead wait for the bar's text to change, either use StatusBarGetText in a loop, or use the RegEx example at the bottom of this page.</param>
            <param name="Seconds">The number of seconds (can contain a decimal point or be an expression) to wait before timing out, in which case ErrorLevel will be set to 1. Default is blank, which means wait indefinitely. Specifying 0 is the same as specifying 0.5.</param>
            <param name="PartNum">Which part number of the bar to retrieve, which can be an expression. Default 1, which is usually the part that contains the text of interest.</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinActivate(System.String,System.String,System.String,System.String)">
            <summary>Activates the specified window (makes it foremost).</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinActivateBottom(System.String,System.String,System.String,System.String)">
            <summary>Same as WinActivate except that it activates the bottommost (least recently active) matching window rather than the topmost.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinClose(System.String,System.String,System.String,System.String,System.String)">
            <summary>Closes the specified window.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="SecondsToWait">If omitted or blank, the command will not wait at all. If 0, it will wait 500ms. Otherwise, it will wait the indicated number of seconds (can contain a decimal point or be an expression) for the window to close. If the window does not close within that period, the script will continue. ErrorLevel is not set by this command, so use IfWinExist or WinWaitClose if you need to determine for certain that a window is closed. While the command is in a waiting state, new threads can be launched via hotkey, custom menu item, or timer.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinWaitClose(System.String,System.String,System.String,System.String,System.String)">
            <summary>Waits until the specified window does not exist.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="Seconds">How many seconds to wait before timing out and setting ErrorLevel to 1. Leave blank to wait indefinitely. Specifying 0 is the same as specifying 0.5. This parameter can be an expression.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK._WinGet(System.String,System.String,System.String,System.String,System.String)">
            <summary>Retrieves the specified window's unique ID, process ID, process name, or a list of its controls. It can also retrieve a list of all windows matching the specified criteria.</summary>
            <param name="Cmd">ID | IDLast | PID | ProcessName | Count | List | MinMax | ControlList | ControlListHwnd | Transparent | Transcolor | Style | ExStyle</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="T:sharpAHK._AHK.WinGetCmd">
            <summary>
            Options for WinGet Command
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.ID">
            <summary>
            Retrieves the unique ID number (HWND/handle) of a window. If there is no matching window, OutputVar is made blank. The functions WinExist() and WinActive() can also be used to retrieve the ID of a window; for example, WinExist("A") is a fast way to get the ID of the active window. To discover the HWND of a control (for use with Post/SendMessage or DllCall), use ControlGet Hwnd or MouseGetPos.
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.IDLast">
            <summary>
            Same as above except it retrieves the ID of the last/bottommost window if there is more than one match. If there is only one match, it performs identically to ID. This concept is similar to that used by WinActivateBottom.
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.PID">
            <summary>
            Retrieves the Process ID (PID) of a window.
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.ProcessName">
            <summary>
            Retrieves the name of the process (e.g. notepad.exe) that owns a window. If there are no matching windows, OutputVar is made blank.
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.Count">
            <summary>
            Retrieves the number of existing windows that match the specified WinTitle, WinText, ExcludeTitle, and ExcludeText (0 if none). To count all windows on the system, omit all four title/text parameters. Hidden windows are included only if DetectHiddenWindows has been turned on. 
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.List">
            <summary>
            Retrieves the unique ID numbers of all existing windows that match the specified WinTitle, WinText, ExcludeTitle, and ExcludeText (to retrieve all windows on the entire system, omit all four title/text parameters). Each ID number is stored in an array element whose name begins with OutputVar's own name, while OutputVar itself is set to the number of retrieved items (0 if none). For example, if OutputVar is MyArray and two matching windows are discovered, MyArray1 will be set to the ID of the first window, MyArray2 will be set to the ID of the second window, and MyArray itself will be set to the number 2. Windows are retrieved in order from topmost to bottommost (according to how they are stacked on the desktop). Hidden windows are included only if DetectHiddenWindows has been turned on. Within a function, to create an array that is global instead of local, declare MyArray as a global variable prior to using this command (the converse is true for assume-global functions).
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.MinMax">
            <summary>
            Retrieves the minimized/maximized state for a window. OuputVar is made blank if no matching window exists; otherwise, it is set to one of the following numbers:
            -1: The window is minimized (WinRestore can unminimize it). 
            1: The window is maximized(WinRestore can unmaximize it).
            0: The window is neither minimized nor maximized.
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.ControlList">
            <summary>
            Retrieves the control names for all controls in a window. If no matching window exists or there are no controls in the window, OutputVar is made blank. Otherwise, each control name consists of its class name followed immediately by its sequence number (ClassNN), as shown by Window Spy.
            Each item except the last is terminated by a linefeed (`n). To examine the individual control names one by one, use a parsing loop as shown in the examples section below.
            Controls are sorted according to their Z-order, which is usually the same order as TAB key navigation if the window supports tabbing.
            The control currently under the mouse cursor can be retrieved via MouseGetPos.
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.ControlListHwnd">
            <summary>
            Same as above except it retrieves the window handle (HWND) of each control rather than its ClassNN.
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.Transparent">
            <summary>
            Retrieves the degree of transparency of a window (see WinSet for how to set transparency). OutputVar is made blank if: 1) the OS is older than Windows XP; 2) there are no matching windows; 3) the window has no transparency level; or 4) other conditions (caused by OS behavior) such as the window having been minimized, restored, and/or resized since it was made transparent. Otherwise, a number between 0 and 255 is stored, where 0 indicates an invisible window and 255 indicates an opaque window. 
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.TransColor">
            <summary>
            Retrieves the color that is marked transparent in a window (see WinSet for how to set the TransColor). OutputVar is made blank if: 1) the OS is older than Windows XP; 2) there are no matching windows; 3) the window has no transparent color; or 4) other conditions (caused by OS behavior) such as the window having been minimized, restored, and/or resized since it was made transparent. Otherwise, a six-digit hexadecimal RGB color is stored, e.g. 0x00CC99.
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.Style">
            <summary>
            Retrieves an 8-digit hexadecimal number representing style or extended style (respectively) of a window. If there are no matching windows, OutputVar is made blank. The following example determines whether a window has the WS_DISABLED style:
            </summary>
        </member>
        <member name="F:sharpAHK._AHK.WinGetCmd.ExStyle">
            <summary>
            Retrieves an 8-digit hexadecimal number representing style or extended style (respectively) of a window. If there are no matching windows, OutputVar is made blank. The following example determines whether a window has the WS_DISABLED style:
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.Commands_WinGetCmd">
            <summary>
            Returns List of WinGet Commands (WinGetCmd)
            </summary>
            <returns>Returns List of WinGet Commands (WinGetCmd)</returns>
        </member>
        <member name="M:sharpAHK._AHK.WinGetID(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the specified window's unique AHK ID</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinGetPID(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the specified window's Process ID</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinGetActiveID(System.Boolean)">
            <summary>
            Returns the Active Window Handle
            </summary>
            <param name="ahkMethod">Option to switch between AHK Method and C# (C# ver Returned Matching ID Used in Win Functions)</param>
            <returns>Returns Handle of Active Window</returns>
        </member>
        <member name="M:sharpAHK._AHK.WinGetActiveStats">
            <summary>Combines the functions of WinGetActiveTitle and WinGetPos into one command.</summary>
            <returns>Returns winInfo Object with Window Dimentions etc</returns>
        </member>
        <member name="M:sharpAHK._AHK.WinGetActiveTitle(System.Boolean)">
            <summary>Retrieves the title of the active window.</summary>
        </member>
        <member name="M:sharpAHK._AHK.WinGetClass(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the specified window's class name.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinGetPos(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the position and size of the specified window.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>        
        </member>
        <member name="M:sharpAHK._AHK.WinGetText(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the text from the specified window.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>        
        </member>
        <member name="M:sharpAHK._AHK.WinGetTitle(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the title of the specified window.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>        
        </member>
        <member name="M:sharpAHK._AHK.WinHide(System.String,System.String,System.String,System.String)">
            <summary>Hides the specified window.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>        
        </member>
        <member name="M:sharpAHK._AHK.WinShow(System.String,System.String,System.String,System.String)">
            <summary>Unhides the specified window.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>        
        </member>
        <member name="M:sharpAHK._AHK.WinMaximize(System.String,System.String,System.String,System.String)">
            <summary>Enlarges the specified window to its maximum size.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>        
        </member>
        <member name="M:sharpAHK._AHK.WinMinimize(System.String,System.String,System.String,System.String)">
            <summary>Collapses the specified window into a button on the task bar.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>        
        </member>
        <member name="M:sharpAHK._AHK.WinKill(System.String,System.String,System.String,System.String,System.String)">
            <summary>Forces the specified window to close.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="SecondsToWait"> </param> 
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>/// 
        </member>
        <member name="M:sharpAHK._AHK.WinMinimizeAll">
            <summary>Minimizes all windows.</summary>
        </member>
        <member name="M:sharpAHK._AHK.WinMinimizeAllUndo">
            <summary>Unminimizes all windows.</summary>
        </member>
        <member name="M:sharpAHK._AHK.WinMove(System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.String,System.String)">
            <summary>Changes the position and/or size of the specified window.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="X">The X coordinates (in pixels) of the upper left corner of the target window's new location, which can be expressions. The upper-left pixel of the screen is at 0, 0. If these are the only parameters given with the command, the Last Found Window will be used as the target window.</param>
            <param name="Y">The Y coordinates (in pixels) of the upper left corner of the target window's new location, which can be expressions. The upper-left pixel of the screen is at 0, 0. If these are the only parameters given with the command, the Last Found Window will be used as the target window.</param>
            <param name="Width">The new width and height of the window (in pixels), which can be expressions. If either is omitted, blank, or the word DEFAULT, the size in that dimension will not be changed.</param>
            <param name="Height">The new width and height of the window (in pixels), which can be expressions. If either is omitted, blank, or the word DEFAULT, the size in that dimension will not be changed.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>/// 
        </member>
        <member name="M:sharpAHK._AHK.WinRestore(System.String,System.String,System.String,System.String)">
            <summary>Unminimizes or unmaximizes the specified window if it is minimized or maximized.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>/// 
        </member>
        <member name="M:sharpAHK._AHK.WinSet(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Makes a variety of changes to the specified window, such as "always on top" and transparency.</summary>
            <param name="Attribute">AlwaysOnTop | Bottom | Top | Disable | Enable | Redraw | Style | Region | Transparent | Transcolor </param>
            <param name="Value">See AHK Documentation For Options</param>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>        
        </member>
        <member name="M:sharpAHK._AHK.WinSetTitle(System.String,System.String,System.String,System.String,System.String)">
            <summary>Changes the title of the specified window.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="NewTitle">The new title for the window. If this is the only parameter given, the Last Found Window will be used.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>        
        </member>
        <member name="M:sharpAHK._AHK.WinWait(System.String,System.String,System.String,System.String,System.String)">
            <summary>Waits until the specified window exists.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="Seconds">How many seconds to wait before timing out and setting ErrorLevel to 1. Leave blank to wait indefinitely. Specifying 0 is the same as specifying 0.5. This parameter can be an expression.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param> 
        </member>
        <member name="M:sharpAHK._AHK.WinWaitActive(System.String,System.String,System.String,System.String,System.String)">
            <summary>Waits until the specified window is active.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="Seconds">How many seconds to wait before timing out and setting ErrorLevel to 1. Leave blank to wait indefinitely. Specifying 0 is the same as specifying 0.5. This parameter can be an expression.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param> 
        </member>
        <member name="M:sharpAHK._AHK.WinWaitNotActive(System.String,System.String,System.String,System.String,System.String)">
            <summary>Waits until the specified window is not active.</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="Seconds">How many seconds to wait before timing out and setting ErrorLevel to 1. Leave blank to wait indefinitely. Specifying 0 is the same as specifying 0.5. This parameter can be an expression.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param> 
        </member>
        <member name="M:sharpAHK._AHK.IsMinimized(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the minimized/maximized state for a window. returns true if window is minimized</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.IsMaximized(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the minimized/maximized state for a window. returns true if window is maximized</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.NotMinOrMax(System.String,System.String,System.String,System.String)">
            <summary>Retrieves the minimized/maximized state for a window. returns true if window is NEITHER minimized nor maximized</summary>
            <param name="WinTitle">The title or partial title of the target window (the matching behavior is determined by SetTitleMatchMode). If this and the other 3 parameters are omitted, the Last Found Window will be used. To use a window class, specify ahk_class ExactClassName (shown by Window Spy). To use a process identifier (PID), specify ahk_pid %VarContainingPID%. To use a window group, specify ahk_group GroupName. To use a window's unique ID number, specify ahk_id %VarContainingID%. The search can be narrowed by specifying multiple criteria. For example: My File.txt ahk_class Notepad</param>
            <param name="WinText">If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.</param>
            <param name="ExcludeTitle">Windows whose titles include this value will not be considered. Note: Due to backward compatibility with .aut scripts, this parameter will be interpreted as a command if it exactly matches the name of a command. To work around this, use the WinActive() function instead.</param>
            <param name="ExcludeText">Windows whose text include this value will not be considered.</param>
        </member>
        <member name="M:sharpAHK._AHK.WinList">
            <summary>
            Returns List of Window Titles in Current Processes
            </summary>
            <returns>List of Window Titles Currently Running</returns>
        </member>
        <member name="M:sharpAHK._AHK.WinHwnd(System.Object)">
            <summary>
            Returns Window Handle (from either handle or window title)
            </summary>
            <param name="WinTitle"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.Return_wInfo(System.Object)">
            <summary>
            Populate wInfo object from the Window Title
            </summary>
            <param name="WinTitle"></param>
            <returns></returns>
        </member>
        <member name="M:sharpAHK._AHK.Windows_DiskMgr">
            <summary>
            Launch Windows Disk Manager
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.MyComputer">
            <summary>
            Launch Windows MyComputer Window.
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.RecycleBin">
            <summary>
            Launch Windows RecycleBin Window
            </summary>
        </member>
        <member name="M:sharpAHK._AHK.Zip(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Add File to New or Existing .Zip File</summary>
            <param name="FileToZip">FilePath to add to New/Existing Zip File</param>
            <param name="zipFile">New/Existing Zip File to Add File To</param>
            <param name="Fastest">Option to add Zip File Fastest Method (Slower = Smaller File)</param>
            <param name="FullPath">False = File in Root of Zip File, True = Full folder structure as found in original file path</param>
            <example>
            bool Zipped = ahk.Zip(FilePath, newZip, false, false, false);  // places file in root of zip file
            bool Zipped = ahk.Zip(FilePath, newZip, false, false, true);   // places file in same folder structure as found on location drive (buried in sub folders under drive letter inside zip)
            </example>
        </member>
        <member name="M:sharpAHK._AHK.ZipDir(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Add Folder to Zip File</summary>
            <param name="DirToZip">Path of Directory to Zip</param>
            <param name="zipFile">New/Existing Zip File to Add Folder To</param>
            <param name="Fastest">Either Fastest speed (True) or (False) for Optimal Compression level</param>
            <param name="IncludeBaseDir">Default option to include base directory in zip file structure</param>
        </member>
        <member name="M:sharpAHK._AHK.UnZip(System.String,System.String)">
            <summary>Unzip Zip File to Directory</summary>
            <param name="zipFile">Zip File Path</param>
            <param name="UnZipDir">Location to Unzip Files To (If Blank Unzips To ZipFileDir\ZipFileName</param>
        </member>
        <member name="M:sharpAHK._AHK.ZipEachFile(System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>Loop through DirPath and create new ZIP file for each file in directory</summary>
            <param name="DirPath"> </param>
            <param name="Fastest"> </param>
            <param name="SearchPattern"> </param>
        </member>
        <member name="M:sharpAHK._AHK.ZipEachFile_NewThread(System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>Loop through DirPath and create new ZIP file for each folder in directory [CREATES NEW THREAD]</summary>
            <param name="DirPath">Root directory to search for folders to zip</param>
            <param name="Fastest">Compression Method, Fastest = true, Optimal = false</param>
            <param name="SearchPattern">Search pattern for folder names to zip</param>
        </member>
        <member name="M:sharpAHK._AHK.ZipEachDir(System.String,System.Boolean,System.String)">
            <summary>Loop through DirPath and create new ZIP file for each folder in directory</summary>
            <param name="DirPath">Root directory to search for folders to zip</param>
            <param name="Fastest">Compression Method, Fastest = true, Optimal = false</param>
            <param name="SearchPattern">Search pattern for folder names to zip</param>
        </member>
        <member name="M:sharpAHK._AHK.ZipEachDir_NewThread(System.String,System.Boolean,System.String)">
            <summary>Loop through DirPath and create new ZIP file for each folder in directory [CREATES NEW THREAD]</summary>
            <param name="DirPath">Root directory to search for folders to zip</param>
            <param name="Fastest">Compression Method, Fastest = true, Optimal = false</param>
            <param name="SearchPattern">Search pattern for folder names to zip</param>
        </member>
        <member name="T:sharpAHK.ahkGlobal">
            <summary>Stores Global Variables / Session Info / Error Level / Logging Values</summary>
        </member>
        <member name="T:sharpAHK.mousePos">
            <summary>Stores Mouse Coordinates (Relative to Screen or Window) and Info Gathered Under Mouse</summary>
        </member>
        <member name="T:sharpAHK.winInfo">
            <summary>Stores Window Coordinates and Additional Details Returned from AHK Functions</summary>
        </member>
        <member name="T:sharpAHK.Rect">
            <summary>
            used to return window position
            </summary>
        </member>
        <member name="T:sharpAHK.Coordinates">
            <summary>
            used to return window position
            </summary>
        </member>
        <member name="T:sharpAHK.conInfo">
            <summary>
            control info parameters
            </summary>
        </member>
        <member name="T:sharpAHK.wInfo">
            <summary>
            window / mouse / control info parameters
            </summary>
        </member>
    </members>
</doc>
